/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the LanguageConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageConfiguration{}

// LanguageConfiguration Sets up additional configuration that changes the original message content you can preview with this call.
type LanguageConfiguration struct {
	Language *LanguageV1
	// Conversion of a message text from one script to another. Possible values: `TURKISH`, `GREEK`, `CYRILLIC`, `SERBIAN_CYRILLIC`, `BULGARIAN_CYRILLIC`, `CENTRAL_EUROPEAN`, `BALTIC` and `NON_UNICODE`.
	Transliteration *string
}

// NewLanguageConfiguration instantiates a new LanguageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageConfiguration() *LanguageConfiguration {
	this := LanguageConfiguration{}
	return &this
}

// NewLanguageConfigurationWithDefaults instantiates a new LanguageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageConfigurationWithDefaults() *LanguageConfiguration {
	this := LanguageConfiguration{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *LanguageConfiguration) GetLanguage() LanguageV1 {
	if o == nil || IsNil(o.Language) {
		var ret LanguageV1
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageConfiguration) GetLanguageOk() (*LanguageV1, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *LanguageConfiguration) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given LanguageV1 and assigns it to the Language field.
func (o *LanguageConfiguration) SetLanguage(v LanguageV1) {
	o.Language = &v
}

// GetTransliteration returns the Transliteration field value if set, zero value otherwise.
func (o *LanguageConfiguration) GetTransliteration() string {
	if o == nil || IsNil(o.Transliteration) {
		var ret string
		return ret
	}
	return *o.Transliteration
}

// GetTransliterationOk returns a tuple with the Transliteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageConfiguration) GetTransliterationOk() (*string, bool) {
	if o == nil || IsNil(o.Transliteration) {
		return nil, false
	}
	return o.Transliteration, true
}

// HasTransliteration returns a boolean if a field has been set.
func (o *LanguageConfiguration) HasTransliteration() bool {
	if o != nil && !IsNil(o.Transliteration) {
		return true
	}

	return false
}

// SetTransliteration gets a reference to the given string and assigns it to the Transliteration field.
func (o *LanguageConfiguration) SetTransliteration(v string) {
	o.Transliteration = &v
}

func (o LanguageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Transliteration) {
		toSerialize["transliteration"] = o.Transliteration
	}
	return toSerialize, nil
}

type NullableLanguageConfiguration struct {
	value *LanguageConfiguration
	isSet bool
}

func (v NullableLanguageConfiguration) Get() *LanguageConfiguration {
	return v.value
}

func (v *NullableLanguageConfiguration) Set(val *LanguageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageConfiguration(val *LanguageConfiguration) *NullableLanguageConfiguration {
	return &NullableLanguageConfiguration{value: val, isSet: true}
}

func (v NullableLanguageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

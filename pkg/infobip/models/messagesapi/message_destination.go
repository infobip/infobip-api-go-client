/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
	"gopkg.in/validator.v2"
)

// MessageDestination - Array of destination objects for where messages are being sent. A valid destination is required.
type MessageDestination struct {
	ChannelsDestination *ChannelsDestination
	ToDestination       *ToDestination
}

// ChannelsDestinationAsMessageDestination is a convenience function that returns ChannelsDestination wrapped in MessageDestination
func ChannelsDestinationAsMessageDestination(v *ChannelsDestination) MessageDestination {
	return MessageDestination{
		ChannelsDestination: v,
	}
}

// ToDestinationAsMessageDestination is a convenience function that returns ToDestination wrapped in MessageDestination
func ToDestinationAsMessageDestination(v *ToDestination) MessageDestination {
	return MessageDestination{
		ToDestination: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageDestination) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChannelsDestination
	err = NewStrictDecoder(data).Decode(&dst.ChannelsDestination)
	if err == nil {
		jsonChannelsDestination, _ := json.Marshal(dst.ChannelsDestination)
		if string(jsonChannelsDestination) == "{}" { // empty struct
			dst.ChannelsDestination = nil
		} else {
			if err = validator.Validate(dst.ChannelsDestination); err != nil {
				dst.ChannelsDestination = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChannelsDestination = nil
	}

	// try to unmarshal data into ToDestination
	err = NewStrictDecoder(data).Decode(&dst.ToDestination)
	if err == nil {
		jsonToDestination, _ := json.Marshal(dst.ToDestination)
		if string(jsonToDestination) == "{}" { // empty struct
			dst.ToDestination = nil
		} else {
			if err = validator.Validate(dst.ToDestination); err != nil {
				dst.ToDestination = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToDestination = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChannelsDestination = nil
		dst.ToDestination = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageDestination)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageDestination)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageDestination) MarshalJSON() ([]byte, error) {
	if src.ChannelsDestination != nil {
		return json.Marshal(&src.ChannelsDestination)
	}

	if src.ToDestination != nil {
		return json.Marshal(&src.ToDestination)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageDestination) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ChannelsDestination != nil {
		return obj.ChannelsDestination
	}

	if obj.ToDestination != nil {
		return obj.ToDestination
	}

	// all schemas are nil
	return nil
}

type NullableMessageDestination struct {
	value *MessageDestination
	isSet bool
}

func (v NullableMessageDestination) Get() *MessageDestination {
	return v.value
}

func (v *NullableMessageDestination) Set(val *MessageDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDestination(val *MessageDestination) *NullableMessageDestination {
	return &NullableMessageDestination{value: val, isSet: true}
}

func (v NullableMessageDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

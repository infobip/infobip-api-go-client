/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SipTrunkRegistrationStatus SIP trunk registration status.
type SipTrunkRegistrationStatus string

// List of SipTrunkRegistrationStatus
const (
	SIPTRUNKREGISTRATIONSTATUS_REGISTERED   SipTrunkRegistrationStatus = "REGISTERED"
	SIPTRUNKREGISTRATIONSTATUS_UNREGISTERED SipTrunkRegistrationStatus = "UNREGISTERED"
)

// All allowed values of SipTrunkRegistrationStatus enum
var AllowedSipTrunkRegistrationStatusEnumValues = []SipTrunkRegistrationStatus{
	"REGISTERED",
	"UNREGISTERED",
}

func (v *SipTrunkRegistrationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SipTrunkRegistrationStatus(value)
	for _, existing := range AllowedSipTrunkRegistrationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SipTrunkRegistrationStatus", value)
}

// NewSipTrunkRegistrationStatusFromValue returns a pointer to a valid SipTrunkRegistrationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSipTrunkRegistrationStatusFromValue(v string) (*SipTrunkRegistrationStatus, error) {
	ev := SipTrunkRegistrationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SipTrunkRegistrationStatus: valid values are %v", v, AllowedSipTrunkRegistrationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SipTrunkRegistrationStatus) IsValid() bool {
	for _, existing := range AllowedSipTrunkRegistrationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SipTrunkRegistrationStatus value
func (v SipTrunkRegistrationStatus) Ptr() *SipTrunkRegistrationStatus {
	return &v
}

type NullableSipTrunkRegistrationStatus struct {
	value *SipTrunkRegistrationStatus
	isSet bool
}

func (v NullableSipTrunkRegistrationStatus) Get() *SipTrunkRegistrationStatus {
	return v.value
}

func (v *NullableSipTrunkRegistrationStatus) Set(val *SipTrunkRegistrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSipTrunkRegistrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSipTrunkRegistrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipTrunkRegistrationStatus(val *SipTrunkRegistrationStatus) *NullableSipTrunkRegistrationStatus {
	return &NullableSipTrunkRegistrationStatus{value: val, isSet: true}
}

func (v NullableSipTrunkRegistrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipTrunkRegistrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

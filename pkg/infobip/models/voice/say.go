/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Say type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Say{}

// Say Say action converts provided text into an audio file which is played during the call based on the provided parameters. Message text can be up to 1400 characters long.
type Say struct {
	// Message text. SSML (_Speech Synthesis Markup Language_) is supported and can be used to fully customize pronunciation of the provided text.
	Say     string
	Options *SayOptions
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _Say Say

// NewSay instantiates a new Say object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSay(say string) *Say {
	this := Say{}
	this.Say = say
	return &this
}

// NewSayWithDefaults instantiates a new Say object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSayWithDefaults() *Say {
	this := Say{}

	return &this
}

// GetSay returns the Say field value
func (o *Say) GetSay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Say
}

// GetSayOk returns a tuple with the Say field value
// and a boolean to check if the value has been set.
func (o *Say) GetSayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Say, true
}

// SetSay sets field value
func (o *Say) SetSay(v string) {
	o.Say = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Say) GetOptions() SayOptions {
	if o == nil || IsNil(o.Options) {
		var ret SayOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Say) GetOptionsOk() (*SayOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Say) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given SayOptions and assigns it to the Options field.
func (o *Say) SetOptions(v SayOptions) {
	o.Options = &v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *Say) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Say) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *Say) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *Say) SetActionId(v int32) {
	o.ActionId = &v
}

func (o Say) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Say) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["say"] = o.Say
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullableSay struct {
	value *Say
	isSet bool
}

func (v NullableSay) Get() *Say {
	return v.value
}

func (v *NullableSay) Set(val *Say) {
	v.value = val
	v.isSet = true
}

func (v NullableSay) IsSet() bool {
	return v.isSet
}

func (v *NullableSay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSay(val *Say) *NullableSay {
	return &NullableSay{value: val, isSet: true}
}

func (v NullableSay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MoEventContent Content of the message.
type MoEventContent struct {
	MoEventAudioContent                  *MoEventAudioContent
	MoEventAuthenticationResponseContent *MoEventAuthenticationResponseContent
	MoEventButtonReplyContent            *MoEventButtonReplyContent
	MoEventDocumentContent               *MoEventDocumentContent
	MoEventFileContent                   *MoEventFileContent
	MoEventImageContent                  *MoEventImageContent
	MoEventListReplyContent              *MoEventListReplyContent
	MoEventLocationContent               *MoEventLocationContent
	MoEventSubjectContent                *MoEventSubjectContent
	MoEventTextContent                   *MoEventTextContent
	MoEventVideoContent                  *MoEventVideoContent
}

// MoEventAudioContentAsMoEventContent is a convenience function that returns MoEventAudioContent wrapped in MoEventContent
func MoEventAudioContentAsMoEventContent(v *MoEventAudioContent) MoEventContent {
	return MoEventContent{
		MoEventAudioContent: v,
	}
}

// MoEventAuthenticationResponseContentAsMoEventContent is a convenience function that returns MoEventAuthenticationResponseContent wrapped in MoEventContent
func MoEventAuthenticationResponseContentAsMoEventContent(v *MoEventAuthenticationResponseContent) MoEventContent {
	return MoEventContent{
		MoEventAuthenticationResponseContent: v,
	}
}

// MoEventButtonReplyContentAsMoEventContent is a convenience function that returns MoEventButtonReplyContent wrapped in MoEventContent
func MoEventButtonReplyContentAsMoEventContent(v *MoEventButtonReplyContent) MoEventContent {
	return MoEventContent{
		MoEventButtonReplyContent: v,
	}
}

// MoEventDocumentContentAsMoEventContent is a convenience function that returns MoEventDocumentContent wrapped in MoEventContent
func MoEventDocumentContentAsMoEventContent(v *MoEventDocumentContent) MoEventContent {
	return MoEventContent{
		MoEventDocumentContent: v,
	}
}

// MoEventFileContentAsMoEventContent is a convenience function that returns MoEventFileContent wrapped in MoEventContent
func MoEventFileContentAsMoEventContent(v *MoEventFileContent) MoEventContent {
	return MoEventContent{
		MoEventFileContent: v,
	}
}

// MoEventImageContentAsMoEventContent is a convenience function that returns MoEventImageContent wrapped in MoEventContent
func MoEventImageContentAsMoEventContent(v *MoEventImageContent) MoEventContent {
	return MoEventContent{
		MoEventImageContent: v,
	}
}

// MoEventListReplyContentAsMoEventContent is a convenience function that returns MoEventListReplyContent wrapped in MoEventContent
func MoEventListReplyContentAsMoEventContent(v *MoEventListReplyContent) MoEventContent {
	return MoEventContent{
		MoEventListReplyContent: v,
	}
}

// MoEventLocationContentAsMoEventContent is a convenience function that returns MoEventLocationContent wrapped in MoEventContent
func MoEventLocationContentAsMoEventContent(v *MoEventLocationContent) MoEventContent {
	return MoEventContent{
		MoEventLocationContent: v,
	}
}

// MoEventSubjectContentAsMoEventContent is a convenience function that returns MoEventSubjectContent wrapped in MoEventContent
func MoEventSubjectContentAsMoEventContent(v *MoEventSubjectContent) MoEventContent {
	return MoEventContent{
		MoEventSubjectContent: v,
	}
}

// MoEventTextContentAsMoEventContent is a convenience function that returns MoEventTextContent wrapped in MoEventContent
func MoEventTextContentAsMoEventContent(v *MoEventTextContent) MoEventContent {
	return MoEventContent{
		MoEventTextContent: v,
	}
}

// MoEventVideoContentAsMoEventContent is a convenience function that returns MoEventVideoContent wrapped in MoEventContent
func MoEventVideoContentAsMoEventContent(v *MoEventVideoContent) MoEventContent {
	return MoEventContent{
		MoEventVideoContent: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MoEventContent) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'AUDIO'
	if jsonDict["type"] == "AUDIO" {
		// try to unmarshal JSON data into MoEventAudioContent
		err = json.Unmarshal(data, &dst.MoEventAudioContent)
		if err == nil {
			jsonMoEventAudioContent, _ := json.Marshal(dst.MoEventAudioContent)
			if string(jsonMoEventAudioContent) == "{}" { // empty struct
				dst.MoEventAudioContent = nil
			} else {
				return nil // data stored in dst.MoEventAudioContent, return on the first match
			}
		} else {
			dst.MoEventAudioContent = nil
		}
	}
	// check if the discriminator value is 'AUTHENTICATION_RESPONSE'
	if jsonDict["type"] == "AUTHENTICATION_RESPONSE" {
		// try to unmarshal JSON data into MoEventAuthenticationResponseContent
		err = json.Unmarshal(data, &dst.MoEventAuthenticationResponseContent)
		if err == nil {
			jsonMoEventAuthenticationResponseContent, _ := json.Marshal(dst.MoEventAuthenticationResponseContent)
			if string(jsonMoEventAuthenticationResponseContent) == "{}" { // empty struct
				dst.MoEventAuthenticationResponseContent = nil
			} else {
				return nil // data stored in dst.MoEventAuthenticationResponseContent, return on the first match
			}
		} else {
			dst.MoEventAuthenticationResponseContent = nil
		}
	}
	// check if the discriminator value is 'BUTTON_REPLY'
	if jsonDict["type"] == "BUTTON_REPLY" {
		// try to unmarshal JSON data into MoEventButtonReplyContent
		err = json.Unmarshal(data, &dst.MoEventButtonReplyContent)
		if err == nil {
			jsonMoEventButtonReplyContent, _ := json.Marshal(dst.MoEventButtonReplyContent)
			if string(jsonMoEventButtonReplyContent) == "{}" { // empty struct
				dst.MoEventButtonReplyContent = nil
			} else {
				return nil // data stored in dst.MoEventButtonReplyContent, return on the first match
			}
		} else {
			dst.MoEventButtonReplyContent = nil
		}
	}
	// check if the discriminator value is 'DOCUMENT'
	if jsonDict["type"] == "DOCUMENT" {
		// try to unmarshal JSON data into MoEventDocumentContent
		err = json.Unmarshal(data, &dst.MoEventDocumentContent)
		if err == nil {
			jsonMoEventDocumentContent, _ := json.Marshal(dst.MoEventDocumentContent)
			if string(jsonMoEventDocumentContent) == "{}" { // empty struct
				dst.MoEventDocumentContent = nil
			} else {
				return nil // data stored in dst.MoEventDocumentContent, return on the first match
			}
		} else {
			dst.MoEventDocumentContent = nil
		}
	}
	// check if the discriminator value is 'FILE'
	if jsonDict["type"] == "FILE" {
		// try to unmarshal JSON data into MoEventFileContent
		err = json.Unmarshal(data, &dst.MoEventFileContent)
		if err == nil {
			jsonMoEventFileContent, _ := json.Marshal(dst.MoEventFileContent)
			if string(jsonMoEventFileContent) == "{}" { // empty struct
				dst.MoEventFileContent = nil
			} else {
				return nil // data stored in dst.MoEventFileContent, return on the first match
			}
		} else {
			dst.MoEventFileContent = nil
		}
	}
	// check if the discriminator value is 'IMAGE'
	if jsonDict["type"] == "IMAGE" {
		// try to unmarshal JSON data into MoEventImageContent
		err = json.Unmarshal(data, &dst.MoEventImageContent)
		if err == nil {
			jsonMoEventImageContent, _ := json.Marshal(dst.MoEventImageContent)
			if string(jsonMoEventImageContent) == "{}" { // empty struct
				dst.MoEventImageContent = nil
			} else {
				return nil // data stored in dst.MoEventImageContent, return on the first match
			}
		} else {
			dst.MoEventImageContent = nil
		}
	}
	// check if the discriminator value is 'LIST_REPLY'
	if jsonDict["type"] == "LIST_REPLY" {
		// try to unmarshal JSON data into MoEventListReplyContent
		err = json.Unmarshal(data, &dst.MoEventListReplyContent)
		if err == nil {
			jsonMoEventListReplyContent, _ := json.Marshal(dst.MoEventListReplyContent)
			if string(jsonMoEventListReplyContent) == "{}" { // empty struct
				dst.MoEventListReplyContent = nil
			} else {
				return nil // data stored in dst.MoEventListReplyContent, return on the first match
			}
		} else {
			dst.MoEventListReplyContent = nil
		}
	}
	// check if the discriminator value is 'LOCATION'
	if jsonDict["type"] == "LOCATION" {
		// try to unmarshal JSON data into MoEventLocationContent
		err = json.Unmarshal(data, &dst.MoEventLocationContent)
		if err == nil {
			jsonMoEventLocationContent, _ := json.Marshal(dst.MoEventLocationContent)
			if string(jsonMoEventLocationContent) == "{}" { // empty struct
				dst.MoEventLocationContent = nil
			} else {
				return nil // data stored in dst.MoEventLocationContent, return on the first match
			}
		} else {
			dst.MoEventLocationContent = nil
		}
	}
	// check if the discriminator value is 'SUBJECT'
	if jsonDict["type"] == "SUBJECT" {
		// try to unmarshal JSON data into MoEventSubjectContent
		err = json.Unmarshal(data, &dst.MoEventSubjectContent)
		if err == nil {
			jsonMoEventSubjectContent, _ := json.Marshal(dst.MoEventSubjectContent)
			if string(jsonMoEventSubjectContent) == "{}" { // empty struct
				dst.MoEventSubjectContent = nil
			} else {
				return nil // data stored in dst.MoEventSubjectContent, return on the first match
			}
		} else {
			dst.MoEventSubjectContent = nil
		}
	}
	// check if the discriminator value is 'TEXT'
	if jsonDict["type"] == "TEXT" {
		// try to unmarshal JSON data into MoEventTextContent
		err = json.Unmarshal(data, &dst.MoEventTextContent)
		if err == nil {
			jsonMoEventTextContent, _ := json.Marshal(dst.MoEventTextContent)
			if string(jsonMoEventTextContent) == "{}" { // empty struct
				dst.MoEventTextContent = nil
			} else {
				return nil // data stored in dst.MoEventTextContent, return on the first match
			}
		} else {
			dst.MoEventTextContent = nil
		}
	}
	// check if the discriminator value is 'VIDEO'
	if jsonDict["type"] == "VIDEO" {
		// try to unmarshal JSON data into MoEventVideoContent
		err = json.Unmarshal(data, &dst.MoEventVideoContent)
		if err == nil {
			jsonMoEventVideoContent, _ := json.Marshal(dst.MoEventVideoContent)
			if string(jsonMoEventVideoContent) == "{}" { // empty struct
				dst.MoEventVideoContent = nil
			} else {
				return nil // data stored in dst.MoEventVideoContent, return on the first match
			}
		} else {
			dst.MoEventVideoContent = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(MoEventContent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MoEventContent) MarshalJSON() ([]byte, error) {
	if src.MoEventAudioContent != nil {
		return json.Marshal(&src.MoEventAudioContent)
	}
	if src.MoEventAuthenticationResponseContent != nil {
		return json.Marshal(&src.MoEventAuthenticationResponseContent)
	}
	if src.MoEventButtonReplyContent != nil {
		return json.Marshal(&src.MoEventButtonReplyContent)
	}
	if src.MoEventDocumentContent != nil {
		return json.Marshal(&src.MoEventDocumentContent)
	}
	if src.MoEventFileContent != nil {
		return json.Marshal(&src.MoEventFileContent)
	}
	if src.MoEventImageContent != nil {
		return json.Marshal(&src.MoEventImageContent)
	}
	if src.MoEventListReplyContent != nil {
		return json.Marshal(&src.MoEventListReplyContent)
	}
	if src.MoEventLocationContent != nil {
		return json.Marshal(&src.MoEventLocationContent)
	}
	if src.MoEventSubjectContent != nil {
		return json.Marshal(&src.MoEventSubjectContent)
	}
	if src.MoEventTextContent != nil {
		return json.Marshal(&src.MoEventTextContent)
	}
	if src.MoEventVideoContent != nil {
		return json.Marshal(&src.MoEventVideoContent)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *MoEventContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoEventAudioContent != nil {
		return obj.MoEventAudioContent
	}
	if obj.MoEventAuthenticationResponseContent != nil {
		return obj.MoEventAuthenticationResponseContent
	}
	if obj.MoEventButtonReplyContent != nil {
		return obj.MoEventButtonReplyContent
	}
	if obj.MoEventDocumentContent != nil {
		return obj.MoEventDocumentContent
	}
	if obj.MoEventFileContent != nil {
		return obj.MoEventFileContent
	}
	if obj.MoEventImageContent != nil {
		return obj.MoEventImageContent
	}
	if obj.MoEventListReplyContent != nil {
		return obj.MoEventListReplyContent
	}
	if obj.MoEventLocationContent != nil {
		return obj.MoEventLocationContent
	}
	if obj.MoEventSubjectContent != nil {
		return obj.MoEventSubjectContent
	}
	if obj.MoEventTextContent != nil {
		return obj.MoEventTextContent
	}
	if obj.MoEventVideoContent != nil {
		return obj.MoEventVideoContent
	}
	// all schemas are nil
	return nil
}

type NullableMoEventContent struct {
	value *MoEventContent
	isSet bool
}

func (v NullableMoEventContent) Get() *MoEventContent {
	return v.value
}

func (v *NullableMoEventContent) Set(val *MoEventContent) {
	v.value = val
	v.isSet = true
}

func (v NullableMoEventContent) IsSet() bool {
	return v.isSet
}

func (v *NullableMoEventContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoEventContent(val *MoEventContent) *NullableMoEventContent {
	return &NullableMoEventContent{value: val, isSet: true}
}

func (v NullableMoEventContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoEventContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

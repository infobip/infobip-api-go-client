/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsLanguage struct for SmsLanguage
type SmsLanguage struct {
	// Language code for the correct character set. Possible values: `TR` for Turkish, `ES` for Spanish, `PT` for Portuguese, or `AUTODETECT` to let platform select the character set based on message content.
	LanguageCode *string `json:"languageCode,omitempty"`
}

// NewSmsLanguage instantiates a new SmsLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsLanguage() *SmsLanguage {
	this := SmsLanguage{}
	return &this
}

// NewSmsLanguageWithDefaults instantiates a new SmsLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsLanguageWithDefaults() *SmsLanguage {
	this := SmsLanguage{}
	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *SmsLanguage) GetLanguageCode() string {
	if o == nil || o.LanguageCode == nil {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLanguage) GetLanguageCodeOk() (*string, bool) {
	if o == nil || o.LanguageCode == nil {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *SmsLanguage) HasLanguageCode() bool {
	if o != nil && o.LanguageCode != nil {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *SmsLanguage) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

func (o SmsLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LanguageCode != nil {
		toSerialize["languageCode"] = o.LanguageCode
	}
	return json.Marshal(toSerialize)
}

type NullableSmsLanguage struct {
	value *SmsLanguage
	isSet bool
}

func (v NullableSmsLanguage) Get() *SmsLanguage {
	return v.value
}

func (v *NullableSmsLanguage) Set(val *SmsLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsLanguage(val *SmsLanguage) *NullableSmsLanguage {
	return &NullableSmsLanguage{value: val, isSet: true}
}

func (v NullableSmsLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

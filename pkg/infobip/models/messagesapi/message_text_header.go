/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MessageTextHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageTextHeader{}

// MessageTextHeader struct for MessageTextHeader
type MessageTextHeader struct {
	Type MessageHeaderType
	// Text of the header.
	Text string
}

type _MessageTextHeader MessageTextHeader

// NewMessageTextHeader instantiates a new MessageTextHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageTextHeader(text string) *MessageTextHeader {
	this := MessageTextHeader{}
	this.Type = "TEXT"
	this.Text = text
	return &this
}

// NewMessageTextHeaderWithDefaults instantiates a new MessageTextHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageTextHeaderWithDefaults() *MessageTextHeader {
	this := MessageTextHeader{}
	this.Type = "TEXT"
	return &this
}

// GetText returns the Text field value
func (o *MessageTextHeader) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MessageTextHeader) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MessageTextHeader) SetText(v string) {
	o.Text = v
}

func (o MessageTextHeader) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageTextHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableMessageTextHeader struct {
	value *MessageTextHeader
	isSet bool
}

func (v NullableMessageTextHeader) Get() *MessageTextHeader {
	return v.value
}

func (v *NullableMessageTextHeader) Set(val *MessageTextHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageTextHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageTextHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageTextHeader(val *MessageTextHeader) *NullableMessageTextHeader {
	return &NullableMessageTextHeader{value: val, isSet: true}
}

func (v NullableMessageTextHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageTextHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallEndpoint Call endpoint. Represents a caller for the inbound calls and a callee for the outbound calls.
type CallEndpoint struct {
	PhoneEndpoint  *PhoneEndpoint
	SipEndpoint    *SipEndpoint
	ViberEndpoint  *ViberEndpoint
	WebRtcEndpoint *WebRtcEndpoint
}

// PhoneEndpointAsCallEndpoint is a convenience function that returns PhoneEndpoint wrapped in CallEndpoint
func PhoneEndpointAsCallEndpoint(v *PhoneEndpoint) CallEndpoint {
	return CallEndpoint{
		PhoneEndpoint: v,
	}
}

// SipEndpointAsCallEndpoint is a convenience function that returns SipEndpoint wrapped in CallEndpoint
func SipEndpointAsCallEndpoint(v *SipEndpoint) CallEndpoint {
	return CallEndpoint{
		SipEndpoint: v,
	}
}

// ViberEndpointAsCallEndpoint is a convenience function that returns ViberEndpoint wrapped in CallEndpoint
func ViberEndpointAsCallEndpoint(v *ViberEndpoint) CallEndpoint {
	return CallEndpoint{
		ViberEndpoint: v,
	}
}

// WebRtcEndpointAsCallEndpoint is a convenience function that returns WebRtcEndpoint wrapped in CallEndpoint
func WebRtcEndpointAsCallEndpoint(v *WebRtcEndpoint) CallEndpoint {
	return CallEndpoint{
		WebRtcEndpoint: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CallEndpoint) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'PHONE'
	if jsonDict["type"] == "PHONE" {
		// try to unmarshal JSON data into PhoneEndpoint
		err = json.Unmarshal(data, &dst.PhoneEndpoint)
		if err == nil {
			jsonPhoneEndpoint, _ := json.Marshal(dst.PhoneEndpoint)
			if string(jsonPhoneEndpoint) == "{}" { // empty struct
				dst.PhoneEndpoint = nil
			} else {
				return nil // data stored in dst.PhoneEndpoint, return on the first match
			}
		} else {
			dst.PhoneEndpoint = nil
		}
	}
	// check if the discriminator value is 'SIP'
	if jsonDict["type"] == "SIP" {
		// try to unmarshal JSON data into SipEndpoint
		err = json.Unmarshal(data, &dst.SipEndpoint)
		if err == nil {
			jsonSipEndpoint, _ := json.Marshal(dst.SipEndpoint)
			if string(jsonSipEndpoint) == "{}" { // empty struct
				dst.SipEndpoint = nil
			} else {
				return nil // data stored in dst.SipEndpoint, return on the first match
			}
		} else {
			dst.SipEndpoint = nil
		}
	}
	// check if the discriminator value is 'VIBER'
	if jsonDict["type"] == "VIBER" {
		// try to unmarshal JSON data into ViberEndpoint
		err = json.Unmarshal(data, &dst.ViberEndpoint)
		if err == nil {
			jsonViberEndpoint, _ := json.Marshal(dst.ViberEndpoint)
			if string(jsonViberEndpoint) == "{}" { // empty struct
				dst.ViberEndpoint = nil
			} else {
				return nil // data stored in dst.ViberEndpoint, return on the first match
			}
		} else {
			dst.ViberEndpoint = nil
		}
	}
	// check if the discriminator value is 'WEBRTC'
	if jsonDict["type"] == "WEBRTC" {
		// try to unmarshal JSON data into WebRtcEndpoint
		err = json.Unmarshal(data, &dst.WebRtcEndpoint)
		if err == nil {
			jsonWebRtcEndpoint, _ := json.Marshal(dst.WebRtcEndpoint)
			if string(jsonWebRtcEndpoint) == "{}" { // empty struct
				dst.WebRtcEndpoint = nil
			} else {
				return nil // data stored in dst.WebRtcEndpoint, return on the first match
			}
		} else {
			dst.WebRtcEndpoint = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(CallEndpoint)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallEndpoint) MarshalJSON() ([]byte, error) {
	if src.PhoneEndpoint != nil {
		return json.Marshal(&src.PhoneEndpoint)
	}
	if src.SipEndpoint != nil {
		return json.Marshal(&src.SipEndpoint)
	}
	if src.ViberEndpoint != nil {
		return json.Marshal(&src.ViberEndpoint)
	}
	if src.WebRtcEndpoint != nil {
		return json.Marshal(&src.WebRtcEndpoint)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *CallEndpoint) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PhoneEndpoint != nil {
		return obj.PhoneEndpoint
	}
	if obj.SipEndpoint != nil {
		return obj.SipEndpoint
	}
	if obj.ViberEndpoint != nil {
		return obj.ViberEndpoint
	}
	if obj.WebRtcEndpoint != nil {
		return obj.WebRtcEndpoint
	}
	// all schemas are nil
	return nil
}

type NullableCallEndpoint struct {
	value *CallEndpoint
	isSet bool
}

func (v NullableCallEndpoint) Get() *CallEndpoint {
	return v.value
}

func (v *NullableCallEndpoint) Set(val *CallEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableCallEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableCallEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallEndpoint(val *CallEndpoint) *NullableCallEndpoint {
	return &NullableCallEndpoint{value: val, isSet: true}
}

func (v NullableCallEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the PlayRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayRequest{}

// PlayRequest Call play request.
type PlayRequest struct {
	// Number of times the file will be played.
	LoopCount *int32
	// The duration, in milliseconds, of the file to be played. If timeout is not defined, the file will be played until it ends.
	Timeout *int64
	// The starting point, in milliseconds, from which the file will be played. If offset is not defined, the file will be played from its beginning.
	Offset  *int64
	Content PlayContent
	StopOn  *Termination
	// Optional parameter to update a call's custom data.
	CustomData *map[string]string
}

type _PlayRequest PlayRequest

// NewPlayRequest instantiates a new PlayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPlayRequest(content PlayContent) *PlayRequest {
	this := PlayRequest{}
	this.Content = content
	return &this
}

// NewPlayRequestWithDefaults instantiates a new PlayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayRequestWithDefaults() *PlayRequest {
	this := PlayRequest{}

	return &this
}

// GetLoopCount returns the LoopCount field value if set, zero value otherwise.
func (o *PlayRequest) GetLoopCount() int32 {
	if o == nil || IsNil(o.LoopCount) {
		var ret int32
		return ret
	}
	return *o.LoopCount
}

// GetLoopCountOk returns a tuple with the LoopCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetLoopCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LoopCount) {
		return nil, false
	}
	return o.LoopCount, true
}

// HasLoopCount returns a boolean if a field has been set.
func (o *PlayRequest) HasLoopCount() bool {
	if o != nil && !IsNil(o.LoopCount) {
		return true
	}

	return false
}

// SetLoopCount gets a reference to the given int32 and assigns it to the LoopCount field.
func (o *PlayRequest) SetLoopCount(v int32) {
	o.LoopCount = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *PlayRequest) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *PlayRequest) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *PlayRequest) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PlayRequest) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PlayRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *PlayRequest) SetOffset(v int64) {
	o.Offset = &v
}

// GetContent returns the Content field value
func (o *PlayRequest) GetContent() PlayContent {
	if o == nil {
		var ret PlayContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetContentOk() (*PlayContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *PlayRequest) SetContent(v PlayContent) {
	o.Content = v
}

// GetStopOn returns the StopOn field value if set, zero value otherwise.
func (o *PlayRequest) GetStopOn() Termination {
	if o == nil || IsNil(o.StopOn) {
		var ret Termination
		return ret
	}
	return *o.StopOn
}

// GetStopOnOk returns a tuple with the StopOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetStopOnOk() (*Termination, bool) {
	if o == nil || IsNil(o.StopOn) {
		return nil, false
	}
	return o.StopOn, true
}

// HasStopOn returns a boolean if a field has been set.
func (o *PlayRequest) HasStopOn() bool {
	if o != nil && !IsNil(o.StopOn) {
		return true
	}

	return false
}

// SetStopOn gets a reference to the given Termination and assigns it to the StopOn field.
func (o *PlayRequest) SetStopOn(v Termination) {
	o.StopOn = &v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *PlayRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *PlayRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *PlayRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

func (o PlayRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoopCount) {
		toSerialize["loopCount"] = o.LoopCount
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.StopOn) {
		toSerialize["stopOn"] = o.StopOn
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	return toSerialize, nil
}

type NullablePlayRequest struct {
	value *PlayRequest
	isSet bool
}

func (v NullablePlayRequest) Get() *PlayRequest {
	return v.value
}

func (v *NullablePlayRequest) Set(val *PlayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayRequest(val *PlayRequest) *NullablePlayRequest {
	return &NullablePlayRequest{value: val, isSet: true}
}

func (v NullablePlayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the IvrData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IvrData{}

// IvrData Fields representing details about IVR, if outbound IVR is being used. If the call was not IVR, the field will be null.
type IvrData struct {
	// The ID that uniquely identifies the IVR scenario.
	ScenarioId *string
	// Name of IVR scenario.
	ScenarioName *string
	// JSON object showing the result of every CollectAction in IVR scenario in the form of key/value pairs, where the key is CollectAction variable and pair is collected DTMF.
	CollectedDtmfs *string
	// JSON object showing the result of every CollectAction in IVR scenario with the mapped, meaningful, values you defined in CollectAction `mappedValues` option.
	CollectedMappedDtmfs *string
	// JSON object showing the result of every CaptureSpeech action with full text spoken by the user.
	SpokenInput *string
	// JSON object showing the result of every CaptureSpeech action with only the key phrases that matched user spoken input.
	MatchedSpokenInput *string
}

// NewIvrData instantiates a new IvrData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewIvrData() *IvrData {
	this := IvrData{}
	return &this
}

// NewIvrDataWithDefaults instantiates a new IvrData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIvrDataWithDefaults() *IvrData {
	this := IvrData{}

	return &this
}

// GetScenarioId returns the ScenarioId field value if set, zero value otherwise.
func (o *IvrData) GetScenarioId() string {
	if o == nil || IsNil(o.ScenarioId) {
		var ret string
		return ret
	}
	return *o.ScenarioId
}

// GetScenarioIdOk returns a tuple with the ScenarioId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetScenarioIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScenarioId) {
		return nil, false
	}
	return o.ScenarioId, true
}

// HasScenarioId returns a boolean if a field has been set.
func (o *IvrData) HasScenarioId() bool {
	if o != nil && !IsNil(o.ScenarioId) {
		return true
	}

	return false
}

// SetScenarioId gets a reference to the given string and assigns it to the ScenarioId field.
func (o *IvrData) SetScenarioId(v string) {
	o.ScenarioId = &v
}

// GetScenarioName returns the ScenarioName field value if set, zero value otherwise.
func (o *IvrData) GetScenarioName() string {
	if o == nil || IsNil(o.ScenarioName) {
		var ret string
		return ret
	}
	return *o.ScenarioName
}

// GetScenarioNameOk returns a tuple with the ScenarioName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetScenarioNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScenarioName) {
		return nil, false
	}
	return o.ScenarioName, true
}

// HasScenarioName returns a boolean if a field has been set.
func (o *IvrData) HasScenarioName() bool {
	if o != nil && !IsNil(o.ScenarioName) {
		return true
	}

	return false
}

// SetScenarioName gets a reference to the given string and assigns it to the ScenarioName field.
func (o *IvrData) SetScenarioName(v string) {
	o.ScenarioName = &v
}

// GetCollectedDtmfs returns the CollectedDtmfs field value if set, zero value otherwise.
func (o *IvrData) GetCollectedDtmfs() string {
	if o == nil || IsNil(o.CollectedDtmfs) {
		var ret string
		return ret
	}
	return *o.CollectedDtmfs
}

// GetCollectedDtmfsOk returns a tuple with the CollectedDtmfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetCollectedDtmfsOk() (*string, bool) {
	if o == nil || IsNil(o.CollectedDtmfs) {
		return nil, false
	}
	return o.CollectedDtmfs, true
}

// HasCollectedDtmfs returns a boolean if a field has been set.
func (o *IvrData) HasCollectedDtmfs() bool {
	if o != nil && !IsNil(o.CollectedDtmfs) {
		return true
	}

	return false
}

// SetCollectedDtmfs gets a reference to the given string and assigns it to the CollectedDtmfs field.
func (o *IvrData) SetCollectedDtmfs(v string) {
	o.CollectedDtmfs = &v
}

// GetCollectedMappedDtmfs returns the CollectedMappedDtmfs field value if set, zero value otherwise.
func (o *IvrData) GetCollectedMappedDtmfs() string {
	if o == nil || IsNil(o.CollectedMappedDtmfs) {
		var ret string
		return ret
	}
	return *o.CollectedMappedDtmfs
}

// GetCollectedMappedDtmfsOk returns a tuple with the CollectedMappedDtmfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetCollectedMappedDtmfsOk() (*string, bool) {
	if o == nil || IsNil(o.CollectedMappedDtmfs) {
		return nil, false
	}
	return o.CollectedMappedDtmfs, true
}

// HasCollectedMappedDtmfs returns a boolean if a field has been set.
func (o *IvrData) HasCollectedMappedDtmfs() bool {
	if o != nil && !IsNil(o.CollectedMappedDtmfs) {
		return true
	}

	return false
}

// SetCollectedMappedDtmfs gets a reference to the given string and assigns it to the CollectedMappedDtmfs field.
func (o *IvrData) SetCollectedMappedDtmfs(v string) {
	o.CollectedMappedDtmfs = &v
}

// GetSpokenInput returns the SpokenInput field value if set, zero value otherwise.
func (o *IvrData) GetSpokenInput() string {
	if o == nil || IsNil(o.SpokenInput) {
		var ret string
		return ret
	}
	return *o.SpokenInput
}

// GetSpokenInputOk returns a tuple with the SpokenInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetSpokenInputOk() (*string, bool) {
	if o == nil || IsNil(o.SpokenInput) {
		return nil, false
	}
	return o.SpokenInput, true
}

// HasSpokenInput returns a boolean if a field has been set.
func (o *IvrData) HasSpokenInput() bool {
	if o != nil && !IsNil(o.SpokenInput) {
		return true
	}

	return false
}

// SetSpokenInput gets a reference to the given string and assigns it to the SpokenInput field.
func (o *IvrData) SetSpokenInput(v string) {
	o.SpokenInput = &v
}

// GetMatchedSpokenInput returns the MatchedSpokenInput field value if set, zero value otherwise.
func (o *IvrData) GetMatchedSpokenInput() string {
	if o == nil || IsNil(o.MatchedSpokenInput) {
		var ret string
		return ret
	}
	return *o.MatchedSpokenInput
}

// GetMatchedSpokenInputOk returns a tuple with the MatchedSpokenInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IvrData) GetMatchedSpokenInputOk() (*string, bool) {
	if o == nil || IsNil(o.MatchedSpokenInput) {
		return nil, false
	}
	return o.MatchedSpokenInput, true
}

// HasMatchedSpokenInput returns a boolean if a field has been set.
func (o *IvrData) HasMatchedSpokenInput() bool {
	if o != nil && !IsNil(o.MatchedSpokenInput) {
		return true
	}

	return false
}

// SetMatchedSpokenInput gets a reference to the given string and assigns it to the MatchedSpokenInput field.
func (o *IvrData) SetMatchedSpokenInput(v string) {
	o.MatchedSpokenInput = &v
}

func (o IvrData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IvrData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScenarioId) {
		toSerialize["scenarioId"] = o.ScenarioId
	}
	if !IsNil(o.ScenarioName) {
		toSerialize["scenarioName"] = o.ScenarioName
	}
	if !IsNil(o.CollectedDtmfs) {
		toSerialize["collectedDtmfs"] = o.CollectedDtmfs
	}
	if !IsNil(o.CollectedMappedDtmfs) {
		toSerialize["collectedMappedDtmfs"] = o.CollectedMappedDtmfs
	}
	if !IsNil(o.SpokenInput) {
		toSerialize["spokenInput"] = o.SpokenInput
	}
	if !IsNil(o.MatchedSpokenInput) {
		toSerialize["matchedSpokenInput"] = o.MatchedSpokenInput
	}
	return toSerialize, nil
}

type NullableIvrData struct {
	value *IvrData
	isSet bool
}

func (v NullableIvrData) Get() *IvrData {
	return v.value
}

func (v *NullableIvrData) Set(val *IvrData) {
	v.value = val
	v.isSet = true
}

func (v NullableIvrData) IsSet() bool {
	return v.isSet
}

func (v *NullableIvrData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIvrData(val *IvrData) *NullableIvrData {
	return &NullableIvrData{value: val, isSet: true}
}

func (v NullableIvrData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIvrData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// HangupSource Hangup source.
type HangupSource string

// List of HangupSource
const (
	HANGUPSOURCE_ENDPOINT HangupSource = "ENDPOINT"
	HANGUPSOURCE_API      HangupSource = "API"
	HANGUPSOURCE_PLATFORM HangupSource = "PLATFORM"
)

// All allowed values of HangupSource enum
var AllowedHangupSourceEnumValues = []HangupSource{
	"ENDPOINT",
	"API",
	"PLATFORM",
}

func (v *HangupSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HangupSource(value)
	for _, existing := range AllowedHangupSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HangupSource", value)
}

// NewHangupSourceFromValue returns a pointer to a valid HangupSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHangupSourceFromValue(v string) (*HangupSource, error) {
	ev := HangupSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HangupSource: valid values are %v", v, AllowedHangupSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HangupSource) IsValid() bool {
	for _, existing := range AllowedHangupSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HangupSource value
func (v HangupSource) Ptr() *HangupSource {
	return &v
}

type NullableHangupSource struct {
	value *HangupSource
	isSet bool
}

func (v NullableHangupSource) Get() *HangupSource {
	return v.value
}

func (v *NullableHangupSource) Set(val *HangupSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHangupSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHangupSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHangupSource(val *HangupSource) *NullableHangupSource {
	return &NullableHangupSource{value: val, isSet: true}
}

func (v NullableHangupSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHangupSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

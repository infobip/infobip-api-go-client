/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the RegionalOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionalOptions{}

// RegionalOptions Region-specific parameters, often imposed by local laws. Use this, if country or region that you are sending an SMS to requires additional information.
type RegionalOptions struct {
	IndiaDlt   *IndiaDltOptions
	TurkeyIys  *TurkeyIysOptions
	SouthKorea *SouthKoreaOptions
}

// NewRegionalOptions instantiates a new RegionalOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewRegionalOptions() *RegionalOptions {
	this := RegionalOptions{}
	return &this
}

// NewRegionalOptionsWithDefaults instantiates a new RegionalOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionalOptionsWithDefaults() *RegionalOptions {
	this := RegionalOptions{}

	return &this
}

// GetIndiaDlt returns the IndiaDlt field value if set, zero value otherwise.
func (o *RegionalOptions) GetIndiaDlt() IndiaDltOptions {
	if o == nil || IsNil(o.IndiaDlt) {
		var ret IndiaDltOptions
		return ret
	}
	return *o.IndiaDlt
}

// GetIndiaDltOk returns a tuple with the IndiaDlt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalOptions) GetIndiaDltOk() (*IndiaDltOptions, bool) {
	if o == nil || IsNil(o.IndiaDlt) {
		return nil, false
	}
	return o.IndiaDlt, true
}

// HasIndiaDlt returns a boolean if a field has been set.
func (o *RegionalOptions) HasIndiaDlt() bool {
	if o != nil && !IsNil(o.IndiaDlt) {
		return true
	}

	return false
}

// SetIndiaDlt gets a reference to the given IndiaDltOptions and assigns it to the IndiaDlt field.
func (o *RegionalOptions) SetIndiaDlt(v IndiaDltOptions) {
	o.IndiaDlt = &v
}

// GetTurkeyIys returns the TurkeyIys field value if set, zero value otherwise.
func (o *RegionalOptions) GetTurkeyIys() TurkeyIysOptions {
	if o == nil || IsNil(o.TurkeyIys) {
		var ret TurkeyIysOptions
		return ret
	}
	return *o.TurkeyIys
}

// GetTurkeyIysOk returns a tuple with the TurkeyIys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalOptions) GetTurkeyIysOk() (*TurkeyIysOptions, bool) {
	if o == nil || IsNil(o.TurkeyIys) {
		return nil, false
	}
	return o.TurkeyIys, true
}

// HasTurkeyIys returns a boolean if a field has been set.
func (o *RegionalOptions) HasTurkeyIys() bool {
	if o != nil && !IsNil(o.TurkeyIys) {
		return true
	}

	return false
}

// SetTurkeyIys gets a reference to the given TurkeyIysOptions and assigns it to the TurkeyIys field.
func (o *RegionalOptions) SetTurkeyIys(v TurkeyIysOptions) {
	o.TurkeyIys = &v
}

// GetSouthKorea returns the SouthKorea field value if set, zero value otherwise.
func (o *RegionalOptions) GetSouthKorea() SouthKoreaOptions {
	if o == nil || IsNil(o.SouthKorea) {
		var ret SouthKoreaOptions
		return ret
	}
	return *o.SouthKorea
}

// GetSouthKoreaOk returns a tuple with the SouthKorea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalOptions) GetSouthKoreaOk() (*SouthKoreaOptions, bool) {
	if o == nil || IsNil(o.SouthKorea) {
		return nil, false
	}
	return o.SouthKorea, true
}

// HasSouthKorea returns a boolean if a field has been set.
func (o *RegionalOptions) HasSouthKorea() bool {
	if o != nil && !IsNil(o.SouthKorea) {
		return true
	}

	return false
}

// SetSouthKorea gets a reference to the given SouthKoreaOptions and assigns it to the SouthKorea field.
func (o *RegionalOptions) SetSouthKorea(v SouthKoreaOptions) {
	o.SouthKorea = &v
}

func (o RegionalOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionalOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndiaDlt) {
		toSerialize["indiaDlt"] = o.IndiaDlt
	}
	if !IsNil(o.TurkeyIys) {
		toSerialize["turkeyIys"] = o.TurkeyIys
	}
	if !IsNil(o.SouthKorea) {
		toSerialize["southKorea"] = o.SouthKorea
	}
	return toSerialize, nil
}

type NullableRegionalOptions struct {
	value *RegionalOptions
	isSet bool
}

func (v NullableRegionalOptions) Get() *RegionalOptions {
	return v.value
}

func (v *NullableRegionalOptions) Set(val *RegionalOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionalOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionalOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionalOptions(val *RegionalOptions) *NullableRegionalOptions {
	return &NullableRegionalOptions{value: val, isSet: true}
}

func (v NullableRegionalOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionalOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the UrlPlayContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlPlayContent{}

// UrlPlayContent struct for UrlPlayContent
type UrlPlayContent struct {
	Type          PlayContentType
	FileUrl       string
	CacheDuration *int32
}

type _UrlPlayContent UrlPlayContent

// NewUrlPlayContent instantiates a new UrlPlayContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlPlayContent(fileUrl string) *UrlPlayContent {
	this := UrlPlayContent{}
	this.Type = "URL"
	this.FileUrl = fileUrl
	return &this
}

// NewUrlPlayContentWithDefaults instantiates a new UrlPlayContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlPlayContentWithDefaults() *UrlPlayContent {
	this := UrlPlayContent{}
	this.Type = "URL"
	return &this
}

// GetFileUrl returns the FileUrl field value
func (o *UrlPlayContent) GetFileUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value
// and a boolean to check if the value has been set.
func (o *UrlPlayContent) GetFileUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileUrl, true
}

// SetFileUrl sets field value
func (o *UrlPlayContent) SetFileUrl(v string) {
	o.FileUrl = v
}

// GetCacheDuration returns the CacheDuration field value if set, zero value otherwise.
func (o *UrlPlayContent) GetCacheDuration() int32 {
	if o == nil || IsNil(o.CacheDuration) {
		var ret int32
		return ret
	}
	return *o.CacheDuration
}

// GetCacheDurationOk returns a tuple with the CacheDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlPlayContent) GetCacheDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.CacheDuration) {
		return nil, false
	}
	return o.CacheDuration, true
}

// HasCacheDuration returns a boolean if a field has been set.
func (o *UrlPlayContent) HasCacheDuration() bool {
	if o != nil && !IsNil(o.CacheDuration) {
		return true
	}

	return false
}

// SetCacheDuration gets a reference to the given int32 and assigns it to the CacheDuration field.
func (o *UrlPlayContent) SetCacheDuration(v int32) {
	o.CacheDuration = &v
}

func (o UrlPlayContent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlPlayContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["fileUrl"] = o.FileUrl
	if !IsNil(o.CacheDuration) {
		toSerialize["cacheDuration"] = o.CacheDuration
	}
	return toSerialize, nil
}

type NullableUrlPlayContent struct {
	value *UrlPlayContent
	isSet bool
}

func (v NullableUrlPlayContent) Get() *UrlPlayContent {
	return v.value
}

func (v *NullableUrlPlayContent) Set(val *UrlPlayContent) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlPlayContent) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlPlayContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlPlayContent(val *UrlPlayContent) *NullableUrlPlayContent {
	return &NullableUrlPlayContent{value: val, isSet: true}
}

func (v NullableUrlPlayContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlPlayContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

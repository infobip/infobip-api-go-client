/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// NumberPresentationFormat Format in which numbers are sent to a SIP trunk.
type NumberPresentationFormat string

// List of NumberPresentationFormat
const (
	NUMBERPRESENTATIONFORMAT_E164          NumberPresentationFormat = "E164"
	NUMBERPRESENTATIONFORMAT_INTERNATIONAL NumberPresentationFormat = "INTERNATIONAL"
	NUMBERPRESENTATIONFORMAT_US_NATIONAL   NumberPresentationFormat = "US_NATIONAL"
)

// All allowed values of NumberPresentationFormat enum
var AllowedNumberPresentationFormatEnumValues = []NumberPresentationFormat{
	"E164",
	"INTERNATIONAL",
	"US_NATIONAL",
}

func (v *NumberPresentationFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberPresentationFormat(value)
	for _, existing := range AllowedNumberPresentationFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberPresentationFormat", value)
}

// NewNumberPresentationFormatFromValue returns a pointer to a valid NumberPresentationFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberPresentationFormatFromValue(v string) (*NumberPresentationFormat, error) {
	ev := NumberPresentationFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberPresentationFormat: valid values are %v", v, AllowedNumberPresentationFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberPresentationFormat) IsValid() bool {
	for _, existing := range AllowedNumberPresentationFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberPresentationFormat value
func (v NumberPresentationFormat) Ptr() *NumberPresentationFormat {
	return &v
}

type NullableNumberPresentationFormat struct {
	value *NumberPresentationFormat
	isSet bool
}

func (v NullableNumberPresentationFormat) Get() *NumberPresentationFormat {
	return v.value
}

func (v *NullableNumberPresentationFormat) Set(val *NumberPresentationFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberPresentationFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberPresentationFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberPresentationFormat(val *NumberPresentationFormat) *NullableNumberPresentationFormat {
	return &NullableNumberPresentationFormat{value: val, isSet: true}
}

func (v NullableNumberPresentationFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberPresentationFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportResponse{}

// ReportResponse The array of objects for your sent messages.
type ReportResponse struct {
	// Number of returned messages in this request.
	MessageCount *int32
	// Number of remaining new messages on Infobip servers ready to be returned in the next request.
	PendingMessageCount *int32
	Results             []MoReport
}

// NewReportResponse instantiates a new ReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewReportResponse() *ReportResponse {
	this := ReportResponse{}
	return &this
}

// NewReportResponseWithDefaults instantiates a new ReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportResponseWithDefaults() *ReportResponse {
	this := ReportResponse{}

	return &this
}

// GetMessageCount returns the MessageCount field value if set, zero value otherwise.
func (o *ReportResponse) GetMessageCount() int32 {
	if o == nil || IsNil(o.MessageCount) {
		var ret int32
		return ret
	}
	return *o.MessageCount
}

// GetMessageCountOk returns a tuple with the MessageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetMessageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageCount) {
		return nil, false
	}
	return o.MessageCount, true
}

// HasMessageCount returns a boolean if a field has been set.
func (o *ReportResponse) HasMessageCount() bool {
	if o != nil && !IsNil(o.MessageCount) {
		return true
	}

	return false
}

// SetMessageCount gets a reference to the given int32 and assigns it to the MessageCount field.
func (o *ReportResponse) SetMessageCount(v int32) {
	o.MessageCount = &v
}

// GetPendingMessageCount returns the PendingMessageCount field value if set, zero value otherwise.
func (o *ReportResponse) GetPendingMessageCount() int32 {
	if o == nil || IsNil(o.PendingMessageCount) {
		var ret int32
		return ret
	}
	return *o.PendingMessageCount
}

// GetPendingMessageCountOk returns a tuple with the PendingMessageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetPendingMessageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingMessageCount) {
		return nil, false
	}
	return o.PendingMessageCount, true
}

// HasPendingMessageCount returns a boolean if a field has been set.
func (o *ReportResponse) HasPendingMessageCount() bool {
	if o != nil && !IsNil(o.PendingMessageCount) {
		return true
	}

	return false
}

// SetPendingMessageCount gets a reference to the given int32 and assigns it to the PendingMessageCount field.
func (o *ReportResponse) SetPendingMessageCount(v int32) {
	o.PendingMessageCount = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ReportResponse) GetResults() []MoReport {
	if o == nil || IsNil(o.Results) {
		var ret []MoReport
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResponse) GetResultsOk() ([]MoReport, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ReportResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []MoReport and assigns it to the Results field.
func (o *ReportResponse) SetResults(v []MoReport) {
	o.Results = v
}

func (o ReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageCount) {
		toSerialize["messageCount"] = o.MessageCount
	}
	if !IsNil(o.PendingMessageCount) {
		toSerialize["pendingMessageCount"] = o.PendingMessageCount
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableReportResponse struct {
	value *ReportResponse
	isSet bool
}

func (v NullableReportResponse) Get() *ReportResponse {
	return v.value
}

func (v *NullableReportResponse) Set(val *ReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportResponse(val *ReportResponse) *NullableReportResponse {
	return &NullableReportResponse{value: val, isSet: true}
}

func (v NullableReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

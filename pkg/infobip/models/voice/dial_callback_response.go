/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialCallbackResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialCallbackResponse{}

// DialCallbackResponse struct for DialCallbackResponse
type DialCallbackResponse struct {
	Command string
	// Destination phone number to call.
	PhoneNumber string
	// Caller ID displayed to a called party.
	CallerId      string
	Announcements *Announcements
	Recording     *CallsRecording
	// A user-defined reference ID for associating with a number masking session. This ID will appear in subsequent status requests and, if the session is recorded and our SFTP facility is used, will name the recording file. **Note:** In the case of recording, please limit this field to `200` characters as generated file name uses this field, call ID and extension, and if total file name is bigger than 256 characters, saving of the recording file will fail.
	ClientReferenceId *string
}

type _DialCallbackResponse DialCallbackResponse

// NewDialCallbackResponse instantiates a new DialCallbackResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDialCallbackResponse(phoneNumber string, callerId string) *DialCallbackResponse {
	this := DialCallbackResponse{}
	this.Command = "dial"
	this.PhoneNumber = phoneNumber
	this.CallerId = callerId
	return &this
}

// NewDialCallbackResponseWithDefaults instantiates a new DialCallbackResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialCallbackResponseWithDefaults() *DialCallbackResponse {
	this := DialCallbackResponse{}
	this.Command = "dial"
	return &this
}

// GetCommand returns the Command field value
func (o *DialCallbackResponse) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *DialCallbackResponse) SetCommand(v string) {
	o.Command = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *DialCallbackResponse) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *DialCallbackResponse) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetCallerId returns the CallerId field value
func (o *DialCallbackResponse) GetCallerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallerId
}

// GetCallerIdOk returns a tuple with the CallerId field value
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetCallerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallerId, true
}

// SetCallerId sets field value
func (o *DialCallbackResponse) SetCallerId(v string) {
	o.CallerId = v
}

// GetAnnouncements returns the Announcements field value if set, zero value otherwise.
func (o *DialCallbackResponse) GetAnnouncements() Announcements {
	if o == nil || IsNil(o.Announcements) {
		var ret Announcements
		return ret
	}
	return *o.Announcements
}

// GetAnnouncementsOk returns a tuple with the Announcements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetAnnouncementsOk() (*Announcements, bool) {
	if o == nil || IsNil(o.Announcements) {
		return nil, false
	}
	return o.Announcements, true
}

// HasAnnouncements returns a boolean if a field has been set.
func (o *DialCallbackResponse) HasAnnouncements() bool {
	if o != nil && !IsNil(o.Announcements) {
		return true
	}

	return false
}

// SetAnnouncements gets a reference to the given Announcements and assigns it to the Announcements field.
func (o *DialCallbackResponse) SetAnnouncements(v Announcements) {
	o.Announcements = &v
}

// GetRecording returns the Recording field value if set, zero value otherwise.
func (o *DialCallbackResponse) GetRecording() CallsRecording {
	if o == nil || IsNil(o.Recording) {
		var ret CallsRecording
		return ret
	}
	return *o.Recording
}

// GetRecordingOk returns a tuple with the Recording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetRecordingOk() (*CallsRecording, bool) {
	if o == nil || IsNil(o.Recording) {
		return nil, false
	}
	return o.Recording, true
}

// HasRecording returns a boolean if a field has been set.
func (o *DialCallbackResponse) HasRecording() bool {
	if o != nil && !IsNil(o.Recording) {
		return true
	}

	return false
}

// SetRecording gets a reference to the given CallsRecording and assigns it to the Recording field.
func (o *DialCallbackResponse) SetRecording(v CallsRecording) {
	o.Recording = &v
}

// GetClientReferenceId returns the ClientReferenceId field value if set, zero value otherwise.
func (o *DialCallbackResponse) GetClientReferenceId() string {
	if o == nil || IsNil(o.ClientReferenceId) {
		var ret string
		return ret
	}
	return *o.ClientReferenceId
}

// GetClientReferenceIdOk returns a tuple with the ClientReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialCallbackResponse) GetClientReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientReferenceId) {
		return nil, false
	}
	return o.ClientReferenceId, true
}

// HasClientReferenceId returns a boolean if a field has been set.
func (o *DialCallbackResponse) HasClientReferenceId() bool {
	if o != nil && !IsNil(o.ClientReferenceId) {
		return true
	}

	return false
}

// SetClientReferenceId gets a reference to the given string and assigns it to the ClientReferenceId field.
func (o *DialCallbackResponse) SetClientReferenceId(v string) {
	o.ClientReferenceId = &v
}

func (o DialCallbackResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialCallbackResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	toSerialize["phoneNumber"] = o.PhoneNumber
	toSerialize["callerId"] = o.CallerId
	if !IsNil(o.Announcements) {
		toSerialize["announcements"] = o.Announcements
	}
	if !IsNil(o.Recording) {
		toSerialize["recording"] = o.Recording
	}
	if !IsNil(o.ClientReferenceId) {
		toSerialize["clientReferenceId"] = o.ClientReferenceId
	}
	return toSerialize, nil
}

type NullableDialCallbackResponse struct {
	value *DialCallbackResponse
	isSet bool
}

func (v NullableDialCallbackResponse) Get() *DialCallbackResponse {
	return v.value
}

func (v *NullableDialCallbackResponse) Set(val *DialCallbackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDialCallbackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDialCallbackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialCallbackResponse(val *DialCallbackResponse) *NullableDialCallbackResponse {
	return &NullableDialCallbackResponse{value: val, isSet: true}
}

func (v NullableDialCallbackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialCallbackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SipTrunkType SIP trunk type.
type SipTrunkType string

// List of SipTrunkType
const (
	SIPTRUNKTYPE_STATIC     SipTrunkType = "STATIC"
	SIPTRUNKTYPE_REGISTERED SipTrunkType = "REGISTERED"
	SIPTRUNKTYPE_PROVIDER   SipTrunkType = "PROVIDER"
)

// All allowed values of SipTrunkType enum
var AllowedSipTrunkTypeEnumValues = []SipTrunkType{
	"STATIC",
	"REGISTERED",
	"PROVIDER",
}

func (v *SipTrunkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SipTrunkType(value)
	for _, existing := range AllowedSipTrunkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SipTrunkType", value)
}

// NewSipTrunkTypeFromValue returns a pointer to a valid SipTrunkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSipTrunkTypeFromValue(v string) (*SipTrunkType, error) {
	ev := SipTrunkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SipTrunkType: valid values are %v", v, AllowedSipTrunkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SipTrunkType) IsValid() bool {
	for _, existing := range AllowedSipTrunkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SipTrunkType value
func (v SipTrunkType) Ptr() *SipTrunkType {
	return &v
}

type NullableSipTrunkType struct {
	value *SipTrunkType
	isSet bool
}

func (v NullableSipTrunkType) Get() *SipTrunkType {
	return v.value
}

func (v *NullableSipTrunkType) Set(val *SipTrunkType) {
	v.value = val
	v.isSet = true
}

func (v NullableSipTrunkType) IsSet() bool {
	return v.isSet
}

func (v *NullableSipTrunkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipTrunkType(val *SipTrunkType) *NullableSipTrunkType {
	return &NullableSipTrunkType{value: val, isSet: true}
}

func (v NullableSipTrunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipTrunkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

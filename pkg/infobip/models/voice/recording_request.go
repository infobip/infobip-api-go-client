/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the RecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingRequest{}

// RecordingRequest struct for RecordingRequest
type RecordingRequest struct {
	RecordingType RecordingType
	// Silence duration, in seconds, before the recording stops. (If this field is set the recording can't be stopped by the [stop recording endpoint](#call-stop-recording).)
	MaxSilence *int32
	// Flag indicating if a beep sound should be played before recording.
	Beep *bool
	// Maximum recording duration in seconds.  (If this field is set the recording can't be stopped by the [stop recording endpoint](#call-stop-recording).)
	MaxDuration *int32
	// Custom data.
	CustomData *map[string]string
	// Custom name for the recording's zip file. Applicable only when SFTP server is enabled on [Voice settings page](https://portal.infobip.com/apps/voice/recording/settings). Using the same `filePrefix` will override the files on the SFTP server.
	FilePrefix *string
}

type _RecordingRequest RecordingRequest

// NewRecordingRequest instantiates a new RecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewRecordingRequest(recordingType RecordingType) *RecordingRequest {
	this := RecordingRequest{}
	this.RecordingType = recordingType
	var beep bool = false
	this.Beep = &beep
	return &this
}

// NewRecordingRequestWithDefaults instantiates a new RecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingRequestWithDefaults() *RecordingRequest {
	this := RecordingRequest{}

	var beep bool = false
	this.Beep = &beep
	return &this
}

// GetRecordingType returns the RecordingType field value
func (o *RecordingRequest) GetRecordingType() RecordingType {
	if o == nil {
		var ret RecordingType
		return ret
	}

	return o.RecordingType
}

// GetRecordingTypeOk returns a tuple with the RecordingType field value
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetRecordingTypeOk() (*RecordingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordingType, true
}

// SetRecordingType sets field value
func (o *RecordingRequest) SetRecordingType(v RecordingType) {
	o.RecordingType = v
}

// GetMaxSilence returns the MaxSilence field value if set, zero value otherwise.
func (o *RecordingRequest) GetMaxSilence() int32 {
	if o == nil || IsNil(o.MaxSilence) {
		var ret int32
		return ret
	}
	return *o.MaxSilence
}

// GetMaxSilenceOk returns a tuple with the MaxSilence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetMaxSilenceOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSilence) {
		return nil, false
	}
	return o.MaxSilence, true
}

// HasMaxSilence returns a boolean if a field has been set.
func (o *RecordingRequest) HasMaxSilence() bool {
	if o != nil && !IsNil(o.MaxSilence) {
		return true
	}

	return false
}

// SetMaxSilence gets a reference to the given int32 and assigns it to the MaxSilence field.
func (o *RecordingRequest) SetMaxSilence(v int32) {
	o.MaxSilence = &v
}

// GetBeep returns the Beep field value if set, zero value otherwise.
func (o *RecordingRequest) GetBeep() bool {
	if o == nil || IsNil(o.Beep) {
		var ret bool
		return ret
	}
	return *o.Beep
}

// GetBeepOk returns a tuple with the Beep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetBeepOk() (*bool, bool) {
	if o == nil || IsNil(o.Beep) {
		return nil, false
	}
	return o.Beep, true
}

// HasBeep returns a boolean if a field has been set.
func (o *RecordingRequest) HasBeep() bool {
	if o != nil && !IsNil(o.Beep) {
		return true
	}

	return false
}

// SetBeep gets a reference to the given bool and assigns it to the Beep field.
func (o *RecordingRequest) SetBeep(v bool) {
	o.Beep = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *RecordingRequest) GetMaxDuration() int32 {
	if o == nil || IsNil(o.MaxDuration) {
		var ret int32
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetMaxDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDuration) {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *RecordingRequest) HasMaxDuration() bool {
	if o != nil && !IsNil(o.MaxDuration) {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given int32 and assigns it to the MaxDuration field.
func (o *RecordingRequest) SetMaxDuration(v int32) {
	o.MaxDuration = &v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *RecordingRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *RecordingRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *RecordingRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

// GetFilePrefix returns the FilePrefix field value if set, zero value otherwise.
func (o *RecordingRequest) GetFilePrefix() string {
	if o == nil || IsNil(o.FilePrefix) {
		var ret string
		return ret
	}
	return *o.FilePrefix
}

// GetFilePrefixOk returns a tuple with the FilePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingRequest) GetFilePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.FilePrefix) {
		return nil, false
	}
	return o.FilePrefix, true
}

// HasFilePrefix returns a boolean if a field has been set.
func (o *RecordingRequest) HasFilePrefix() bool {
	if o != nil && !IsNil(o.FilePrefix) {
		return true
	}

	return false
}

// SetFilePrefix gets a reference to the given string and assigns it to the FilePrefix field.
func (o *RecordingRequest) SetFilePrefix(v string) {
	o.FilePrefix = &v
}

func (o RecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordingType"] = o.RecordingType
	if !IsNil(o.MaxSilence) {
		toSerialize["maxSilence"] = o.MaxSilence
	}
	if !IsNil(o.Beep) {
		toSerialize["beep"] = o.Beep
	}
	if !IsNil(o.MaxDuration) {
		toSerialize["maxDuration"] = o.MaxDuration
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.FilePrefix) {
		toSerialize["filePrefix"] = o.FilePrefix
	}
	return toSerialize, nil
}

type NullableRecordingRequest struct {
	value *RecordingRequest
	isSet bool
}

func (v NullableRecordingRequest) Get() *RecordingRequest {
	return v.value
}

func (v *NullableRecordingRequest) Set(val *RecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingRequest(val *RecordingRequest) *NullableRecordingRequest {
	return &NullableRecordingRequest{value: val, isSet: true}
}

func (v NullableRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

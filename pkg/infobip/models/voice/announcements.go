/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Announcements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Announcements{}

// Announcements Announcements to be played when a call is answered.
type Announcements struct {
	Caller *AnnouncementCaller
	Callee *AnnouncementCallee
}

// NewAnnouncements instantiates a new Announcements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAnnouncements() *Announcements {
	this := Announcements{}
	return &this
}

// NewAnnouncementsWithDefaults instantiates a new Announcements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementsWithDefaults() *Announcements {
	this := Announcements{}

	return &this
}

// GetCaller returns the Caller field value if set, zero value otherwise.
func (o *Announcements) GetCaller() AnnouncementCaller {
	if o == nil || IsNil(o.Caller) {
		var ret AnnouncementCaller
		return ret
	}
	return *o.Caller
}

// GetCallerOk returns a tuple with the Caller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcements) GetCallerOk() (*AnnouncementCaller, bool) {
	if o == nil || IsNil(o.Caller) {
		return nil, false
	}
	return o.Caller, true
}

// HasCaller returns a boolean if a field has been set.
func (o *Announcements) HasCaller() bool {
	if o != nil && !IsNil(o.Caller) {
		return true
	}

	return false
}

// SetCaller gets a reference to the given AnnouncementCaller and assigns it to the Caller field.
func (o *Announcements) SetCaller(v AnnouncementCaller) {
	o.Caller = &v
}

// GetCallee returns the Callee field value if set, zero value otherwise.
func (o *Announcements) GetCallee() AnnouncementCallee {
	if o == nil || IsNil(o.Callee) {
		var ret AnnouncementCallee
		return ret
	}
	return *o.Callee
}

// GetCalleeOk returns a tuple with the Callee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcements) GetCalleeOk() (*AnnouncementCallee, bool) {
	if o == nil || IsNil(o.Callee) {
		return nil, false
	}
	return o.Callee, true
}

// HasCallee returns a boolean if a field has been set.
func (o *Announcements) HasCallee() bool {
	if o != nil && !IsNil(o.Callee) {
		return true
	}

	return false
}

// SetCallee gets a reference to the given AnnouncementCallee and assigns it to the Callee field.
func (o *Announcements) SetCallee(v AnnouncementCallee) {
	o.Callee = &v
}

func (o Announcements) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Announcements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Caller) {
		toSerialize["caller"] = o.Caller
	}
	if !IsNil(o.Callee) {
		toSerialize["callee"] = o.Callee
	}
	return toSerialize, nil
}

type NullableAnnouncements struct {
	value *Announcements
	isSet bool
}

func (v NullableAnnouncements) Get() *Announcements {
	return v.value
}

func (v *NullableAnnouncements) Set(val *Announcements) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncements) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncements(val *Announcements) *NullableAnnouncements {
	return &NullableAnnouncements{value: val, isSet: true}
}

func (v NullableAnnouncements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

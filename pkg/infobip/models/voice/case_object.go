/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CaseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseObject{}

// CaseObject struct for CaseObject
type CaseObject struct {
	// Array of actions to execute if none of the conditions above are met.
	Default []map[string]interface{}
}

type _CaseObject CaseObject

// NewCaseObject instantiates a new CaseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCaseObject(default_ []map[string]interface{}) *CaseObject {
	this := CaseObject{}
	this.Default = default_
	return &this
}

// NewCaseObjectWithDefaults instantiates a new CaseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseObjectWithDefaults() *CaseObject {
	this := CaseObject{}

	return &this
}

// GetDefault returns the Default field value
func (o *CaseObject) GetDefault() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *CaseObject) GetDefaultOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Default, true
}

// SetDefault sets field value
func (o *CaseObject) SetDefault(v []map[string]interface{}) {
	o.Default = v
}

func (o CaseObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__default"] = o.Default
	return toSerialize, nil
}

type NullableCaseObject struct {
	value *CaseObject
	isSet bool
}

func (v NullableCaseObject) Get() *CaseObject {
	return v.value
}

func (v *NullableCaseObject) Set(val *CaseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseObject(val *CaseObject) *NullableCaseObject {
	return &NullableCaseObject{value: val, isSet: true}
}

func (v NullableCaseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SchedulingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulingOptions{}

// SchedulingOptions Scheduling object that allows setting up detailed time windows within which calls can be established. Note that calling time window is set in UTC timezone.
type SchedulingOptions struct {
	// Scheduling start date and time.
	StartTime         *Time
	CallingTimeWindow *DeliveryTimeWindow
}

// NewSchedulingOptions instantiates a new SchedulingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSchedulingOptions() *SchedulingOptions {
	this := SchedulingOptions{}
	return &this
}

// NewSchedulingOptionsWithDefaults instantiates a new SchedulingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingOptionsWithDefaults() *SchedulingOptions {
	this := SchedulingOptions{}

	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SchedulingOptions) GetStartTime() Time {
	if o == nil || IsNil(o.StartTime) {
		var ret Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingOptions) GetStartTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SchedulingOptions) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given Time and assigns it to the StartTime field.
func (o *SchedulingOptions) SetStartTime(v Time) {
	o.StartTime = &v
}

// GetCallingTimeWindow returns the CallingTimeWindow field value if set, zero value otherwise.
func (o *SchedulingOptions) GetCallingTimeWindow() DeliveryTimeWindow {
	if o == nil || IsNil(o.CallingTimeWindow) {
		var ret DeliveryTimeWindow
		return ret
	}
	return *o.CallingTimeWindow
}

// GetCallingTimeWindowOk returns a tuple with the CallingTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingOptions) GetCallingTimeWindowOk() (*DeliveryTimeWindow, bool) {
	if o == nil || IsNil(o.CallingTimeWindow) {
		return nil, false
	}
	return o.CallingTimeWindow, true
}

// HasCallingTimeWindow returns a boolean if a field has been set.
func (o *SchedulingOptions) HasCallingTimeWindow() bool {
	if o != nil && !IsNil(o.CallingTimeWindow) {
		return true
	}

	return false
}

// SetCallingTimeWindow gets a reference to the given DeliveryTimeWindow and assigns it to the CallingTimeWindow field.
func (o *SchedulingOptions) SetCallingTimeWindow(v DeliveryTimeWindow) {
	o.CallingTimeWindow = &v
}

func (o SchedulingOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.CallingTimeWindow) {
		toSerialize["callingTimeWindow"] = o.CallingTimeWindow
	}
	return toSerialize, nil
}

type NullableSchedulingOptions struct {
	value *SchedulingOptions
	isSet bool
}

func (v NullableSchedulingOptions) Get() *SchedulingOptions {
	return v.value
}

func (v *NullableSchedulingOptions) Set(val *SchedulingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulingOptions(val *SchedulingOptions) *NullableSchedulingOptions {
	return &NullableSchedulingOptions{value: val, isSet: true}
}

func (v NullableSchedulingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

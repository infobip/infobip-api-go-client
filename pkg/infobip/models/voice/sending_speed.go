/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SendingSpeed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendingSpeed{}

// SendingSpeed Sending rate defined in number of messages sent per second, minute, hour or day. First message will be sent immediately (or at _sendAt_ time if scheduling is used) and subsequent messages will be sent respecting defined speed. For example, if _sendingSpeed_ is defined as 10 messages per hour, messages will be sent every 6 minutes. If this parameter is defined, _validityPeriod_ is ignored.
type SendingSpeed struct {
	// Defines the number of messages that will be sent per specified time unit.
	Speed *int32
	// Defines time unit used for calculating sending speed.  Possible values: `second`, `minute`, `hour` and `day`.
	TimeUnit *string
}

// NewSendingSpeed instantiates a new SendingSpeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSendingSpeed() *SendingSpeed {
	this := SendingSpeed{}
	return &this
}

// NewSendingSpeedWithDefaults instantiates a new SendingSpeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendingSpeedWithDefaults() *SendingSpeed {
	this := SendingSpeed{}

	return &this
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *SendingSpeed) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed) {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendingSpeed) GetSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *SendingSpeed) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *SendingSpeed) SetSpeed(v int32) {
	o.Speed = &v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *SendingSpeed) GetTimeUnit() string {
	if o == nil || IsNil(o.TimeUnit) {
		var ret string
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendingSpeed) GetTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *SendingSpeed) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given string and assigns it to the TimeUnit field.
func (o *SendingSpeed) SetTimeUnit(v string) {
	o.TimeUnit = &v
}

func (o SendingSpeed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendingSpeed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.TimeUnit) {
		toSerialize["timeUnit"] = o.TimeUnit
	}
	return toSerialize, nil
}

type NullableSendingSpeed struct {
	value *SendingSpeed
	isSet bool
}

func (v NullableSendingSpeed) Get() *SendingSpeed {
	return v.value
}

func (v *NullableSendingSpeed) Set(val *SendingSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableSendingSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableSendingSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendingSpeed(val *SendingSpeed) *NullableSendingSpeed {
	return &NullableSendingSpeed{value: val, isSet: true}
}

func (v NullableSendingSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendingSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the TrackingEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingEventRequest{}

// TrackingEventRequest struct for TrackingEventRequest
type TrackingEventRequest struct {
	// Boolean value corresponding to whether opens for a message needs to be tracked or not.
	Open *bool
	// Boolean value corresponding to whether clicks for a message needs to be tracked or not.
	Clicks *bool
	// Boolean value corresponding to whether unsubscribe for a message needs to be tracked or not.
	Unsubscribe *bool
}

// NewTrackingEventRequest instantiates a new TrackingEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewTrackingEventRequest() *TrackingEventRequest {
	this := TrackingEventRequest{}
	return &this
}

// NewTrackingEventRequestWithDefaults instantiates a new TrackingEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingEventRequestWithDefaults() *TrackingEventRequest {
	this := TrackingEventRequest{}

	return &this
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *TrackingEventRequest) GetOpen() bool {
	if o == nil || IsNil(o.Open) {
		var ret bool
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventRequest) GetOpenOk() (*bool, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *TrackingEventRequest) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given bool and assigns it to the Open field.
func (o *TrackingEventRequest) SetOpen(v bool) {
	o.Open = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *TrackingEventRequest) GetClicks() bool {
	if o == nil || IsNil(o.Clicks) {
		var ret bool
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventRequest) GetClicksOk() (*bool, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *TrackingEventRequest) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given bool and assigns it to the Clicks field.
func (o *TrackingEventRequest) SetClicks(v bool) {
	o.Clicks = &v
}

// GetUnsubscribe returns the Unsubscribe field value if set, zero value otherwise.
func (o *TrackingEventRequest) GetUnsubscribe() bool {
	if o == nil || IsNil(o.Unsubscribe) {
		var ret bool
		return ret
	}
	return *o.Unsubscribe
}

// GetUnsubscribeOk returns a tuple with the Unsubscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventRequest) GetUnsubscribeOk() (*bool, bool) {
	if o == nil || IsNil(o.Unsubscribe) {
		return nil, false
	}
	return o.Unsubscribe, true
}

// HasUnsubscribe returns a boolean if a field has been set.
func (o *TrackingEventRequest) HasUnsubscribe() bool {
	if o != nil && !IsNil(o.Unsubscribe) {
		return true
	}

	return false
}

// SetUnsubscribe gets a reference to the given bool and assigns it to the Unsubscribe field.
func (o *TrackingEventRequest) SetUnsubscribe(v bool) {
	o.Unsubscribe = &v
}

func (o TrackingEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}
	if !IsNil(o.Unsubscribe) {
		toSerialize["unsubscribe"] = o.Unsubscribe
	}
	return toSerialize, nil
}

type NullableTrackingEventRequest struct {
	value *TrackingEventRequest
	isSet bool
}

func (v NullableTrackingEventRequest) Get() *TrackingEventRequest {
	return v.value
}

func (v *NullableTrackingEventRequest) Set(val *TrackingEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingEventRequest(val *TrackingEventRequest) *NullableTrackingEventRequest {
	return &NullableTrackingEventRequest{value: val, isSet: true}
}

func (v NullableTrackingEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

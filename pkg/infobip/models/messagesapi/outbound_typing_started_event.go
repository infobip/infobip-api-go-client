/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the OutboundTypingStartedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutboundTypingStartedEvent{}

// OutboundTypingStartedEvent struct for OutboundTypingStartedEvent
type OutboundTypingStartedEvent struct {
	Event   OutboundEventType
	Channel OutboundEventChannel
	// The sender ID. It can be alphanumeric or numeric (e.g., `CompanyName`). Make sure you don't exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
	Sender string
	// Array of destination objects for where events are being sent. A valid destination is required.
	Destinations []ToDestination
	Options      *EventOptions
}

type _OutboundTypingStartedEvent OutboundTypingStartedEvent

// NewOutboundTypingStartedEvent instantiates a new OutboundTypingStartedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutboundTypingStartedEvent(channel OutboundEventChannel, sender string, destinations []ToDestination) *OutboundTypingStartedEvent {
	this := OutboundTypingStartedEvent{}
	this.Event = "TYPING_STARTED"
	this.Channel = channel
	this.Sender = sender
	this.Destinations = destinations
	return &this
}

// NewOutboundTypingStartedEventWithDefaults instantiates a new OutboundTypingStartedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutboundTypingStartedEventWithDefaults() *OutboundTypingStartedEvent {
	this := OutboundTypingStartedEvent{}
	this.Event = "TYPING_STARTED"
	return &this
}

// GetChannel returns the Channel field value
func (o *OutboundTypingStartedEvent) GetChannel() OutboundEventChannel {
	if o == nil {
		var ret OutboundEventChannel
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStartedEvent) GetChannelOk() (*OutboundEventChannel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *OutboundTypingStartedEvent) SetChannel(v OutboundEventChannel) {
	o.Channel = v
}

// GetSender returns the Sender field value
func (o *OutboundTypingStartedEvent) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStartedEvent) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *OutboundTypingStartedEvent) SetSender(v string) {
	o.Sender = v
}

// GetDestinations returns the Destinations field value
func (o *OutboundTypingStartedEvent) GetDestinations() []ToDestination {
	if o == nil {
		var ret []ToDestination
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStartedEvent) GetDestinationsOk() ([]ToDestination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *OutboundTypingStartedEvent) SetDestinations(v []ToDestination) {
	o.Destinations = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *OutboundTypingStartedEvent) GetOptions() EventOptions {
	if o == nil || IsNil(o.Options) {
		var ret EventOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundTypingStartedEvent) GetOptionsOk() (*EventOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *OutboundTypingStartedEvent) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given EventOptions and assigns it to the Options field.
func (o *OutboundTypingStartedEvent) SetOptions(v EventOptions) {
	o.Options = &v
}

func (o OutboundTypingStartedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutboundTypingStartedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["channel"] = o.Channel
	toSerialize["sender"] = o.Sender
	toSerialize["destinations"] = o.Destinations
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableOutboundTypingStartedEvent struct {
	value *OutboundTypingStartedEvent
	isSet bool
}

func (v NullableOutboundTypingStartedEvent) Get() *OutboundTypingStartedEvent {
	return v.value
}

func (v *NullableOutboundTypingStartedEvent) Set(val *OutboundTypingStartedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundTypingStartedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundTypingStartedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundTypingStartedEvent(val *OutboundTypingStartedEvent) *NullableOutboundTypingStartedEvent {
	return &NullableOutboundTypingStartedEvent{value: val, isSet: true}
}

func (v NullableOutboundTypingStartedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundTypingStartedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// InboundTypingIndicatorChannel Messaging channel used for sending a message.
type InboundTypingIndicatorChannel string

// List of InboundTypingIndicatorChannel
const (
	INBOUNDTYPINGINDICATORCHANNEL_APPLE_MB InboundTypingIndicatorChannel = "APPLE_MB"
)

// All allowed values of InboundTypingIndicatorChannel enum
var AllowedInboundTypingIndicatorChannelEnumValues = []InboundTypingIndicatorChannel{
	"APPLE_MB",
}

func (v *InboundTypingIndicatorChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InboundTypingIndicatorChannel(value)
	for _, existing := range AllowedInboundTypingIndicatorChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InboundTypingIndicatorChannel", value)
}

// NewInboundTypingIndicatorChannelFromValue returns a pointer to a valid InboundTypingIndicatorChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInboundTypingIndicatorChannelFromValue(v string) (*InboundTypingIndicatorChannel, error) {
	ev := InboundTypingIndicatorChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InboundTypingIndicatorChannel: valid values are %v", v, AllowedInboundTypingIndicatorChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InboundTypingIndicatorChannel) IsValid() bool {
	for _, existing := range AllowedInboundTypingIndicatorChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InboundTypingIndicatorChannel value
func (v InboundTypingIndicatorChannel) Ptr() *InboundTypingIndicatorChannel {
	return &v
}

type NullableInboundTypingIndicatorChannel struct {
	value *InboundTypingIndicatorChannel
	isSet bool
}

func (v NullableInboundTypingIndicatorChannel) Get() *InboundTypingIndicatorChannel {
	return v.value
}

func (v *NullableInboundTypingIndicatorChannel) Set(val *InboundTypingIndicatorChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundTypingIndicatorChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundTypingIndicatorChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundTypingIndicatorChannel(val *InboundTypingIndicatorChannel) *NullableInboundTypingIndicatorChannel {
	return &NullableInboundTypingIndicatorChannel{value: val, isSet: true}
}

func (v NullableInboundTypingIndicatorChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundTypingIndicatorChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

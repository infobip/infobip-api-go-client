/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the FormsElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormsElement{}

// FormsElement List of form fields
type FormsElement struct {
	Component               FormsComponentType
	FieldId                 *string
	PersonField             *string
	Label                   *string
	IsRequired              *bool
	IsHidden                *bool
	AdditionalConfiguration *map[string]string
	TextContent             *string
	Options                 []FormsElementOption
	ValidationRules         *FormsValidationRules
	Placeholder             *string
	CheckboxText            *string
	ValidationMessages      *map[string]string
}

type _FormsElement FormsElement

// NewFormsElement instantiates a new FormsElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewFormsElement(component FormsComponentType) *FormsElement {
	this := FormsElement{}
	this.Component = component
	return &this
}

// NewFormsElementWithDefaults instantiates a new FormsElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormsElementWithDefaults() *FormsElement {
	this := FormsElement{}

	return &this
}

// GetComponent returns the Component field value
func (o *FormsElement) GetComponent() FormsComponentType {
	if o == nil {
		var ret FormsComponentType
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *FormsElement) GetComponentOk() (*FormsComponentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *FormsElement) SetComponent(v FormsComponentType) {
	o.Component = v
}

// GetFieldId returns the FieldId field value if set, zero value otherwise.
func (o *FormsElement) GetFieldId() string {
	if o == nil || IsNil(o.FieldId) {
		var ret string
		return ret
	}
	return *o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetFieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.FieldId) {
		return nil, false
	}
	return o.FieldId, true
}

// HasFieldId returns a boolean if a field has been set.
func (o *FormsElement) HasFieldId() bool {
	if o != nil && !IsNil(o.FieldId) {
		return true
	}

	return false
}

// SetFieldId gets a reference to the given string and assigns it to the FieldId field.
func (o *FormsElement) SetFieldId(v string) {
	o.FieldId = &v
}

// GetPersonField returns the PersonField field value if set, zero value otherwise.
func (o *FormsElement) GetPersonField() string {
	if o == nil || IsNil(o.PersonField) {
		var ret string
		return ret
	}
	return *o.PersonField
}

// GetPersonFieldOk returns a tuple with the PersonField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetPersonFieldOk() (*string, bool) {
	if o == nil || IsNil(o.PersonField) {
		return nil, false
	}
	return o.PersonField, true
}

// HasPersonField returns a boolean if a field has been set.
func (o *FormsElement) HasPersonField() bool {
	if o != nil && !IsNil(o.PersonField) {
		return true
	}

	return false
}

// SetPersonField gets a reference to the given string and assigns it to the PersonField field.
func (o *FormsElement) SetPersonField(v string) {
	o.PersonField = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormsElement) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormsElement) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FormsElement) SetLabel(v string) {
	o.Label = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *FormsElement) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *FormsElement) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *FormsElement) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *FormsElement) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *FormsElement) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *FormsElement) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetAdditionalConfiguration returns the AdditionalConfiguration field value if set, zero value otherwise.
func (o *FormsElement) GetAdditionalConfiguration() map[string]string {
	if o == nil || IsNil(o.AdditionalConfiguration) {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalConfiguration
}

// GetAdditionalConfigurationOk returns a tuple with the AdditionalConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetAdditionalConfigurationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AdditionalConfiguration) {
		return nil, false
	}
	return o.AdditionalConfiguration, true
}

// HasAdditionalConfiguration returns a boolean if a field has been set.
func (o *FormsElement) HasAdditionalConfiguration() bool {
	if o != nil && !IsNil(o.AdditionalConfiguration) {
		return true
	}

	return false
}

// SetAdditionalConfiguration gets a reference to the given map[string]string and assigns it to the AdditionalConfiguration field.
func (o *FormsElement) SetAdditionalConfiguration(v map[string]string) {
	o.AdditionalConfiguration = &v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise.
func (o *FormsElement) GetTextContent() string {
	if o == nil || IsNil(o.TextContent) {
		var ret string
		return ret
	}
	return *o.TextContent
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetTextContentOk() (*string, bool) {
	if o == nil || IsNil(o.TextContent) {
		return nil, false
	}
	return o.TextContent, true
}

// HasTextContent returns a boolean if a field has been set.
func (o *FormsElement) HasTextContent() bool {
	if o != nil && !IsNil(o.TextContent) {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given string and assigns it to the TextContent field.
func (o *FormsElement) SetTextContent(v string) {
	o.TextContent = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FormsElement) GetOptions() []FormsElementOption {
	if o == nil || IsNil(o.Options) {
		var ret []FormsElementOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetOptionsOk() ([]FormsElementOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FormsElement) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []FormsElementOption and assigns it to the Options field.
func (o *FormsElement) SetOptions(v []FormsElementOption) {
	o.Options = v
}

// GetValidationRules returns the ValidationRules field value if set, zero value otherwise.
func (o *FormsElement) GetValidationRules() FormsValidationRules {
	if o == nil || IsNil(o.ValidationRules) {
		var ret FormsValidationRules
		return ret
	}
	return *o.ValidationRules
}

// GetValidationRulesOk returns a tuple with the ValidationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetValidationRulesOk() (*FormsValidationRules, bool) {
	if o == nil || IsNil(o.ValidationRules) {
		return nil, false
	}
	return o.ValidationRules, true
}

// HasValidationRules returns a boolean if a field has been set.
func (o *FormsElement) HasValidationRules() bool {
	if o != nil && !IsNil(o.ValidationRules) {
		return true
	}

	return false
}

// SetValidationRules gets a reference to the given FormsValidationRules and assigns it to the ValidationRules field.
func (o *FormsElement) SetValidationRules(v FormsValidationRules) {
	o.ValidationRules = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *FormsElement) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *FormsElement) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *FormsElement) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetCheckboxText returns the CheckboxText field value if set, zero value otherwise.
func (o *FormsElement) GetCheckboxText() string {
	if o == nil || IsNil(o.CheckboxText) {
		var ret string
		return ret
	}
	return *o.CheckboxText
}

// GetCheckboxTextOk returns a tuple with the CheckboxText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetCheckboxTextOk() (*string, bool) {
	if o == nil || IsNil(o.CheckboxText) {
		return nil, false
	}
	return o.CheckboxText, true
}

// HasCheckboxText returns a boolean if a field has been set.
func (o *FormsElement) HasCheckboxText() bool {
	if o != nil && !IsNil(o.CheckboxText) {
		return true
	}

	return false
}

// SetCheckboxText gets a reference to the given string and assigns it to the CheckboxText field.
func (o *FormsElement) SetCheckboxText(v string) {
	o.CheckboxText = &v
}

// GetValidationMessages returns the ValidationMessages field value if set, zero value otherwise.
func (o *FormsElement) GetValidationMessages() map[string]string {
	if o == nil || IsNil(o.ValidationMessages) {
		var ret map[string]string
		return ret
	}
	return *o.ValidationMessages
}

// GetValidationMessagesOk returns a tuple with the ValidationMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormsElement) GetValidationMessagesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ValidationMessages) {
		return nil, false
	}
	return o.ValidationMessages, true
}

// HasValidationMessages returns a boolean if a field has been set.
func (o *FormsElement) HasValidationMessages() bool {
	if o != nil && !IsNil(o.ValidationMessages) {
		return true
	}

	return false
}

// SetValidationMessages gets a reference to the given map[string]string and assigns it to the ValidationMessages field.
func (o *FormsElement) SetValidationMessages(v map[string]string) {
	o.ValidationMessages = &v
}

func (o FormsElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormsElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component"] = o.Component
	if !IsNil(o.FieldId) {
		toSerialize["fieldId"] = o.FieldId
	}
	if !IsNil(o.PersonField) {
		toSerialize["personField"] = o.PersonField
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.IsRequired) {
		toSerialize["isRequired"] = o.IsRequired
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.AdditionalConfiguration) {
		toSerialize["additionalConfiguration"] = o.AdditionalConfiguration
	}
	if !IsNil(o.TextContent) {
		toSerialize["textContent"] = o.TextContent
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ValidationRules) {
		toSerialize["validationRules"] = o.ValidationRules
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	if !IsNil(o.CheckboxText) {
		toSerialize["checkboxText"] = o.CheckboxText
	}
	if !IsNil(o.ValidationMessages) {
		toSerialize["validationMessages"] = o.ValidationMessages
	}
	return toSerialize, nil
}

type NullableFormsElement struct {
	value *FormsElement
	isSet bool
}

func (v NullableFormsElement) Get() *FormsElement {
	return v.value
}

func (v *NullableFormsElement) Set(val *FormsElement) {
	v.value = val
	v.isSet = true
}

func (v NullableFormsElement) IsSet() bool {
	return v.isSet
}

func (v *NullableFormsElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormsElement(val *FormsElement) *NullableFormsElement {
	return &NullableFormsElement{value: val, isSet: true}
}

func (v NullableFormsElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormsElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the OutboundTypingStoppedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutboundTypingStoppedEvent{}

// OutboundTypingStoppedEvent struct for OutboundTypingStoppedEvent
type OutboundTypingStoppedEvent struct {
	Event   OutboundEventType
	Channel OutboundEventChannel
	// The sender ID. It can be alphanumeric or numeric (e.g., `CompanyName`). Make sure you don't exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
	Sender string
	// Array of destination objects for where events are being sent. A valid destination is required.
	Destinations []ToDestination
	Options      *EventOptions
}

type _OutboundTypingStoppedEvent OutboundTypingStoppedEvent

// NewOutboundTypingStoppedEvent instantiates a new OutboundTypingStoppedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutboundTypingStoppedEvent(channel OutboundEventChannel, sender string, destinations []ToDestination) *OutboundTypingStoppedEvent {
	this := OutboundTypingStoppedEvent{}
	this.Event = OUTBOUNDEVENTTYPE_STOPPED
	this.Channel = channel
	this.Sender = sender
	this.Destinations = destinations
	return &this
}

// NewOutboundTypingStoppedEventWithDefaults instantiates a new OutboundTypingStoppedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutboundTypingStoppedEventWithDefaults() *OutboundTypingStoppedEvent {
	this := OutboundTypingStoppedEvent{}
	return &this
}

// GetChannel returns the Channel field value
func (o *OutboundTypingStoppedEvent) GetChannel() OutboundEventChannel {
	if o == nil {
		var ret OutboundEventChannel
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStoppedEvent) GetChannelOk() (*OutboundEventChannel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *OutboundTypingStoppedEvent) SetChannel(v OutboundEventChannel) {
	o.Channel = v
}

// GetSender returns the Sender field value
func (o *OutboundTypingStoppedEvent) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStoppedEvent) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *OutboundTypingStoppedEvent) SetSender(v string) {
	o.Sender = v
}

// GetDestinations returns the Destinations field value
func (o *OutboundTypingStoppedEvent) GetDestinations() []ToDestination {
	if o == nil {
		var ret []ToDestination
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *OutboundTypingStoppedEvent) GetDestinationsOk() ([]ToDestination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *OutboundTypingStoppedEvent) SetDestinations(v []ToDestination) {
	o.Destinations = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *OutboundTypingStoppedEvent) GetOptions() EventOptions {
	if o == nil || IsNil(o.Options) {
		var ret EventOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundTypingStoppedEvent) GetOptionsOk() (*EventOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *OutboundTypingStoppedEvent) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given EventOptions and assigns it to the Options field.
func (o *OutboundTypingStoppedEvent) SetOptions(v EventOptions) {
	o.Options = &v
}

func (o OutboundTypingStoppedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutboundTypingStoppedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["channel"] = o.Channel
	toSerialize["sender"] = o.Sender
	toSerialize["destinations"] = o.Destinations
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableOutboundTypingStoppedEvent struct {
	value *OutboundTypingStoppedEvent
	isSet bool
}

func (v NullableOutboundTypingStoppedEvent) Get() *OutboundTypingStoppedEvent {
	return v.value
}

func (v *NullableOutboundTypingStoppedEvent) Set(val *OutboundTypingStoppedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundTypingStoppedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundTypingStoppedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundTypingStoppedEvent(val *OutboundTypingStoppedEvent) *NullableOutboundTypingStoppedEvent {
	return &NullableOutboundTypingStoppedEvent{value: val, isSet: true}
}

func (v NullableOutboundTypingStoppedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundTypingStoppedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

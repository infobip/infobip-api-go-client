/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// InboundSeenChannel Messaging channel used for sending an event.
type InboundSeenChannel string

// List of InboundSeenChannel
const (
	INBOUNDSEENCHANNEL_WHATSAPP  InboundSeenChannel = "WHATSAPP"
	INBOUNDSEENCHANNEL_VIBER_BM  InboundSeenChannel = "VIBER_BM"
	INBOUNDSEENCHANNEL_VIBER_BOT InboundSeenChannel = "VIBER_BOT"
	INBOUNDSEENCHANNEL_RCS       InboundSeenChannel = "RCS"
)

// All allowed values of InboundSeenChannel enum
var AllowedInboundSeenChannelEnumValues = []InboundSeenChannel{
	"WHATSAPP",
	"VIBER_BM",
	"VIBER_BOT",
	"RCS",
}

func (v *InboundSeenChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InboundSeenChannel(value)
	for _, existing := range AllowedInboundSeenChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InboundSeenChannel", value)
}

// NewInboundSeenChannelFromValue returns a pointer to a valid InboundSeenChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInboundSeenChannelFromValue(v string) (*InboundSeenChannel, error) {
	ev := InboundSeenChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InboundSeenChannel: valid values are %v", v, AllowedInboundSeenChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InboundSeenChannel) IsValid() bool {
	for _, existing := range AllowedInboundSeenChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InboundSeenChannel value
func (v InboundSeenChannel) Ptr() *InboundSeenChannel {
	return &v
}

type NullableInboundSeenChannel struct {
	value *InboundSeenChannel
	isSet bool
}

func (v NullableInboundSeenChannel) Get() *InboundSeenChannel {
	return v.value
}

func (v *NullableInboundSeenChannel) Set(val *InboundSeenChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundSeenChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundSeenChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundSeenChannel(val *InboundSeenChannel) *NullableInboundSeenChannel {
	return &NullableInboundSeenChannel{value: val, isSet: true}
}

func (v NullableInboundSeenChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundSeenChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

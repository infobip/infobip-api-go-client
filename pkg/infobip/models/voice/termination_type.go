/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// TerminationType the model 'TerminationType'
type TerminationType string

// List of TerminationType
const (
	TERMINATIONTYPE_DTMF TerminationType = "DTMF"
)

// All allowed values of TerminationType enum
var AllowedTerminationTypeEnumValues = []TerminationType{
	"DTMF",
}

func (v *TerminationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TerminationType(value)
	for _, existing := range AllowedTerminationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TerminationType", value)
}

// NewTerminationTypeFromValue returns a pointer to a valid TerminationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTerminationTypeFromValue(v string) (*TerminationType, error) {
	ev := TerminationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TerminationType: valid values are %v", v, AllowedTerminationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TerminationType) IsValid() bool {
	for _, existing := range AllowedTerminationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TerminationType value
func (v TerminationType) Ptr() *TerminationType {
	return &v
}

type NullableTerminationType struct {
	value *TerminationType
	isSet bool
}

func (v NullableTerminationType) Get() *TerminationType {
	return v.value
}

func (v *NullableTerminationType) Set(val *TerminationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminationType(val *TerminationType) *NullableTerminationType {
	return &NullableTerminationType{value: val, isSet: true}
}

func (v NullableTerminationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// IpCoreGeneralStatus the model 'IpCoreGeneralStatus'
type IpCoreGeneralStatus string

// List of IpCoreGeneralStatus
const (
	IPCOREGENERALSTATUS_ACCEPTED      IpCoreGeneralStatus = "ACCEPTED"
	IPCOREGENERALSTATUS_PENDING       IpCoreGeneralStatus = "PENDING"
	IPCOREGENERALSTATUS_UNDELIVERABLE IpCoreGeneralStatus = "UNDELIVERABLE"
	IPCOREGENERALSTATUS_DELIVERED     IpCoreGeneralStatus = "DELIVERED"
	IPCOREGENERALSTATUS_EXPIRED       IpCoreGeneralStatus = "EXPIRED"
	IPCOREGENERALSTATUS_REJECTED      IpCoreGeneralStatus = "REJECTED"
)

// All allowed values of IpCoreGeneralStatus enum
var AllowedIpCoreGeneralStatusEnumValues = []IpCoreGeneralStatus{
	"ACCEPTED",
	"PENDING",
	"UNDELIVERABLE",
	"DELIVERED",
	"EXPIRED",
	"REJECTED",
}

func (v *IpCoreGeneralStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpCoreGeneralStatus(value)
	for _, existing := range AllowedIpCoreGeneralStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpCoreGeneralStatus", value)
}

// NewIpCoreGeneralStatusFromValue returns a pointer to a valid IpCoreGeneralStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpCoreGeneralStatusFromValue(v string) (*IpCoreGeneralStatus, error) {
	ev := IpCoreGeneralStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpCoreGeneralStatus: valid values are %v", v, AllowedIpCoreGeneralStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpCoreGeneralStatus) IsValid() bool {
	for _, existing := range AllowedIpCoreGeneralStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IpCoreGeneralStatus value
func (v IpCoreGeneralStatus) Ptr() *IpCoreGeneralStatus {
	return &v
}

type NullableIpCoreGeneralStatus struct {
	value *IpCoreGeneralStatus
	isSet bool
}

func (v NullableIpCoreGeneralStatus) Get() *IpCoreGeneralStatus {
	return v.value
}

func (v *NullableIpCoreGeneralStatus) Set(val *IpCoreGeneralStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIpCoreGeneralStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIpCoreGeneralStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpCoreGeneralStatus(val *IpCoreGeneralStatus) *NullableIpCoreGeneralStatus {
	return &NullableIpCoreGeneralStatus{value: val, isSet: true}
}

func (v NullableIpCoreGeneralStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpCoreGeneralStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

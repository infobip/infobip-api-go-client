/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the PlayFromRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayFromRecording{}

// PlayFromRecording Play from Recording Action plays audio recorded from the current or some other call.
type PlayFromRecording struct {
	// Can be null (play last recorded audio from the current call), number (play the recording passed index) or text (play recording with identifier - current or previous call)
	PlayFromRecording string
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _PlayFromRecording PlayFromRecording

// NewPlayFromRecording instantiates a new PlayFromRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPlayFromRecording(playFromRecording string) *PlayFromRecording {
	this := PlayFromRecording{}
	this.PlayFromRecording = playFromRecording
	return &this
}

// NewPlayFromRecordingWithDefaults instantiates a new PlayFromRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayFromRecordingWithDefaults() *PlayFromRecording {
	this := PlayFromRecording{}

	return &this
}

// GetPlayFromRecording returns the PlayFromRecording field value
func (o *PlayFromRecording) GetPlayFromRecording() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayFromRecording
}

// GetPlayFromRecordingOk returns a tuple with the PlayFromRecording field value
// and a boolean to check if the value has been set.
func (o *PlayFromRecording) GetPlayFromRecordingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayFromRecording, true
}

// SetPlayFromRecording sets field value
func (o *PlayFromRecording) SetPlayFromRecording(v string) {
	o.PlayFromRecording = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *PlayFromRecording) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayFromRecording) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *PlayFromRecording) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *PlayFromRecording) SetActionId(v int32) {
	o.ActionId = &v
}

func (o PlayFromRecording) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayFromRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["playFromRecording"] = o.PlayFromRecording
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullablePlayFromRecording struct {
	value *PlayFromRecording
	isSet bool
}

func (v NullablePlayFromRecording) Get() *PlayFromRecording {
	return v.value
}

func (v *NullablePlayFromRecording) Set(val *PlayFromRecording) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayFromRecording) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayFromRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayFromRecording(val *PlayFromRecording) *NullablePlayFromRecording {
	return &NullablePlayFromRecording{value: val, isSet: true}
}

func (v NullablePlayFromRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayFromRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

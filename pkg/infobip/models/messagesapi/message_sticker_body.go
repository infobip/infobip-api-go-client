/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MessageStickerBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageStickerBody{}

// MessageStickerBody struct for MessageStickerBody
type MessageStickerBody struct {
	Type MessageBodyType
	// Unique reference to the sticker. It can be URL or identifier. If it is URL, resource should be of WebP type.
	Reference string
}

type _MessageStickerBody MessageStickerBody

// NewMessageStickerBody instantiates a new MessageStickerBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageStickerBody(reference string) *MessageStickerBody {
	this := MessageStickerBody{}
	this.Type = "STICKER"
	this.Reference = reference
	return &this
}

// NewMessageStickerBodyWithDefaults instantiates a new MessageStickerBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageStickerBodyWithDefaults() *MessageStickerBody {
	this := MessageStickerBody{}
	this.Type = "STICKER"
	return &this
}

// GetReference returns the Reference field value
func (o *MessageStickerBody) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *MessageStickerBody) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *MessageStickerBody) SetReference(v string) {
	o.Reference = v
}

func (o MessageStickerBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageStickerBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["reference"] = o.Reference
	return toSerialize, nil
}

type NullableMessageStickerBody struct {
	value *MessageStickerBody
	isSet bool
}

func (v NullableMessageStickerBody) Get() *MessageStickerBody {
	return v.value
}

func (v *NullableMessageStickerBody) Set(val *MessageStickerBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStickerBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStickerBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStickerBody(val *MessageStickerBody) *NullableMessageStickerBody {
	return &NullableMessageStickerBody{value: val, isSet: true}
}

func (v NullableMessageStickerBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStickerBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

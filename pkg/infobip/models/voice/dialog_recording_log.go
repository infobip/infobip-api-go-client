/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialogRecordingLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialogRecordingLog{}

// DialogRecordingLog Dialog recordings.
type DialogRecordingLog struct {
	// File(s) with a recording of both dialog calls.
	ComposedFiles []RecordingFile
	// File(s) with a recording of individual dialog calls.
	CallRecordings []Recording
}

// NewDialogRecordingLog instantiates a new DialogRecordingLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialogRecordingLog() *DialogRecordingLog {
	this := DialogRecordingLog{}
	return &this
}

// NewDialogRecordingLogWithDefaults instantiates a new DialogRecordingLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialogRecordingLogWithDefaults() *DialogRecordingLog {
	this := DialogRecordingLog{}

	return &this
}

// GetComposedFiles returns the ComposedFiles field value if set, zero value otherwise.
func (o *DialogRecordingLog) GetComposedFiles() []RecordingFile {
	if o == nil || IsNil(o.ComposedFiles) {
		var ret []RecordingFile
		return ret
	}
	return o.ComposedFiles
}

// GetComposedFilesOk returns a tuple with the ComposedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingLog) GetComposedFilesOk() ([]RecordingFile, bool) {
	if o == nil || IsNil(o.ComposedFiles) {
		return nil, false
	}
	return o.ComposedFiles, true
}

// HasComposedFiles returns a boolean if a field has been set.
func (o *DialogRecordingLog) HasComposedFiles() bool {
	if o != nil && !IsNil(o.ComposedFiles) {
		return true
	}

	return false
}

// SetComposedFiles gets a reference to the given []RecordingFile and assigns it to the ComposedFiles field.
func (o *DialogRecordingLog) SetComposedFiles(v []RecordingFile) {
	o.ComposedFiles = v
}

// GetCallRecordings returns the CallRecordings field value if set, zero value otherwise.
func (o *DialogRecordingLog) GetCallRecordings() []Recording {
	if o == nil || IsNil(o.CallRecordings) {
		var ret []Recording
		return ret
	}
	return o.CallRecordings
}

// GetCallRecordingsOk returns a tuple with the CallRecordings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingLog) GetCallRecordingsOk() ([]Recording, bool) {
	if o == nil || IsNil(o.CallRecordings) {
		return nil, false
	}
	return o.CallRecordings, true
}

// HasCallRecordings returns a boolean if a field has been set.
func (o *DialogRecordingLog) HasCallRecordings() bool {
	if o != nil && !IsNil(o.CallRecordings) {
		return true
	}

	return false
}

// SetCallRecordings gets a reference to the given []Recording and assigns it to the CallRecordings field.
func (o *DialogRecordingLog) SetCallRecordings(v []Recording) {
	o.CallRecordings = v
}

func (o DialogRecordingLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialogRecordingLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComposedFiles) {
		toSerialize["composedFiles"] = o.ComposedFiles
	}
	if !IsNil(o.CallRecordings) {
		toSerialize["callRecordings"] = o.CallRecordings
	}
	return toSerialize, nil
}

type NullableDialogRecordingLog struct {
	value *DialogRecordingLog
	isSet bool
}

func (v NullableDialogRecordingLog) Get() *DialogRecordingLog {
	return v.value
}

func (v *NullableDialogRecordingLog) Set(val *DialogRecordingLog) {
	v.value = val
	v.isSet = true
}

func (v NullableDialogRecordingLog) IsSet() bool {
	return v.isSet
}

func (v *NullableDialogRecordingLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialogRecordingLog(val *DialogRecordingLog) *NullableDialogRecordingLog {
	return &NullableDialogRecordingLog{value: val, isSet: true}
}

func (v NullableDialogRecordingLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialogRecordingLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

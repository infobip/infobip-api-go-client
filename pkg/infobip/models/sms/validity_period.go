/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ValidityPeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidityPeriod{}

// ValidityPeriod Message validity period. Once expired, the message won't be sent. Validity period longer than 48h is not supported. If exceeded, it will be automatically set to 48h.
type ValidityPeriod struct {
	// Message validity period's value. If `timeUnit` is not set, it will default to `MINUTES`.
	Amount   int32
	TimeUnit *ValidityPeriodTimeUnit
}

type _ValidityPeriod ValidityPeriod

// NewValidityPeriod instantiates a new ValidityPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidityPeriod(amount int32) *ValidityPeriod {
	this := ValidityPeriod{}
	this.Amount = amount
	var timeUnit ValidityPeriodTimeUnit = VALIDITYPERIODTIMEUNIT_MINUTES
	this.TimeUnit = &timeUnit
	return &this
}

// NewValidityPeriodWithDefaults instantiates a new ValidityPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidityPeriodWithDefaults() *ValidityPeriod {
	this := ValidityPeriod{}
	var timeUnit ValidityPeriodTimeUnit = VALIDITYPERIODTIMEUNIT_MINUTES
	this.TimeUnit = &timeUnit
	return &this
}

// GetAmount returns the Amount field value
func (o *ValidityPeriod) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ValidityPeriod) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ValidityPeriod) SetAmount(v int32) {
	o.Amount = v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *ValidityPeriod) GetTimeUnit() ValidityPeriodTimeUnit {
	if o == nil || IsNil(o.TimeUnit) {
		var ret ValidityPeriodTimeUnit
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidityPeriod) GetTimeUnitOk() (*ValidityPeriodTimeUnit, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *ValidityPeriod) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given ValidityPeriodTimeUnit and assigns it to the TimeUnit field.
func (o *ValidityPeriod) SetTimeUnit(v ValidityPeriodTimeUnit) {
	o.TimeUnit = &v
}

func (o ValidityPeriod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidityPeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.TimeUnit) {
		toSerialize["timeUnit"] = o.TimeUnit
	}
	return toSerialize, nil
}

type NullableValidityPeriod struct {
	value *ValidityPeriod
	isSet bool
}

func (v NullableValidityPeriod) Get() *ValidityPeriod {
	return v.value
}

func (v *NullableValidityPeriod) Set(val *ValidityPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableValidityPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableValidityPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidityPeriod(val *ValidityPeriod) *NullableValidityPeriod {
	return &NullableValidityPeriod{value: val, isSet: true}
}

func (v NullableValidityPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidityPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

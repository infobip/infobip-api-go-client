/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the WhileDo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WhileDo{}

// WhileDo While-Do action executes the do field block of code as long as a specified condition is true in the while field. As with Repeat-While, comparison is done using equal (==) or not equal (! =) operators. Make sure not to provide a condition that causes an infinite loop.
type WhileDo struct {
	// The expression to evaluate.
	While string
	// Array of actions to execute if none of the conditions above are met.
	Do []map[string]interface{}
}

type _WhileDo WhileDo

// NewWhileDo instantiates a new WhileDo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewWhileDo(while string, do []map[string]interface{}) *WhileDo {
	this := WhileDo{}
	this.While = while
	this.Do = do
	return &this
}

// NewWhileDoWithDefaults instantiates a new WhileDo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhileDoWithDefaults() *WhileDo {
	this := WhileDo{}

	return &this
}

// GetWhile returns the While field value
func (o *WhileDo) GetWhile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.While
}

// GetWhileOk returns a tuple with the While field value
// and a boolean to check if the value has been set.
func (o *WhileDo) GetWhileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.While, true
}

// SetWhile sets field value
func (o *WhileDo) SetWhile(v string) {
	o.While = v
}

// GetDo returns the Do field value
func (o *WhileDo) GetDo() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Do
}

// GetDoOk returns a tuple with the Do field value
// and a boolean to check if the value has been set.
func (o *WhileDo) GetDoOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Do, true
}

// SetDo sets field value
func (o *WhileDo) SetDo(v []map[string]interface{}) {
	o.Do = v
}

func (o WhileDo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WhileDo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["while"] = o.While
	toSerialize["do"] = o.Do
	return toSerialize, nil
}

type NullableWhileDo struct {
	value *WhileDo
	isSet bool
}

func (v NullableWhileDo) Get() *WhileDo {
	return v.value
}

func (v *NullableWhileDo) Set(val *WhileDo) {
	v.value = val
	v.isSet = true
}

func (v NullableWhileDo) IsSet() bool {
	return v.isSet
}

func (v *NullableWhileDo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhileDo(val *WhileDo) *NullableWhileDo {
	return &NullableWhileDo{value: val, isSet: true}
}

func (v NullableWhileDo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhileDo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

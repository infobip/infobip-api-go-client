/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the AnnouncementCallee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementCallee{}

// AnnouncementCallee Announcement to be played to a callee before connecting them to a caller.
type AnnouncementCallee struct {
	// ID of an audio file played to a callee. Required if `fileUrl` is not provided.
	FileId *string
	// URL of an audio file played to a callee. Required if `fileId` is not provided.
	FileUrl *string
}

// NewAnnouncementCallee instantiates a new AnnouncementCallee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAnnouncementCallee() *AnnouncementCallee {
	this := AnnouncementCallee{}
	return &this
}

// NewAnnouncementCalleeWithDefaults instantiates a new AnnouncementCallee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementCalleeWithDefaults() *AnnouncementCallee {
	this := AnnouncementCallee{}

	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *AnnouncementCallee) GetFileId() string {
	if o == nil || IsNil(o.FileId) {
		var ret string
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCallee) GetFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *AnnouncementCallee) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given string and assigns it to the FileId field.
func (o *AnnouncementCallee) SetFileId(v string) {
	o.FileId = &v
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise.
func (o *AnnouncementCallee) GetFileUrl() string {
	if o == nil || IsNil(o.FileUrl) {
		var ret string
		return ret
	}
	return *o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCallee) GetFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FileUrl) {
		return nil, false
	}
	return o.FileUrl, true
}

// HasFileUrl returns a boolean if a field has been set.
func (o *AnnouncementCallee) HasFileUrl() bool {
	if o != nil && !IsNil(o.FileUrl) {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given string and assigns it to the FileUrl field.
func (o *AnnouncementCallee) SetFileUrl(v string) {
	o.FileUrl = &v
}

func (o AnnouncementCallee) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementCallee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileId) {
		toSerialize["fileId"] = o.FileId
	}
	if !IsNil(o.FileUrl) {
		toSerialize["fileUrl"] = o.FileUrl
	}
	return toSerialize, nil
}

type NullableAnnouncementCallee struct {
	value *AnnouncementCallee
	isSet bool
}

func (v NullableAnnouncementCallee) Get() *AnnouncementCallee {
	return v.value
}

func (v *NullableAnnouncementCallee) Set(val *AnnouncementCallee) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementCallee) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementCallee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementCallee(val *AnnouncementCallee) *NullableAnnouncementCallee {
	return &NullableAnnouncementCallee{value: val, isSet: true}
}

func (v NullableAnnouncementCallee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementCallee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DtmfTermination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtmfTermination{}

// DtmfTermination struct for DtmfTermination
type DtmfTermination struct {
	Type TerminationType
	// Digits used to end the audio playback. If no digits are set, any DTMF digit will end the audio playback. After first DTMF digit is pressed, playback will stop and pressed digit will be present in `PLAY_FINISHED` or `SAY_FINISHED` event.  If terminator is set to `123`, pressing either `1`, `2` or `3` will terminate the playback.
	Terminator *string
}

// NewDtmfTermination instantiates a new DtmfTermination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtmfTermination() *DtmfTermination {
	this := DtmfTermination{}
	this.Type = "DTMF"
	return &this
}

// NewDtmfTerminationWithDefaults instantiates a new DtmfTermination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtmfTerminationWithDefaults() *DtmfTermination {
	this := DtmfTermination{}
	this.Type = "DTMF"
	return &this
}

// GetTerminator returns the Terminator field value if set, zero value otherwise.
func (o *DtmfTermination) GetTerminator() string {
	if o == nil || IsNil(o.Terminator) {
		var ret string
		return ret
	}
	return *o.Terminator
}

// GetTerminatorOk returns a tuple with the Terminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfTermination) GetTerminatorOk() (*string, bool) {
	if o == nil || IsNil(o.Terminator) {
		return nil, false
	}
	return o.Terminator, true
}

// HasTerminator returns a boolean if a field has been set.
func (o *DtmfTermination) HasTerminator() bool {
	if o != nil && !IsNil(o.Terminator) {
		return true
	}

	return false
}

// SetTerminator gets a reference to the given string and assigns it to the Terminator field.
func (o *DtmfTermination) SetTerminator(v string) {
	o.Terminator = &v
}

func (o DtmfTermination) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtmfTermination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Terminator) {
		toSerialize["terminator"] = o.Terminator
	}
	return toSerialize, nil
}

type NullableDtmfTermination struct {
	value *DtmfTermination
	isSet bool
}

func (v NullableDtmfTermination) Get() *DtmfTermination {
	return v.value
}

func (v *NullableDtmfTermination) Set(val *DtmfTermination) {
	v.value = val
	v.isSet = true
}

func (v NullableDtmfTermination) IsSet() bool {
	return v.isSet
}

func (v *NullableDtmfTermination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtmfTermination(val *DtmfTermination) *NullableDtmfTermination {
	return &NullableDtmfTermination{value: val, isSet: true}
}

func (v NullableDtmfTermination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtmfTermination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Preview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Preview{}

// Preview Allows for previewing the original message content once additional language configuration has been applied to it.
type Preview struct {
	// Preview of the message content as it should appear on the recipientâ€™s device.
	TextPreview *string
	// Number of SMS message parts required to deliver the message.
	MessageCount *int32
	// Number of remaining characters in the last part of the SMS.
	CharactersRemaining *int32
	Configuration       *LanguageConfiguration
}

// NewPreview instantiates a new Preview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPreview() *Preview {
	this := Preview{}
	return &this
}

// NewPreviewWithDefaults instantiates a new Preview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewWithDefaults() *Preview {
	this := Preview{}

	return &this
}

// GetTextPreview returns the TextPreview field value if set, zero value otherwise.
func (o *Preview) GetTextPreview() string {
	if o == nil || IsNil(o.TextPreview) {
		var ret string
		return ret
	}
	return *o.TextPreview
}

// GetTextPreviewOk returns a tuple with the TextPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preview) GetTextPreviewOk() (*string, bool) {
	if o == nil || IsNil(o.TextPreview) {
		return nil, false
	}
	return o.TextPreview, true
}

// HasTextPreview returns a boolean if a field has been set.
func (o *Preview) HasTextPreview() bool {
	if o != nil && !IsNil(o.TextPreview) {
		return true
	}

	return false
}

// SetTextPreview gets a reference to the given string and assigns it to the TextPreview field.
func (o *Preview) SetTextPreview(v string) {
	o.TextPreview = &v
}

// GetMessageCount returns the MessageCount field value if set, zero value otherwise.
func (o *Preview) GetMessageCount() int32 {
	if o == nil || IsNil(o.MessageCount) {
		var ret int32
		return ret
	}
	return *o.MessageCount
}

// GetMessageCountOk returns a tuple with the MessageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preview) GetMessageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageCount) {
		return nil, false
	}
	return o.MessageCount, true
}

// HasMessageCount returns a boolean if a field has been set.
func (o *Preview) HasMessageCount() bool {
	if o != nil && !IsNil(o.MessageCount) {
		return true
	}

	return false
}

// SetMessageCount gets a reference to the given int32 and assigns it to the MessageCount field.
func (o *Preview) SetMessageCount(v int32) {
	o.MessageCount = &v
}

// GetCharactersRemaining returns the CharactersRemaining field value if set, zero value otherwise.
func (o *Preview) GetCharactersRemaining() int32 {
	if o == nil || IsNil(o.CharactersRemaining) {
		var ret int32
		return ret
	}
	return *o.CharactersRemaining
}

// GetCharactersRemainingOk returns a tuple with the CharactersRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preview) GetCharactersRemainingOk() (*int32, bool) {
	if o == nil || IsNil(o.CharactersRemaining) {
		return nil, false
	}
	return o.CharactersRemaining, true
}

// HasCharactersRemaining returns a boolean if a field has been set.
func (o *Preview) HasCharactersRemaining() bool {
	if o != nil && !IsNil(o.CharactersRemaining) {
		return true
	}

	return false
}

// SetCharactersRemaining gets a reference to the given int32 and assigns it to the CharactersRemaining field.
func (o *Preview) SetCharactersRemaining(v int32) {
	o.CharactersRemaining = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *Preview) GetConfiguration() LanguageConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret LanguageConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preview) GetConfigurationOk() (*LanguageConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *Preview) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given LanguageConfiguration and assigns it to the Configuration field.
func (o *Preview) SetConfiguration(v LanguageConfiguration) {
	o.Configuration = &v
}

func (o Preview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Preview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TextPreview) {
		toSerialize["textPreview"] = o.TextPreview
	}
	if !IsNil(o.MessageCount) {
		toSerialize["messageCount"] = o.MessageCount
	}
	if !IsNil(o.CharactersRemaining) {
		toSerialize["charactersRemaining"] = o.CharactersRemaining
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullablePreview struct {
	value *Preview
	isSet bool
}

func (v NullablePreview) Get() *Preview {
	return v.value
}

func (v *NullablePreview) Set(val *Preview) {
	v.value = val
	v.isSet = true
}

func (v NullablePreview) IsSet() bool {
	return v.isSet
}

func (v *NullablePreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreview(val *Preview) *NullablePreview {
	return &NullablePreview{value: val, isSet: true}
}

func (v NullablePreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// TfaLanguage The language code which message is written in used when sending text-to-speech messages. If not defined, it will default to English (`en`).
type TfaLanguage string

// List of TfaLanguage
const (
	TFALANGUAGE_EN    TfaLanguage = "en"
	TFALANGUAGE_ES    TfaLanguage = "es"
	TFALANGUAGE_CA    TfaLanguage = "ca"
	TFALANGUAGE_DA    TfaLanguage = "da"
	TFALANGUAGE_NL    TfaLanguage = "nl"
	TFALANGUAGE_FR    TfaLanguage = "fr"
	TFALANGUAGE_DE    TfaLanguage = "de"
	TFALANGUAGE_IT    TfaLanguage = "it"
	TFALANGUAGE_JA    TfaLanguage = "ja"
	TFALANGUAGE_KO    TfaLanguage = "ko"
	TFALANGUAGE_NO    TfaLanguage = "no"
	TFALANGUAGE_PL    TfaLanguage = "pl"
	TFALANGUAGE_RU    TfaLanguage = "ru"
	TFALANGUAGE_SV    TfaLanguage = "sv"
	TFALANGUAGE_FI    TfaLanguage = "fi"
	TFALANGUAGE_HR    TfaLanguage = "hr"
	TFALANGUAGE_SL    TfaLanguage = "sl"
	TFALANGUAGE_RO    TfaLanguage = "ro"
	TFALANGUAGE_PT_PT TfaLanguage = "pt_pt"
	TFALANGUAGE_PT_BR TfaLanguage = "pt_br"
	TFALANGUAGE_ZH_CN TfaLanguage = "zh_cn"
	TFALANGUAGE_ZH_TW TfaLanguage = "zh_tw"
)

// All allowed values of TfaLanguage enum
var AllowedTfaLanguageEnumValues = []TfaLanguage{
	"en",
	"es",
	"ca",
	"da",
	"nl",
	"fr",
	"de",
	"it",
	"ja",
	"ko",
	"no",
	"pl",
	"ru",
	"sv",
	"fi",
	"hr",
	"sl",
	"ro",
	"pt_pt",
	"pt_br",
	"zh_cn",
	"zh_tw",
}

func (v *TfaLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TfaLanguage(value)
	for _, existing := range AllowedTfaLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TfaLanguage", value)
}

// NewTfaLanguageFromValue returns a pointer to a valid TfaLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTfaLanguageFromValue(v string) (*TfaLanguage, error) {
	ev := TfaLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TfaLanguage: valid values are %v", v, AllowedTfaLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TfaLanguage) IsValid() bool {
	for _, existing := range AllowedTfaLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TfaLanguage value
func (v TfaLanguage) Ptr() *TfaLanguage {
	return &v
}

type NullableTfaLanguage struct {
	value *TfaLanguage
	isSet bool
}

func (v NullableTfaLanguage) Get() *TfaLanguage {
	return v.value
}

func (v *NullableTfaLanguage) Set(val *TfaLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableTfaLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableTfaLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTfaLanguage(val *TfaLanguage) *NullableTfaLanguage {
	return &NullableTfaLanguage{value: val, isSet: true}
}

func (v NullableTfaLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTfaLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

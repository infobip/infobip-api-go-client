/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// CarouselTemplateButton List of buttons of a card.
type CarouselTemplateButton struct {
	CarouselTemplateOpenUrlButton     *CarouselTemplateOpenUrlButton
	CarouselTemplatePhoneNumberButton *CarouselTemplatePhoneNumberButton
	CarouselTemplateQuickReplyButton  *CarouselTemplateQuickReplyButton
}

// CarouselTemplateOpenUrlButtonAsCarouselTemplateButton is a convenience function that returns CarouselTemplateOpenUrlButton wrapped in CarouselTemplateButton
func CarouselTemplateOpenUrlButtonAsCarouselTemplateButton(v *CarouselTemplateOpenUrlButton) CarouselTemplateButton {
	return CarouselTemplateButton{
		CarouselTemplateOpenUrlButton: v,
	}
}

// CarouselTemplatePhoneNumberButtonAsCarouselTemplateButton is a convenience function that returns CarouselTemplatePhoneNumberButton wrapped in CarouselTemplateButton
func CarouselTemplatePhoneNumberButtonAsCarouselTemplateButton(v *CarouselTemplatePhoneNumberButton) CarouselTemplateButton {
	return CarouselTemplateButton{
		CarouselTemplatePhoneNumberButton: v,
	}
}

// CarouselTemplateQuickReplyButtonAsCarouselTemplateButton is a convenience function that returns CarouselTemplateQuickReplyButton wrapped in CarouselTemplateButton
func CarouselTemplateQuickReplyButtonAsCarouselTemplateButton(v *CarouselTemplateQuickReplyButton) CarouselTemplateButton {
	return CarouselTemplateButton{
		CarouselTemplateQuickReplyButton: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CarouselTemplateButton) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'OPEN_URL'
	if jsonDict["type"] == "OPEN_URL" {
		// try to unmarshal JSON data into CarouselTemplateOpenUrlButton
		err = json.Unmarshal(data, &dst.CarouselTemplateOpenUrlButton)
		if err == nil {
			jsonCarouselTemplateOpenUrlButton, _ := json.Marshal(dst.CarouselTemplateOpenUrlButton)
			if string(jsonCarouselTemplateOpenUrlButton) == "{}" { // empty struct
				dst.CarouselTemplateOpenUrlButton = nil
			} else {
				return nil // data stored in dst.CarouselTemplateOpenUrlButton, return on the first match
			}
		} else {
			dst.CarouselTemplateOpenUrlButton = nil
		}
	}
	// check if the discriminator value is 'PHONE_NUMBER'
	if jsonDict["type"] == "PHONE_NUMBER" {
		// try to unmarshal JSON data into CarouselTemplatePhoneNumberButton
		err = json.Unmarshal(data, &dst.CarouselTemplatePhoneNumberButton)
		if err == nil {
			jsonCarouselTemplatePhoneNumberButton, _ := json.Marshal(dst.CarouselTemplatePhoneNumberButton)
			if string(jsonCarouselTemplatePhoneNumberButton) == "{}" { // empty struct
				dst.CarouselTemplatePhoneNumberButton = nil
			} else {
				return nil // data stored in dst.CarouselTemplatePhoneNumberButton, return on the first match
			}
		} else {
			dst.CarouselTemplatePhoneNumberButton = nil
		}
	}
	// check if the discriminator value is 'QUICK_REPLY'
	if jsonDict["type"] == "QUICK_REPLY" {
		// try to unmarshal JSON data into CarouselTemplateQuickReplyButton
		err = json.Unmarshal(data, &dst.CarouselTemplateQuickReplyButton)
		if err == nil {
			jsonCarouselTemplateQuickReplyButton, _ := json.Marshal(dst.CarouselTemplateQuickReplyButton)
			if string(jsonCarouselTemplateQuickReplyButton) == "{}" { // empty struct
				dst.CarouselTemplateQuickReplyButton = nil
			} else {
				return nil // data stored in dst.CarouselTemplateQuickReplyButton, return on the first match
			}
		} else {
			dst.CarouselTemplateQuickReplyButton = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(CarouselTemplateButton)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CarouselTemplateButton) MarshalJSON() ([]byte, error) {
	if src.CarouselTemplateOpenUrlButton != nil {
		return json.Marshal(&src.CarouselTemplateOpenUrlButton)
	}
	if src.CarouselTemplatePhoneNumberButton != nil {
		return json.Marshal(&src.CarouselTemplatePhoneNumberButton)
	}
	if src.CarouselTemplateQuickReplyButton != nil {
		return json.Marshal(&src.CarouselTemplateQuickReplyButton)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *CarouselTemplateButton) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CarouselTemplateOpenUrlButton != nil {
		return obj.CarouselTemplateOpenUrlButton
	}
	if obj.CarouselTemplatePhoneNumberButton != nil {
		return obj.CarouselTemplatePhoneNumberButton
	}
	if obj.CarouselTemplateQuickReplyButton != nil {
		return obj.CarouselTemplateQuickReplyButton
	}
	// all schemas are nil
	return nil
}

type NullableCarouselTemplateButton struct {
	value *CarouselTemplateButton
	isSet bool
}

func (v NullableCarouselTemplateButton) Get() *CarouselTemplateButton {
	return v.value
}

func (v *NullableCarouselTemplateButton) Set(val *CarouselTemplateButton) {
	v.value = val
	v.isSet = true
}

func (v NullableCarouselTemplateButton) IsSet() bool {
	return v.isSet
}

func (v *NullableCarouselTemplateButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarouselTemplateButton(val *CarouselTemplateButton) *NullableCarouselTemplateButton {
	return &NullableCarouselTemplateButton{value: val, isSet: true}
}

func (v NullableCarouselTemplateButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarouselTemplateButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

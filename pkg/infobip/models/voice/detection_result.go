/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// DetectionResult Detected entity that answered the call. `UNKNOWN` if unable to detect.
type DetectionResult string

// List of DetectionResult
const (
	DETECTIONRESULT_HUMAN   DetectionResult = "HUMAN"
	DETECTIONRESULT_MACHINE DetectionResult = "MACHINE"
	DETECTIONRESULT_UNKNOWN DetectionResult = "UNKNOWN"
)

// All allowed values of DetectionResult enum
var AllowedDetectionResultEnumValues = []DetectionResult{
	"HUMAN",
	"MACHINE",
	"UNKNOWN",
}

func (v *DetectionResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DetectionResult(value)
	for _, existing := range AllowedDetectionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DetectionResult", value)
}

// NewDetectionResultFromValue returns a pointer to a valid DetectionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDetectionResultFromValue(v string) (*DetectionResult, error) {
	ev := DetectionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DetectionResult: valid values are %v", v, AllowedDetectionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DetectionResult) IsValid() bool {
	for _, existing := range AllowedDetectionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DetectionResult value
func (v DetectionResult) Ptr() *DetectionResult {
	return &v
}

type NullableDetectionResult struct {
	value *DetectionResult
	isSet bool
}

func (v NullableDetectionResult) Get() *DetectionResult {
	return v.value
}

func (v *NullableDetectionResult) Set(val *DetectionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectionResult(val *DetectionResult) *NullableDetectionResult {
	return &NullableDetectionResult{value: val, isSet: true}
}

func (v NullableDetectionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

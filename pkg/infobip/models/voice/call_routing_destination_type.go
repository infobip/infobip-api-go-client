/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallRoutingDestinationType the model 'CallRoutingDestinationType'
type CallRoutingDestinationType string

// List of CallRoutingDestinationType
const (
	CALLROUTINGDESTINATIONTYPE_APPLICATION CallRoutingDestinationType = "APPLICATION"
	CALLROUTINGDESTINATIONTYPE_ENDPOINT    CallRoutingDestinationType = "ENDPOINT"
	CALLROUTINGDESTINATIONTYPE_URL         CallRoutingDestinationType = "URL"
)

// All allowed values of CallRoutingDestinationType enum
var AllowedCallRoutingDestinationTypeEnumValues = []CallRoutingDestinationType{
	"APPLICATION",
	"ENDPOINT",
	"URL",
}

func (v *CallRoutingDestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallRoutingDestinationType(value)
	for _, existing := range AllowedCallRoutingDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallRoutingDestinationType", value)
}

// NewCallRoutingDestinationTypeFromValue returns a pointer to a valid CallRoutingDestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallRoutingDestinationTypeFromValue(v string) (*CallRoutingDestinationType, error) {
	ev := CallRoutingDestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallRoutingDestinationType: valid values are %v", v, AllowedCallRoutingDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallRoutingDestinationType) IsValid() bool {
	for _, existing := range AllowedCallRoutingDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CallRoutingDestinationType value
func (v CallRoutingDestinationType) Ptr() *CallRoutingDestinationType {
	return &v
}

type NullableCallRoutingDestinationType struct {
	value *CallRoutingDestinationType
	isSet bool
}

func (v NullableCallRoutingDestinationType) Get() *CallRoutingDestinationType {
	return v.value
}

func (v *NullableCallRoutingDestinationType) Set(val *CallRoutingDestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRoutingDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRoutingDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRoutingDestinationType(val *CallRoutingDestinationType) *NullableCallRoutingDestinationType {
	return &NullableCallRoutingDestinationType{value: val, isSet: true}
}

func (v NullableCallRoutingDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRoutingDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

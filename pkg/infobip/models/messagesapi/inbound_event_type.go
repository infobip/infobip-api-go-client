/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// InboundEventType Event type.
type InboundEventType string

// List of InboundEventType
const (
	INBOUNDEVENTTYPE_MO             InboundEventType = "MO"
	INBOUNDEVENTTYPE_TYPING_STARTED InboundEventType = "TYPING_STARTED"
	INBOUNDEVENTTYPE_TYPING_STOPPED InboundEventType = "TYPING_STOPPED"
)

// All allowed values of InboundEventType enum
var AllowedInboundEventTypeEnumValues = []InboundEventType{
	"MO",
	"TYPING_STARTED",
	"TYPING_STOPPED",
}

func (v *InboundEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InboundEventType(value)
	for _, existing := range AllowedInboundEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InboundEventType", value)
}

// NewInboundEventTypeFromValue returns a pointer to a valid InboundEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInboundEventTypeFromValue(v string) (*InboundEventType, error) {
	ev := InboundEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InboundEventType: valid values are %v", v, AllowedInboundEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InboundEventType) IsValid() bool {
	for _, existing := range AllowedInboundEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InboundEventType value
func (v InboundEventType) Ptr() *InboundEventType {
	return &v
}

type NullableInboundEventType struct {
	value *InboundEventType
	isSet bool
}

func (v NullableInboundEventType) Get() *InboundEventType {
	return v.value
}

func (v *NullableInboundEventType) Set(val *InboundEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundEventType(val *InboundEventType) *NullableInboundEventType {
	return &NullableInboundEventType{value: val, isSet: true}
}

func (v NullableInboundEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

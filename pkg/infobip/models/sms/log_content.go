/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
	"gopkg.in/validator.v2"
)

// LogContent - struct for LogContent
type LogContent struct {
	BinaryContent      *BinaryContent
	TextMessageContent *TextMessageContent
}

// BinaryContentAsLogContent is a convenience function that returns BinaryContent wrapped in LogContent
func BinaryContentAsLogContent(v *BinaryContent) LogContent {
	return LogContent{
		BinaryContent: v,
	}
}

// TextMessageContentAsLogContent is a convenience function that returns TextMessageContent wrapped in LogContent
func TextMessageContentAsLogContent(v *TextMessageContent) LogContent {
	return LogContent{
		TextMessageContent: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BinaryContent
	err = NewStrictDecoder(data).Decode(&dst.BinaryContent)
	if err == nil {
		jsonBinaryContent, _ := json.Marshal(dst.BinaryContent)
		if string(jsonBinaryContent) == "{}" { // empty struct
			dst.BinaryContent = nil
		} else {
			if err = validator.Validate(dst.BinaryContent); err != nil {
				dst.BinaryContent = nil
			} else {
				match++
			}
		}
	} else {
		dst.BinaryContent = nil
	}

	// try to unmarshal data into TextMessageContent
	err = NewStrictDecoder(data).Decode(&dst.TextMessageContent)
	if err == nil {
		jsonTextMessageContent, _ := json.Marshal(dst.TextMessageContent)
		if string(jsonTextMessageContent) == "{}" { // empty struct
			dst.TextMessageContent = nil
		} else {
			if err = validator.Validate(dst.TextMessageContent); err != nil {
				dst.TextMessageContent = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextMessageContent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BinaryContent = nil
		dst.TextMessageContent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LogContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LogContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogContent) MarshalJSON() ([]byte, error) {
	if src.BinaryContent != nil {
		return json.Marshal(&src.BinaryContent)
	}

	if src.TextMessageContent != nil {
		return json.Marshal(&src.TextMessageContent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BinaryContent != nil {
		return obj.BinaryContent
	}

	if obj.TextMessageContent != nil {
		return obj.TextMessageContent
	}

	// all schemas are nil
	return nil
}

type NullableLogContent struct {
	value *LogContent
	isSet bool
}

func (v NullableLogContent) Get() *LogContent {
	return v.value
}

func (v *NullableLogContent) Set(val *LogContent) {
	v.value = val
	v.isSet = true
}

func (v NullableLogContent) IsSet() bool {
	return v.isSet
}

func (v *NullableLogContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogContent(val *LogContent) *NullableLogContent {
	return &NullableLogContent{value: val, isSet: true}
}

func (v NullableLogContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

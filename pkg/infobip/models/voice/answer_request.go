/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the AnswerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerRequest{}

// AnswerRequest struct for AnswerRequest
type AnswerRequest struct {
	// Optional parameter to update a call's custom data.
	CustomData *map[string]string
	Recording  *CallRecordingRequest
}

// NewAnswerRequest instantiates a new AnswerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAnswerRequest() *AnswerRequest {
	this := AnswerRequest{}
	return &this
}

// NewAnswerRequestWithDefaults instantiates a new AnswerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerRequestWithDefaults() *AnswerRequest {
	this := AnswerRequest{}

	return &this
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *AnswerRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *AnswerRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *AnswerRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

// GetRecording returns the Recording field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecording() CallRecordingRequest {
	if o == nil || IsNil(o.Recording) {
		var ret CallRecordingRequest
		return ret
	}
	return *o.Recording
}

// GetRecordingOk returns a tuple with the Recording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordingOk() (*CallRecordingRequest, bool) {
	if o == nil || IsNil(o.Recording) {
		return nil, false
	}
	return o.Recording, true
}

// HasRecording returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecording() bool {
	if o != nil && !IsNil(o.Recording) {
		return true
	}

	return false
}

// SetRecording gets a reference to the given CallRecordingRequest and assigns it to the Recording field.
func (o *AnswerRequest) SetRecording(v CallRecordingRequest) {
	o.Recording = &v
}

func (o AnswerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.Recording) {
		toSerialize["recording"] = o.Recording
	}
	return toSerialize, nil
}

type NullableAnswerRequest struct {
	value *AnswerRequest
	isSet bool
}

func (v NullableAnswerRequest) Get() *AnswerRequest {
	return v.value
}

func (v *NullableAnswerRequest) Set(val *AnswerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerRequest(val *AnswerRequest) *NullableAnswerRequest {
	return &NullableAnswerRequest{value: val, isSet: true}
}

func (v NullableAnswerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

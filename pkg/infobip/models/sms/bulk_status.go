/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// BulkStatus The status of the message(s).
type BulkStatus string

// List of BulkStatus
const (
	BULKSTATUS_PENDING    BulkStatus = "PENDING"
	BULKSTATUS_PAUSED     BulkStatus = "PAUSED"
	BULKSTATUS_PROCESSING BulkStatus = "PROCESSING"
	BULKSTATUS_CANCELED   BulkStatus = "CANCELED"
	BULKSTATUS_FINISHED   BulkStatus = "FINISHED"
	BULKSTATUS_FAILED     BulkStatus = "FAILED"
)

// All allowed values of BulkStatus enum
var AllowedBulkStatusEnumValues = []BulkStatus{
	"PENDING",
	"PAUSED",
	"PROCESSING",
	"CANCELED",
	"FINISHED",
	"FAILED",
}

func (v *BulkStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkStatus(value)
	for _, existing := range AllowedBulkStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkStatus", value)
}

// NewBulkStatusFromValue returns a pointer to a valid BulkStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkStatusFromValue(v string) (*BulkStatus, error) {
	ev := BulkStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkStatus: valid values are %v", v, AllowedBulkStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkStatus) IsValid() bool {
	for _, existing := range AllowedBulkStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkStatus value
func (v BulkStatus) Ptr() *BulkStatus {
	return &v
}

type NullableBulkStatus struct {
	value *BulkStatus
	isSet bool
}

func (v NullableBulkStatus) Get() *BulkStatus {
	return v.value
}

func (v *NullableBulkStatus) Set(val *BulkStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkStatus(val *BulkStatus) *NullableBulkStatus {
	return &NullableBulkStatus{value: val, isSet: true}
}

func (v NullableBulkStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

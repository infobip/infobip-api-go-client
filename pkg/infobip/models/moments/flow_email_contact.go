/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the FlowEmailContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowEmailContact{}

// FlowEmailContact A list of person's email addresses. Max 100 emails per person.
type FlowEmailContact struct {
	// Person's email address. Must comply with the [email format](https://tools.ietf.org/html/rfc2822) and cannot exceed 255 characters. One person can have up to 100 email addresses.
	Address *string
}

// NewFlowEmailContact instantiates a new FlowEmailContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewFlowEmailContact() *FlowEmailContact {
	this := FlowEmailContact{}
	return &this
}

// NewFlowEmailContactWithDefaults instantiates a new FlowEmailContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowEmailContactWithDefaults() *FlowEmailContact {
	this := FlowEmailContact{}

	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *FlowEmailContact) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowEmailContact) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *FlowEmailContact) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *FlowEmailContact) SetAddress(v string) {
	o.Address = &v
}

func (o FlowEmailContact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowEmailContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return toSerialize, nil
}

type NullableFlowEmailContact struct {
	value *FlowEmailContact
	isSet bool
}

func (v NullableFlowEmailContact) Get() *FlowEmailContact {
	return v.value
}

func (v *NullableFlowEmailContact) Set(val *FlowEmailContact) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowEmailContact) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowEmailContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowEmailContact(val *FlowEmailContact) *NullableFlowEmailContact {
	return &NullableFlowEmailContact{value: val, isSet: true}
}

func (v NullableFlowEmailContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowEmailContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

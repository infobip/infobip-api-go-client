/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialToManyOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialToManyOptions{}

// DialToManyOptions struct for DialToManyOptions
type DialToManyOptions struct {
	// Flag indicating that parallel (true), or sequential (false) Dial to Many will be executed.
	Parallel *bool
	// Must be a valid E164 MSISDN; the parameter can be constructed using variables
	SenderId *string
	// If set, call transfer will be limited by maxCallDuration seconds; must be a positive number, no upper bound.
	MaxCallDuration *int32
	// If set limits the duration of the ringing of transferred calls in seconds. The default value is 30 seconds. This parameter can be changed only for sequential calls.
	RingTimeout *int32
}

// NewDialToManyOptions instantiates a new DialToManyOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialToManyOptions() *DialToManyOptions {
	this := DialToManyOptions{}
	return &this
}

// NewDialToManyOptionsWithDefaults instantiates a new DialToManyOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialToManyOptionsWithDefaults() *DialToManyOptions {
	this := DialToManyOptions{}

	return &this
}

// GetParallel returns the Parallel field value if set, zero value otherwise.
func (o *DialToManyOptions) GetParallel() bool {
	if o == nil || IsNil(o.Parallel) {
		var ret bool
		return ret
	}
	return *o.Parallel
}

// GetParallelOk returns a tuple with the Parallel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToManyOptions) GetParallelOk() (*bool, bool) {
	if o == nil || IsNil(o.Parallel) {
		return nil, false
	}
	return o.Parallel, true
}

// HasParallel returns a boolean if a field has been set.
func (o *DialToManyOptions) HasParallel() bool {
	if o != nil && !IsNil(o.Parallel) {
		return true
	}

	return false
}

// SetParallel gets a reference to the given bool and assigns it to the Parallel field.
func (o *DialToManyOptions) SetParallel(v bool) {
	o.Parallel = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *DialToManyOptions) GetSenderId() string {
	if o == nil || IsNil(o.SenderId) {
		var ret string
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToManyOptions) GetSenderIdOk() (*string, bool) {
	if o == nil || IsNil(o.SenderId) {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *DialToManyOptions) HasSenderId() bool {
	if o != nil && !IsNil(o.SenderId) {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given string and assigns it to the SenderId field.
func (o *DialToManyOptions) SetSenderId(v string) {
	o.SenderId = &v
}

// GetMaxCallDuration returns the MaxCallDuration field value if set, zero value otherwise.
func (o *DialToManyOptions) GetMaxCallDuration() int32 {
	if o == nil || IsNil(o.MaxCallDuration) {
		var ret int32
		return ret
	}
	return *o.MaxCallDuration
}

// GetMaxCallDurationOk returns a tuple with the MaxCallDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToManyOptions) GetMaxCallDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCallDuration) {
		return nil, false
	}
	return o.MaxCallDuration, true
}

// HasMaxCallDuration returns a boolean if a field has been set.
func (o *DialToManyOptions) HasMaxCallDuration() bool {
	if o != nil && !IsNil(o.MaxCallDuration) {
		return true
	}

	return false
}

// SetMaxCallDuration gets a reference to the given int32 and assigns it to the MaxCallDuration field.
func (o *DialToManyOptions) SetMaxCallDuration(v int32) {
	o.MaxCallDuration = &v
}

// GetRingTimeout returns the RingTimeout field value if set, zero value otherwise.
func (o *DialToManyOptions) GetRingTimeout() int32 {
	if o == nil || IsNil(o.RingTimeout) {
		var ret int32
		return ret
	}
	return *o.RingTimeout
}

// GetRingTimeoutOk returns a tuple with the RingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToManyOptions) GetRingTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RingTimeout) {
		return nil, false
	}
	return o.RingTimeout, true
}

// HasRingTimeout returns a boolean if a field has been set.
func (o *DialToManyOptions) HasRingTimeout() bool {
	if o != nil && !IsNil(o.RingTimeout) {
		return true
	}

	return false
}

// SetRingTimeout gets a reference to the given int32 and assigns it to the RingTimeout field.
func (o *DialToManyOptions) SetRingTimeout(v int32) {
	o.RingTimeout = &v
}

func (o DialToManyOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialToManyOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parallel) {
		toSerialize["parallel"] = o.Parallel
	}
	if !IsNil(o.SenderId) {
		toSerialize["senderId"] = o.SenderId
	}
	if !IsNil(o.MaxCallDuration) {
		toSerialize["maxCallDuration"] = o.MaxCallDuration
	}
	if !IsNil(o.RingTimeout) {
		toSerialize["ringTimeout"] = o.RingTimeout
	}
	return toSerialize, nil
}

type NullableDialToManyOptions struct {
	value *DialToManyOptions
	isSet bool
}

func (v NullableDialToManyOptions) Get() *DialToManyOptions {
	return v.value
}

func (v *NullableDialToManyOptions) Set(val *DialToManyOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDialToManyOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDialToManyOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialToManyOptions(val *DialToManyOptions) *NullableDialToManyOptions {
	return &NullableDialToManyOptions{value: val, isSet: true}
}

func (v NullableDialToManyOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialToManyOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

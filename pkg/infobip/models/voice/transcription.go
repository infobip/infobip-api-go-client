/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Transcription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transcription{}

// Transcription struct for Transcription
type Transcription struct {
	Language TranscriptionLanguage
	// Flag indicating whether interim transcription results should be sent.
	SendInterimResults *bool
}

type _Transcription Transcription

// NewTranscription instantiates a new Transcription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewTranscription(language TranscriptionLanguage) *Transcription {
	this := Transcription{}
	this.Language = language
	var sendInterimResults bool = false
	this.SendInterimResults = &sendInterimResults
	return &this
}

// NewTranscriptionWithDefaults instantiates a new Transcription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionWithDefaults() *Transcription {
	this := Transcription{}

	var sendInterimResults bool = false
	this.SendInterimResults = &sendInterimResults
	return &this
}

// GetLanguage returns the Language field value
func (o *Transcription) GetLanguage() TranscriptionLanguage {
	if o == nil {
		var ret TranscriptionLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *Transcription) GetLanguageOk() (*TranscriptionLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *Transcription) SetLanguage(v TranscriptionLanguage) {
	o.Language = v
}

// GetSendInterimResults returns the SendInterimResults field value if set, zero value otherwise.
func (o *Transcription) GetSendInterimResults() bool {
	if o == nil || IsNil(o.SendInterimResults) {
		var ret bool
		return ret
	}
	return *o.SendInterimResults
}

// GetSendInterimResultsOk returns a tuple with the SendInterimResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transcription) GetSendInterimResultsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendInterimResults) {
		return nil, false
	}
	return o.SendInterimResults, true
}

// HasSendInterimResults returns a boolean if a field has been set.
func (o *Transcription) HasSendInterimResults() bool {
	if o != nil && !IsNil(o.SendInterimResults) {
		return true
	}

	return false
}

// SetSendInterimResults gets a reference to the given bool and assigns it to the SendInterimResults field.
func (o *Transcription) SetSendInterimResults(v bool) {
	o.SendInterimResults = &v
}

func (o Transcription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transcription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	if !IsNil(o.SendInterimResults) {
		toSerialize["sendInterimResults"] = o.SendInterimResults
	}
	return toSerialize, nil
}

type NullableTranscription struct {
	value *Transcription
	isSet bool
}

func (v NullableTranscription) Get() *Transcription {
	return v.value
}

func (v *NullableTranscription) Set(val *Transcription) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscription) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscription(val *Transcription) *NullableTranscription {
	return &NullableTranscription{value: val, isSet: true}
}

func (v NullableTranscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

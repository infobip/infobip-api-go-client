/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DeliveryError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryError{}

// DeliveryError Message error if occurred, 0 if there is no error.
type DeliveryError struct {
	// Error group ID.
	GroupId *int32
	// Error group name.
	GroupName *string
	// Error ID.
	Id int32
	// Error name.
	Name *string
	// Human-readable description of the error.
	Description *string
	// Tells if the error is permanent.
	Permanent *bool
}

type _DeliveryError DeliveryError

// NewDeliveryError instantiates a new DeliveryError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryError(id int32) *DeliveryError {
	this := DeliveryError{}
	this.Id = id
	return &this
}

// NewDeliveryErrorWithDefaults instantiates a new DeliveryError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryErrorWithDefaults() *DeliveryError {
	this := DeliveryError{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *DeliveryError) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *DeliveryError) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *DeliveryError) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *DeliveryError) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *DeliveryError) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *DeliveryError) SetGroupName(v string) {
	o.GroupName = &v
}

// GetId returns the Id field value
func (o *DeliveryError) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeliveryError) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeliveryError) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeliveryError) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeliveryError) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DeliveryError) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DeliveryError) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DeliveryError) SetDescription(v string) {
	o.Description = &v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *DeliveryError) GetPermanent() bool {
	if o == nil || IsNil(o.Permanent) {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryError) GetPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.Permanent) {
		return nil, false
	}
	return o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *DeliveryError) HasPermanent() bool {
	if o != nil && !IsNil(o.Permanent) {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *DeliveryError) SetPermanent(v bool) {
	o.Permanent = &v
}

func (o DeliveryError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Permanent) {
		toSerialize["permanent"] = o.Permanent
	}
	return toSerialize, nil
}

type NullableDeliveryError struct {
	value *DeliveryError
	isSet bool
}

func (v NullableDeliveryError) Get() *DeliveryError {
	return v.value
}

func (v *NullableDeliveryError) Set(val *DeliveryError) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryError) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryError(val *DeliveryError) *NullableDeliveryError {
	return &NullableDeliveryError{value: val, isSet: true}
}

func (v NullableDeliveryError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

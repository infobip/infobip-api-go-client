/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Conference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conference{}

// Conference struct for Conference
type Conference struct {
	// Unique conference ID.
	Id *string
	// Conference name, requested or autogenerated on creation.
	Name *string
	// The list of conference participants.
	Participants []Participant
	// Calls Configuration ID.
	CallsConfigurationId *string
	Platform             *Platform
}

// NewConference instantiates a new Conference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewConference() *Conference {
	this := Conference{}
	return &this
}

// NewConferenceWithDefaults instantiates a new Conference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceWithDefaults() *Conference {
	this := Conference{}

	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Conference) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Conference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Conference) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Conference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Conference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Conference) SetName(v string) {
	o.Name = &v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *Conference) GetParticipants() []Participant {
	if o == nil || IsNil(o.Participants) {
		var ret []Participant
		return ret
	}
	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetParticipantsOk() ([]Participant, bool) {
	if o == nil || IsNil(o.Participants) {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *Conference) HasParticipants() bool {
	if o != nil && !IsNil(o.Participants) {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given []Participant and assigns it to the Participants field.
func (o *Conference) SetParticipants(v []Participant) {
	o.Participants = v
}

// GetCallsConfigurationId returns the CallsConfigurationId field value if set, zero value otherwise.
func (o *Conference) GetCallsConfigurationId() string {
	if o == nil || IsNil(o.CallsConfigurationId) {
		var ret string
		return ret
	}
	return *o.CallsConfigurationId
}

// GetCallsConfigurationIdOk returns a tuple with the CallsConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetCallsConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallsConfigurationId) {
		return nil, false
	}
	return o.CallsConfigurationId, true
}

// HasCallsConfigurationId returns a boolean if a field has been set.
func (o *Conference) HasCallsConfigurationId() bool {
	if o != nil && !IsNil(o.CallsConfigurationId) {
		return true
	}

	return false
}

// SetCallsConfigurationId gets a reference to the given string and assigns it to the CallsConfigurationId field.
func (o *Conference) SetCallsConfigurationId(v string) {
	o.CallsConfigurationId = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *Conference) GetPlatform() Platform {
	if o == nil || IsNil(o.Platform) {
		var ret Platform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetPlatformOk() (*Platform, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *Conference) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given Platform and assigns it to the Platform field.
func (o *Conference) SetPlatform(v Platform) {
	o.Platform = &v
}

func (o Conference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Participants) {
		toSerialize["participants"] = o.Participants
	}
	if !IsNil(o.CallsConfigurationId) {
		toSerialize["callsConfigurationId"] = o.CallsConfigurationId
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	return toSerialize, nil
}

type NullableConference struct {
	value *Conference
	isSet bool
}

func (v NullableConference) Get() *Conference {
	return v.value
}

func (v *NullableConference) Set(val *Conference) {
	v.value = val
	v.isSet = true
}

func (v NullableConference) IsSet() bool {
	return v.isSet
}

func (v *NullableConference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConference(val *Conference) *NullableConference {
	return &NullableConference{value: val, isSet: true}
}

func (v NullableConference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

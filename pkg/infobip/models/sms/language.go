/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Language type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Language{}

// Language Sets the language parameters for the message being sent.
type Language struct {
	LanguageCode *LanguageCode
	// Uses a single shift table which enhances only the extension table of the GSM default alphabet. Allows you to selectively improve character support without altering the entire message.
	SingleShift *bool
	// Uses a locking shift table which allows you to represent characters beyond the standard GSM default alphabet. This flexibility enables better language support.
	LockingShift *bool
}

// NewLanguage instantiates a new Language object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewLanguage() *Language {
	this := Language{}
	var singleShift bool = false
	this.SingleShift = &singleShift
	var lockingShift bool = false
	this.LockingShift = &lockingShift
	return &this
}

// NewLanguageWithDefaults instantiates a new Language object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageWithDefaults() *Language {
	this := Language{}

	var singleShift bool = false
	this.SingleShift = &singleShift
	var lockingShift bool = false
	this.LockingShift = &lockingShift
	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *Language) GetLanguageCode() LanguageCode {
	if o == nil || IsNil(o.LanguageCode) {
		var ret LanguageCode
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetLanguageCodeOk() (*LanguageCode, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *Language) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given LanguageCode and assigns it to the LanguageCode field.
func (o *Language) SetLanguageCode(v LanguageCode) {
	o.LanguageCode = &v
}

// GetSingleShift returns the SingleShift field value if set, zero value otherwise.
func (o *Language) GetSingleShift() bool {
	if o == nil || IsNil(o.SingleShift) {
		var ret bool
		return ret
	}
	return *o.SingleShift
}

// GetSingleShiftOk returns a tuple with the SingleShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetSingleShiftOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleShift) {
		return nil, false
	}
	return o.SingleShift, true
}

// HasSingleShift returns a boolean if a field has been set.
func (o *Language) HasSingleShift() bool {
	if o != nil && !IsNil(o.SingleShift) {
		return true
	}

	return false
}

// SetSingleShift gets a reference to the given bool and assigns it to the SingleShift field.
func (o *Language) SetSingleShift(v bool) {
	o.SingleShift = &v
}

// GetLockingShift returns the LockingShift field value if set, zero value otherwise.
func (o *Language) GetLockingShift() bool {
	if o == nil || IsNil(o.LockingShift) {
		var ret bool
		return ret
	}
	return *o.LockingShift
}

// GetLockingShiftOk returns a tuple with the LockingShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Language) GetLockingShiftOk() (*bool, bool) {
	if o == nil || IsNil(o.LockingShift) {
		return nil, false
	}
	return o.LockingShift, true
}

// HasLockingShift returns a boolean if a field has been set.
func (o *Language) HasLockingShift() bool {
	if o != nil && !IsNil(o.LockingShift) {
		return true
	}

	return false
}

// SetLockingShift gets a reference to the given bool and assigns it to the LockingShift field.
func (o *Language) SetLockingShift(v bool) {
	o.LockingShift = &v
}

func (o Language) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Language) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.SingleShift) {
		toSerialize["singleShift"] = o.SingleShift
	}
	if !IsNil(o.LockingShift) {
		toSerialize["lockingShift"] = o.LockingShift
	}
	return toSerialize, nil
}

type NullableLanguage struct {
	value *Language
	isSet bool
}

func (v NullableLanguage) Get() *Language {
	return v.value
}

func (v *NullableLanguage) Set(val *Language) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguage(val *Language) *NullableLanguage {
	return &NullableLanguage{value: val, isSet: true}
}

func (v NullableLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

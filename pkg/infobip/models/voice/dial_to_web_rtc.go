/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialToWebRTC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialToWebRTC{}

// DialToWebRTC Dial to WebRTC action performs a call redirection to WebRTC application, joining the userâ€™s call with the WebRTC application. After Dial to WebRTC action the following actions are forbidden: Say, Collect, Dial, Dial to Many, Dial to WebRTC, Dial to SIP trunk, Dial to Conversations, Play, Record and Play from Recording.
type DialToWebRTC struct {
	// Web and in-app calls applicationId. Read more about Web and in-app calls [here](https://www.infobip.com/docs/voice-and-video/web-and-in-app-calls)
	DialToWebRTC string
}

type _DialToWebRTC DialToWebRTC

// NewDialToWebRTC instantiates a new DialToWebRTC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialToWebRTC(dialToWebRTC string) *DialToWebRTC {
	this := DialToWebRTC{}
	this.DialToWebRTC = dialToWebRTC
	return &this
}

// NewDialToWebRTCWithDefaults instantiates a new DialToWebRTC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialToWebRTCWithDefaults() *DialToWebRTC {
	this := DialToWebRTC{}

	return &this
}

// GetDialToWebRTC returns the DialToWebRTC field value
func (o *DialToWebRTC) GetDialToWebRTC() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DialToWebRTC
}

// GetDialToWebRTCOk returns a tuple with the DialToWebRTC field value
// and a boolean to check if the value has been set.
func (o *DialToWebRTC) GetDialToWebRTCOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DialToWebRTC, true
}

// SetDialToWebRTC sets field value
func (o *DialToWebRTC) SetDialToWebRTC(v string) {
	o.DialToWebRTC = v
}

func (o DialToWebRTC) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialToWebRTC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dialToWebRTC"] = o.DialToWebRTC
	return toSerialize, nil
}

type NullableDialToWebRTC struct {
	value *DialToWebRTC
	isSet bool
}

func (v NullableDialToWebRTC) Get() *DialToWebRTC {
	return v.value
}

func (v *NullableDialToWebRTC) Set(val *DialToWebRTC) {
	v.value = val
	v.isSet = true
}

func (v NullableDialToWebRTC) IsSet() bool {
	return v.isSet
}

func (v *NullableDialToWebRTC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialToWebRTC(val *DialToWebRTC) *NullableDialToWebRTC {
	return &NullableDialToWebRTC{value: val, isSet: true}
}

func (v NullableDialToWebRTC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialToWebRTC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

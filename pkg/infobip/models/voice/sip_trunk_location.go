/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SipTrunkLocation SIP trunk location.
type SipTrunkLocation string

// List of SipTrunkLocation
const (
	SIPTRUNKLOCATION_SAO_PAULO    SipTrunkLocation = "SAO_PAULO"
	SIPTRUNKLOCATION_BOGOTA       SipTrunkLocation = "BOGOTA"
	SIPTRUNKLOCATION_FRANKFURT    SipTrunkLocation = "FRANKFURT"
	SIPTRUNKLOCATION_JOHANNESBURG SipTrunkLocation = "JOHANNESBURG"
	SIPTRUNKLOCATION_NEW_YORK     SipTrunkLocation = "NEW_YORK"
	SIPTRUNKLOCATION_PORTLAND     SipTrunkLocation = "PORTLAND"
	SIPTRUNKLOCATION_MOSCOW       SipTrunkLocation = "MOSCOW"
	SIPTRUNKLOCATION_SINGAPORE    SipTrunkLocation = "SINGAPORE"
	SIPTRUNKLOCATION_ISTANBUL     SipTrunkLocation = "ISTANBUL"
	SIPTRUNKLOCATION_KUALA_LUMPUR SipTrunkLocation = "KUALA_LUMPUR"
)

// All allowed values of SipTrunkLocation enum
var AllowedSipTrunkLocationEnumValues = []SipTrunkLocation{
	"SAO_PAULO",
	"BOGOTA",
	"FRANKFURT",
	"JOHANNESBURG",
	"NEW_YORK",
	"PORTLAND",
	"MOSCOW",
	"SINGAPORE",
	"ISTANBUL",
	"KUALA_LUMPUR",
}

func (v *SipTrunkLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SipTrunkLocation(value)
	for _, existing := range AllowedSipTrunkLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SipTrunkLocation", value)
}

// NewSipTrunkLocationFromValue returns a pointer to a valid SipTrunkLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSipTrunkLocationFromValue(v string) (*SipTrunkLocation, error) {
	ev := SipTrunkLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SipTrunkLocation: valid values are %v", v, AllowedSipTrunkLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SipTrunkLocation) IsValid() bool {
	for _, existing := range AllowedSipTrunkLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SipTrunkLocation value
func (v SipTrunkLocation) Ptr() *SipTrunkLocation {
	return &v
}

type NullableSipTrunkLocation struct {
	value *SipTrunkLocation
	isSet bool
}

func (v NullableSipTrunkLocation) Get() *SipTrunkLocation {
	return v.value
}

func (v *NullableSipTrunkLocation) Set(val *SipTrunkLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableSipTrunkLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableSipTrunkLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipTrunkLocation(val *SipTrunkLocation) *NullableSipTrunkLocation {
	return &NullableSipTrunkLocation{value: val, isSet: true}
}

func (v NullableSipTrunkLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipTrunkLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the TemplateTextHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateTextHeader{}

// TemplateTextHeader Key value pairs that will be replaced during message sending in a header. Valid example `{\"1\": \"John\", \"2\": \"Smith\", \"type\": \"TEXT\"}`
type TemplateTextHeader struct {
	Type TemplateHeaderType
	AdditionalProperties map[string]interface{}
}

type _TemplateTextHeader TemplateTextHeader

// NewTemplateTextHeader instantiates a new TemplateTextHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateTextHeader() *TemplateTextHeader {
	this := TemplateTextHeader{}
	this.Type = TEMPLATEHEADERTYPE_TEXT
	return &this
}

// NewTemplateTextHeaderWithDefaults instantiates a new TemplateTextHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateTextHeaderWithDefaults() *TemplateTextHeader {
	this := TemplateTextHeader{}
	return &this
}

func (o TemplateTextHeader) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateTextHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

type NullableTemplateTextHeader struct {
	value *TemplateTextHeader
	isSet bool
}

func (v NullableTemplateTextHeader) Get() *TemplateTextHeader {
	return v.value
}

func (v *NullableTemplateTextHeader) Set(val *TemplateTextHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateTextHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateTextHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateTextHeader(val *TemplateTextHeader) *NullableTemplateTextHeader {
	return &NullableTemplateTextHeader{value: val, isSet: true}
}

func (v NullableTemplateTextHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateTextHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

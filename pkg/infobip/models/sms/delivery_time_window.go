/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DeliveryTimeWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryTimeWindow{}

// DeliveryTimeWindow Sets specific message delivery window outside of which messages won't be delivered. Often, used when there are restrictions on when messages can be sent. The exact time of the day to start sending messages can be defined using the `from` property. The exact time of the day to end sending messages can be defined using the `to` property. Properties `from` and `to` should be both provided with the minimum 1 hour difference or omitted.
type DeliveryTimeWindow struct {
	// Days of the week which are included in the delivery time window. At least one day must be provided. Separate multiple days with a comma.
	Days []DeliveryDay
	From *DeliveryTime
	To   *DeliveryTime
}

type _DeliveryTimeWindow DeliveryTimeWindow

// NewDeliveryTimeWindow instantiates a new DeliveryTimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryTimeWindow(days []DeliveryDay) *DeliveryTimeWindow {
	this := DeliveryTimeWindow{}
	this.Days = days
	return &this
}

// NewDeliveryTimeWindowWithDefaults instantiates a new DeliveryTimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryTimeWindowWithDefaults() *DeliveryTimeWindow {
	this := DeliveryTimeWindow{}
	return &this
}

// GetDays returns the Days field value
func (o *DeliveryTimeWindow) GetDays() []DeliveryDay {
	if o == nil {
		var ret []DeliveryDay
		return ret
	}

	return o.Days
}

// GetDaysOk returns a tuple with the Days field value
// and a boolean to check if the value has been set.
func (o *DeliveryTimeWindow) GetDaysOk() ([]DeliveryDay, bool) {
	if o == nil {
		return nil, false
	}
	return o.Days, true
}

// SetDays sets field value
func (o *DeliveryTimeWindow) SetDays(v []DeliveryDay) {
	o.Days = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *DeliveryTimeWindow) GetFrom() DeliveryTime {
	if o == nil || IsNil(o.From) {
		var ret DeliveryTime
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryTimeWindow) GetFromOk() (*DeliveryTime, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *DeliveryTimeWindow) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given DeliveryTime and assigns it to the From field.
func (o *DeliveryTimeWindow) SetFrom(v DeliveryTime) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *DeliveryTimeWindow) GetTo() DeliveryTime {
	if o == nil || IsNil(o.To) {
		var ret DeliveryTime
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryTimeWindow) GetToOk() (*DeliveryTime, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *DeliveryTimeWindow) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given DeliveryTime and assigns it to the To field.
func (o *DeliveryTimeWindow) SetTo(v DeliveryTime) {
	o.To = &v
}

func (o DeliveryTimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryTimeWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["days"] = o.Days
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableDeliveryTimeWindow struct {
	value *DeliveryTimeWindow
	isSet bool
}

func (v NullableDeliveryTimeWindow) Get() *DeliveryTimeWindow {
	return v.value
}

func (v *NullableDeliveryTimeWindow) Set(val *DeliveryTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryTimeWindow(val *DeliveryTimeWindow) *NullableDeliveryTimeWindow {
	return &NullableDeliveryTimeWindow{value: val, isSet: true}
}

func (v NullableDeliveryTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ActionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionResponse{}

// ActionResponse struct for ActionResponse
type ActionResponse struct {
	Status *ActionStatus
}

// NewActionResponse instantiates a new ActionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewActionResponse() *ActionResponse {
	this := ActionResponse{}
	return &this
}

// NewActionResponseWithDefaults instantiates a new ActionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResponseWithDefaults() *ActionResponse {
	this := ActionResponse{}

	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActionResponse) GetStatus() ActionStatus {
	if o == nil || IsNil(o.Status) {
		var ret ActionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResponse) GetStatusOk() (*ActionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ActionStatus and assigns it to the Status field.
func (o *ActionResponse) SetStatus(v ActionStatus) {
	o.Status = &v
}

func (o ActionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableActionResponse struct {
	value *ActionResponse
	isSet bool
}

func (v NullableActionResponse) Get() *ActionResponse {
	return v.value
}

func (v *NullableActionResponse) Set(val *ActionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResponse(val *ActionResponse) *NullableActionResponse {
	return &NullableActionResponse{value: val, isSet: true}
}

func (v NullableActionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsResponse struct for SmsResponse
type SmsResponse struct {
	// Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API request. Typically, used to fetch [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message logs](#channels/sms/get-outbound-sms-message-logs).
	BulkId *string `json:"bulkId,omitempty"`
	// An array of message objects of a single message or multiple messages sent under one bulk ID.
	Messages *[]SmsResponseDetails `json:"messages,omitempty"`
}

// NewSmsResponse instantiates a new SmsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsResponse() *SmsResponse {
	this := SmsResponse{}
	return &this
}

// NewSmsResponseWithDefaults instantiates a new SmsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsResponseWithDefaults() *SmsResponse {
	this := SmsResponse{}
	return &this
}

// GetBulkId returns the BulkId field value if set, zero value otherwise.
func (o *SmsResponse) GetBulkId() string {
	if o == nil || o.BulkId == nil {
		var ret string
		return ret
	}
	return *o.BulkId
}

// GetBulkIdOk returns a tuple with the BulkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsResponse) GetBulkIdOk() (*string, bool) {
	if o == nil || o.BulkId == nil {
		return nil, false
	}
	return o.BulkId, true
}

// HasBulkId returns a boolean if a field has been set.
func (o *SmsResponse) HasBulkId() bool {
	if o != nil && o.BulkId != nil {
		return true
	}

	return false
}

// SetBulkId gets a reference to the given string and assigns it to the BulkId field.
func (o *SmsResponse) SetBulkId(v string) {
	o.BulkId = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *SmsResponse) GetMessages() []SmsResponseDetails {
	if o == nil || o.Messages == nil {
		var ret []SmsResponseDetails
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsResponse) GetMessagesOk() (*[]SmsResponseDetails, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *SmsResponse) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []SmsResponseDetails and assigns it to the Messages field.
func (o *SmsResponse) SetMessages(v []SmsResponseDetails) {
	o.Messages = &v
}

func (o SmsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BulkId != nil {
		toSerialize["bulkId"] = o.BulkId
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableSmsResponse struct {
	value *SmsResponse
	isSet bool
}

func (v NullableSmsResponse) Get() *SmsResponse {
	return v.value
}

func (v *NullableSmsResponse) Set(val *SmsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsResponse(val *SmsResponse) *NullableSmsResponse {
	return &NullableSmsResponse{value: val, isSet: true}
}

func (v NullableSmsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

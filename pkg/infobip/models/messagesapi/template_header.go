/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// TemplateHeader Header of a template message.
type TemplateHeader struct {
	TemplateDocumentHeader *TemplateDocumentHeader
	TemplateImageHeader    *TemplateImageHeader
	TemplateLocationHeader *TemplateLocationHeader
	TemplateTextHeader     *TemplateTextHeader
	TemplateVideoHeader    *TemplateVideoHeader
}

// TemplateDocumentHeaderAsTemplateHeader is a convenience function that returns TemplateDocumentHeader wrapped in TemplateHeader
func TemplateDocumentHeaderAsTemplateHeader(v *TemplateDocumentHeader) TemplateHeader {
	return TemplateHeader{
		TemplateDocumentHeader: v,
	}
}

// TemplateImageHeaderAsTemplateHeader is a convenience function that returns TemplateImageHeader wrapped in TemplateHeader
func TemplateImageHeaderAsTemplateHeader(v *TemplateImageHeader) TemplateHeader {
	return TemplateHeader{
		TemplateImageHeader: v,
	}
}

// TemplateLocationHeaderAsTemplateHeader is a convenience function that returns TemplateLocationHeader wrapped in TemplateHeader
func TemplateLocationHeaderAsTemplateHeader(v *TemplateLocationHeader) TemplateHeader {
	return TemplateHeader{
		TemplateLocationHeader: v,
	}
}

// TemplateTextHeaderAsTemplateHeader is a convenience function that returns TemplateTextHeader wrapped in TemplateHeader
func TemplateTextHeaderAsTemplateHeader(v *TemplateTextHeader) TemplateHeader {
	return TemplateHeader{
		TemplateTextHeader: v,
	}
}

// TemplateVideoHeaderAsTemplateHeader is a convenience function that returns TemplateVideoHeader wrapped in TemplateHeader
func TemplateVideoHeaderAsTemplateHeader(v *TemplateVideoHeader) TemplateHeader {
	return TemplateHeader{
		TemplateVideoHeader: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TemplateHeader) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'DOCUMENT'
	if jsonDict["type"] == "DOCUMENT" {
		// try to unmarshal JSON data into TemplateDocumentHeader
		err = json.Unmarshal(data, &dst.TemplateDocumentHeader)
		if err == nil {
			jsonTemplateDocumentHeader, _ := json.Marshal(dst.TemplateDocumentHeader)
			if string(jsonTemplateDocumentHeader) == "{}" { // empty struct
				dst.TemplateDocumentHeader = nil
			} else {
				return nil // data stored in dst.TemplateDocumentHeader, return on the first match
			}
		} else {
			dst.TemplateDocumentHeader = nil
		}
	}
	// check if the discriminator value is 'IMAGE'
	if jsonDict["type"] == "IMAGE" {
		// try to unmarshal JSON data into TemplateImageHeader
		err = json.Unmarshal(data, &dst.TemplateImageHeader)
		if err == nil {
			jsonTemplateImageHeader, _ := json.Marshal(dst.TemplateImageHeader)
			if string(jsonTemplateImageHeader) == "{}" { // empty struct
				dst.TemplateImageHeader = nil
			} else {
				return nil // data stored in dst.TemplateImageHeader, return on the first match
			}
		} else {
			dst.TemplateImageHeader = nil
		}
	}
	// check if the discriminator value is 'LOCATION'
	if jsonDict["type"] == "LOCATION" {
		// try to unmarshal JSON data into TemplateLocationHeader
		err = json.Unmarshal(data, &dst.TemplateLocationHeader)
		if err == nil {
			jsonTemplateLocationHeader, _ := json.Marshal(dst.TemplateLocationHeader)
			if string(jsonTemplateLocationHeader) == "{}" { // empty struct
				dst.TemplateLocationHeader = nil
			} else {
				return nil // data stored in dst.TemplateLocationHeader, return on the first match
			}
		} else {
			dst.TemplateLocationHeader = nil
		}
	}
	// check if the discriminator value is 'TEXT'
	if jsonDict["type"] == "TEXT" {
		// try to unmarshal JSON data into TemplateTextHeader
		err = json.Unmarshal(data, &dst.TemplateTextHeader)
		if err == nil {
			jsonTemplateTextHeader, _ := json.Marshal(dst.TemplateTextHeader)
			if string(jsonTemplateTextHeader) == "{}" { // empty struct
				dst.TemplateTextHeader = nil
			} else {
				return nil // data stored in dst.TemplateTextHeader, return on the first match
			}
		} else {
			dst.TemplateTextHeader = nil
		}
	}
	// check if the discriminator value is 'VIDEO'
	if jsonDict["type"] == "VIDEO" {
		// try to unmarshal JSON data into TemplateVideoHeader
		err = json.Unmarshal(data, &dst.TemplateVideoHeader)
		if err == nil {
			jsonTemplateVideoHeader, _ := json.Marshal(dst.TemplateVideoHeader)
			if string(jsonTemplateVideoHeader) == "{}" { // empty struct
				dst.TemplateVideoHeader = nil
			} else {
				return nil // data stored in dst.TemplateVideoHeader, return on the first match
			}
		} else {
			dst.TemplateVideoHeader = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(TemplateHeader)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateHeader) MarshalJSON() ([]byte, error) {
	if src.TemplateDocumentHeader != nil {
		return json.Marshal(&src.TemplateDocumentHeader)
	}
	if src.TemplateImageHeader != nil {
		return json.Marshal(&src.TemplateImageHeader)
	}
	if src.TemplateLocationHeader != nil {
		return json.Marshal(&src.TemplateLocationHeader)
	}
	if src.TemplateTextHeader != nil {
		return json.Marshal(&src.TemplateTextHeader)
	}
	if src.TemplateVideoHeader != nil {
		return json.Marshal(&src.TemplateVideoHeader)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *TemplateHeader) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TemplateDocumentHeader != nil {
		return obj.TemplateDocumentHeader
	}
	if obj.TemplateImageHeader != nil {
		return obj.TemplateImageHeader
	}
	if obj.TemplateLocationHeader != nil {
		return obj.TemplateLocationHeader
	}
	if obj.TemplateTextHeader != nil {
		return obj.TemplateTextHeader
	}
	if obj.TemplateVideoHeader != nil {
		return obj.TemplateVideoHeader
	}
	// all schemas are nil
	return nil
}

type NullableTemplateHeader struct {
	value *TemplateHeader
	isSet bool
}

func (v NullableTemplateHeader) Get() *TemplateHeader {
	return v.value
}

func (v *NullableTemplateHeader) Set(val *TemplateHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateHeader(val *TemplateHeader) *NullableTemplateHeader {
	return &NullableTemplateHeader{value: val, isSet: true}
}

func (v NullableTemplateHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

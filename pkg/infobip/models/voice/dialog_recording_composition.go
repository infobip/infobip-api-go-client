/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialogRecordingComposition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialogRecordingComposition{}

// DialogRecordingComposition struct for DialogRecordingComposition
type DialogRecordingComposition struct {
	// Indicates whether to create a single recording of both participants. If set to `true`, both participants are merged into a single audio or video file. Otherwise, both participants will have their own individual audio or video file.
	Enabled *bool
}

// NewDialogRecordingComposition instantiates a new DialogRecordingComposition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialogRecordingComposition() *DialogRecordingComposition {
	this := DialogRecordingComposition{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewDialogRecordingCompositionWithDefaults instantiates a new DialogRecordingComposition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialogRecordingCompositionWithDefaults() *DialogRecordingComposition {
	this := DialogRecordingComposition{}

	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DialogRecordingComposition) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingComposition) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DialogRecordingComposition) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DialogRecordingComposition) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o DialogRecordingComposition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialogRecordingComposition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableDialogRecordingComposition struct {
	value *DialogRecordingComposition
	isSet bool
}

func (v NullableDialogRecordingComposition) Get() *DialogRecordingComposition {
	return v.value
}

func (v *NullableDialogRecordingComposition) Set(val *DialogRecordingComposition) {
	v.value = val
	v.isSet = true
}

func (v NullableDialogRecordingComposition) IsSet() bool {
	return v.isSet
}

func (v *NullableDialogRecordingComposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialogRecordingComposition(val *DialogRecordingComposition) *NullableDialogRecordingComposition {
	return &NullableDialogRecordingComposition{value: val, isSet: true}
}

func (v NullableDialogRecordingComposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialogRecordingComposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

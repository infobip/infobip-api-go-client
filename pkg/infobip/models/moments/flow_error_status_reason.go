/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FlowErrorStatusReason  Detailed reason for the REJECTED status: * `REJECTED_INVALID_CONTACT` - Person started to be processed but has been rejected as the contact is not recognized. * `REJECTED_ATTRIBUTE_MISSED` - One of the person's attributes specified in the request does not exist or has spelling error. * `REJECTED_PERSON_ALREADY_IN_FLOW` - Person is already in flow. * `REJECTED_PERSON_NOT_ALLOWED_TO_REENTER` - Person is not allowed to re-enter flow now. * `REJECTED_FLOW_ERROR_UNKNOWN` - Generic flow error. * `REJECTED_NOT_ENOUGH_CREDITS` - Your account is out of credits for further submission. Top up your account. For further assistance in topping up or applying for an online account top-up service, you may contact your Account Manager.
type FlowErrorStatusReason string

// List of FlowErrorStatusReason
const (
	FLOWERRORSTATUSREASON_INVALID_CONTACT               FlowErrorStatusReason = "REJECTED_INVALID_CONTACT"
	FLOWERRORSTATUSREASON_ATTRIBUTE_MISSED              FlowErrorStatusReason = "REJECTED_ATTRIBUTE_MISSED"
	FLOWERRORSTATUSREASON_PERSON_IN_FLOW                FlowErrorStatusReason = "REJECTED_PERSON_IN_FLOW"
	FLOWERRORSTATUSREASON_PERSON_NOT_ALLOWED_TO_REENTER FlowErrorStatusReason = "REJECTED_PERSON_NOT_ALLOWED_TO_REENTER"
	FLOWERRORSTATUSREASON_FLOW_ERROR_UNKNOWN            FlowErrorStatusReason = "REJECTED_FLOW_ERROR_UNKNOWN"
	FLOWERRORSTATUSREASON_NOT_ENOUGH_CREDITS            FlowErrorStatusReason = "REJECTED_NOT_ENOUGH_CREDITS"
	FLOWERRORSTATUSREASON_CDP_ERROR_UNKNOWN             FlowErrorStatusReason = "REJECTED_CDP_ERROR_UNKNOWN"
)

// All allowed values of FlowErrorStatusReason enum
var AllowedFlowErrorStatusReasonEnumValues = []FlowErrorStatusReason{
	"REJECTED_INVALID_CONTACT",
	"REJECTED_ATTRIBUTE_MISSED",
	"REJECTED_PERSON_IN_FLOW",
	"REJECTED_PERSON_NOT_ALLOWED_TO_REENTER",
	"REJECTED_FLOW_ERROR_UNKNOWN",
	"REJECTED_NOT_ENOUGH_CREDITS",
	"REJECTED_CDP_ERROR_UNKNOWN",
}

func (v *FlowErrorStatusReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowErrorStatusReason(value)
	for _, existing := range AllowedFlowErrorStatusReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowErrorStatusReason", value)
}

// NewFlowErrorStatusReasonFromValue returns a pointer to a valid FlowErrorStatusReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowErrorStatusReasonFromValue(v string) (*FlowErrorStatusReason, error) {
	ev := FlowErrorStatusReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowErrorStatusReason: valid values are %v", v, AllowedFlowErrorStatusReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowErrorStatusReason) IsValid() bool {
	for _, existing := range AllowedFlowErrorStatusReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowErrorStatusReason value
func (v FlowErrorStatusReason) Ptr() *FlowErrorStatusReason {
	return &v
}

type NullableFlowErrorStatusReason struct {
	value *FlowErrorStatusReason
	isSet bool
}

func (v NullableFlowErrorStatusReason) Get() *FlowErrorStatusReason {
	return v.value
}

func (v *NullableFlowErrorStatusReason) Set(val *FlowErrorStatusReason) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowErrorStatusReason) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowErrorStatusReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowErrorStatusReason(val *FlowErrorStatusReason) *NullableFlowErrorStatusReason {
	return &NullableFlowErrorStatusReason{value: val, isSet: true}
}

func (v NullableFlowErrorStatusReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowErrorStatusReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// PlayContent struct for PlayContent
type PlayContent struct {
	FilePlayContent      *FilePlayContent
	RecordingPlayContent *RecordingPlayContent
	TextPlayContent      *TextPlayContent
	UrlPlayContent       *UrlPlayContent
}

// FilePlayContentAsPlayContent is a convenience function that returns FilePlayContent wrapped in PlayContent
func FilePlayContentAsPlayContent(v *FilePlayContent) PlayContent {
	return PlayContent{
		FilePlayContent: v,
	}
}

// RecordingPlayContentAsPlayContent is a convenience function that returns RecordingPlayContent wrapped in PlayContent
func RecordingPlayContentAsPlayContent(v *RecordingPlayContent) PlayContent {
	return PlayContent{
		RecordingPlayContent: v,
	}
}

// TextPlayContentAsPlayContent is a convenience function that returns TextPlayContent wrapped in PlayContent
func TextPlayContentAsPlayContent(v *TextPlayContent) PlayContent {
	return PlayContent{
		TextPlayContent: v,
	}
}

// UrlPlayContentAsPlayContent is a convenience function that returns UrlPlayContent wrapped in PlayContent
func UrlPlayContentAsPlayContent(v *UrlPlayContent) PlayContent {
	return PlayContent{
		UrlPlayContent: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PlayContent) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'FILE'
	if jsonDict["type"] == "FILE" {
		// try to unmarshal JSON data into FilePlayContent
		err = json.Unmarshal(data, &dst.FilePlayContent)
		if err == nil {
			jsonFilePlayContent, _ := json.Marshal(dst.FilePlayContent)
			if string(jsonFilePlayContent) == "{}" { // empty struct
				dst.FilePlayContent = nil
			} else {
				return nil // data stored in dst.FilePlayContent, return on the first match
			}
		} else {
			dst.FilePlayContent = nil
		}
	}
	// check if the discriminator value is 'RECORDING'
	if jsonDict["type"] == "RECORDING" {
		// try to unmarshal JSON data into RecordingPlayContent
		err = json.Unmarshal(data, &dst.RecordingPlayContent)
		if err == nil {
			jsonRecordingPlayContent, _ := json.Marshal(dst.RecordingPlayContent)
			if string(jsonRecordingPlayContent) == "{}" { // empty struct
				dst.RecordingPlayContent = nil
			} else {
				return nil // data stored in dst.RecordingPlayContent, return on the first match
			}
		} else {
			dst.RecordingPlayContent = nil
		}
	}
	// check if the discriminator value is 'TEXT'
	if jsonDict["type"] == "TEXT" {
		// try to unmarshal JSON data into TextPlayContent
		err = json.Unmarshal(data, &dst.TextPlayContent)
		if err == nil {
			jsonTextPlayContent, _ := json.Marshal(dst.TextPlayContent)
			if string(jsonTextPlayContent) == "{}" { // empty struct
				dst.TextPlayContent = nil
			} else {
				return nil // data stored in dst.TextPlayContent, return on the first match
			}
		} else {
			dst.TextPlayContent = nil
		}
	}
	// check if the discriminator value is 'URL'
	if jsonDict["type"] == "URL" {
		// try to unmarshal JSON data into UrlPlayContent
		err = json.Unmarshal(data, &dst.UrlPlayContent)
		if err == nil {
			jsonUrlPlayContent, _ := json.Marshal(dst.UrlPlayContent)
			if string(jsonUrlPlayContent) == "{}" { // empty struct
				dst.UrlPlayContent = nil
			} else {
				return nil // data stored in dst.UrlPlayContent, return on the first match
			}
		} else {
			dst.UrlPlayContent = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(PlayContent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PlayContent) MarshalJSON() ([]byte, error) {
	if src.FilePlayContent != nil {
		return json.Marshal(&src.FilePlayContent)
	}
	if src.RecordingPlayContent != nil {
		return json.Marshal(&src.RecordingPlayContent)
	}
	if src.TextPlayContent != nil {
		return json.Marshal(&src.TextPlayContent)
	}
	if src.UrlPlayContent != nil {
		return json.Marshal(&src.UrlPlayContent)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *PlayContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FilePlayContent != nil {
		return obj.FilePlayContent
	}
	if obj.RecordingPlayContent != nil {
		return obj.RecordingPlayContent
	}
	if obj.TextPlayContent != nil {
		return obj.TextPlayContent
	}
	if obj.UrlPlayContent != nil {
		return obj.UrlPlayContent
	}
	// all schemas are nil
	return nil
}

type NullablePlayContent struct {
	value *PlayContent
	isSet bool
}

func (v NullablePlayContent) Get() *PlayContent {
	return v.value
}

func (v *NullablePlayContent) Set(val *PlayContent) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayContent) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayContent(val *PlayContent) *NullablePlayContent {
	return &NullablePlayContent{value: val, isSet: true}
}

func (v NullablePlayContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

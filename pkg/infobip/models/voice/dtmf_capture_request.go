/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DtmfCaptureRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtmfCaptureRequest{}

// DtmfCaptureRequest struct for DtmfCaptureRequest
type DtmfCaptureRequest struct {
	// Maximum number of digits to capture.
	MaxLength int32
	// The duration, in milliseconds, to wait for the first DTMF digit response.
	Timeout int32
	// Digit used to end input if less than `maxLength` digits have been pressed.
	Terminator *string
	// Duration, in milliseconds, to wait for a DTMF digit in-between individual digit inputs. If not set, `digitTimeout` will use the same duration as `timeout`.
	DigitTimeout *int32
	PlayContent  *PlayContent
	// Optional parameter to update a call's custom data.
	CustomData *map[string]string
}

type _DtmfCaptureRequest DtmfCaptureRequest

// NewDtmfCaptureRequest instantiates a new DtmfCaptureRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDtmfCaptureRequest(maxLength int32, timeout int32) *DtmfCaptureRequest {
	this := DtmfCaptureRequest{}
	this.MaxLength = maxLength
	this.Timeout = timeout
	return &this
}

// NewDtmfCaptureRequestWithDefaults instantiates a new DtmfCaptureRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtmfCaptureRequestWithDefaults() *DtmfCaptureRequest {
	this := DtmfCaptureRequest{}

	return &this
}

// GetMaxLength returns the MaxLength field value
func (o *DtmfCaptureRequest) GetMaxLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetMaxLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLength, true
}

// SetMaxLength sets field value
func (o *DtmfCaptureRequest) SetMaxLength(v int32) {
	o.MaxLength = v
}

// GetTimeout returns the Timeout field value
func (o *DtmfCaptureRequest) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *DtmfCaptureRequest) SetTimeout(v int32) {
	o.Timeout = v
}

// GetTerminator returns the Terminator field value if set, zero value otherwise.
func (o *DtmfCaptureRequest) GetTerminator() string {
	if o == nil || IsNil(o.Terminator) {
		var ret string
		return ret
	}
	return *o.Terminator
}

// GetTerminatorOk returns a tuple with the Terminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetTerminatorOk() (*string, bool) {
	if o == nil || IsNil(o.Terminator) {
		return nil, false
	}
	return o.Terminator, true
}

// HasTerminator returns a boolean if a field has been set.
func (o *DtmfCaptureRequest) HasTerminator() bool {
	if o != nil && !IsNil(o.Terminator) {
		return true
	}

	return false
}

// SetTerminator gets a reference to the given string and assigns it to the Terminator field.
func (o *DtmfCaptureRequest) SetTerminator(v string) {
	o.Terminator = &v
}

// GetDigitTimeout returns the DigitTimeout field value if set, zero value otherwise.
func (o *DtmfCaptureRequest) GetDigitTimeout() int32 {
	if o == nil || IsNil(o.DigitTimeout) {
		var ret int32
		return ret
	}
	return *o.DigitTimeout
}

// GetDigitTimeoutOk returns a tuple with the DigitTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetDigitTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.DigitTimeout) {
		return nil, false
	}
	return o.DigitTimeout, true
}

// HasDigitTimeout returns a boolean if a field has been set.
func (o *DtmfCaptureRequest) HasDigitTimeout() bool {
	if o != nil && !IsNil(o.DigitTimeout) {
		return true
	}

	return false
}

// SetDigitTimeout gets a reference to the given int32 and assigns it to the DigitTimeout field.
func (o *DtmfCaptureRequest) SetDigitTimeout(v int32) {
	o.DigitTimeout = &v
}

// GetPlayContent returns the PlayContent field value if set, zero value otherwise.
func (o *DtmfCaptureRequest) GetPlayContent() PlayContent {
	if o == nil || IsNil(o.PlayContent) {
		var ret PlayContent
		return ret
	}
	return *o.PlayContent
}

// GetPlayContentOk returns a tuple with the PlayContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetPlayContentOk() (*PlayContent, bool) {
	if o == nil || IsNil(o.PlayContent) {
		return nil, false
	}
	return o.PlayContent, true
}

// HasPlayContent returns a boolean if a field has been set.
func (o *DtmfCaptureRequest) HasPlayContent() bool {
	if o != nil && !IsNil(o.PlayContent) {
		return true
	}

	return false
}

// SetPlayContent gets a reference to the given PlayContent and assigns it to the PlayContent field.
func (o *DtmfCaptureRequest) SetPlayContent(v PlayContent) {
	o.PlayContent = &v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *DtmfCaptureRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfCaptureRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *DtmfCaptureRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *DtmfCaptureRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

func (o DtmfCaptureRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtmfCaptureRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maxLength"] = o.MaxLength
	toSerialize["timeout"] = o.Timeout
	if !IsNil(o.Terminator) {
		toSerialize["terminator"] = o.Terminator
	}
	if !IsNil(o.DigitTimeout) {
		toSerialize["digitTimeout"] = o.DigitTimeout
	}
	if !IsNil(o.PlayContent) {
		toSerialize["playContent"] = o.PlayContent
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	return toSerialize, nil
}

type NullableDtmfCaptureRequest struct {
	value *DtmfCaptureRequest
	isSet bool
}

func (v NullableDtmfCaptureRequest) Get() *DtmfCaptureRequest {
	return v.value
}

func (v *NullableDtmfCaptureRequest) Set(val *DtmfCaptureRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtmfCaptureRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtmfCaptureRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtmfCaptureRequest(val *DtmfCaptureRequest) *NullableDtmfCaptureRequest {
	return &NullableDtmfCaptureRequest{value: val, isSet: true}
}

func (v NullableDtmfCaptureRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtmfCaptureRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

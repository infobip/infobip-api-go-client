/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the TemplateMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateMessage{}

// TemplateMessage struct for TemplateMessage
type TemplateMessage struct {
	// The ID of the application that represents your service (e.g. 2FA for login, 2FA for changing the password, etc.) for which the requested message has been created.
	ApplicationId *string
	Language      *TfaLanguage
	// The ID of the message template (message body with the PIN placeholder) that is sent to the recipient.
	MessageId *string
	// Text of a message that will be sent. Message text must contain `pinPlaceholder`.
	MessageText *string
	// PIN code length.
	PinLength *int32
	// The PIN code placeholder that will be replaced with a generated PIN code.
	PinPlaceholder *string
	PinType        *PinType
	Regional       *RegionalOptions
	// In case PIN message is sent by Voice, DTMF code will enable replaying the message.
	RepeatDTMF *string
	// The name that will appear as the sender of the 2FA message (Example: CompanyName).
	SenderId *string
	// In case PIN message is sent by Voice, the speed of speech can be set for the message. Supported range is from `0.5` to `2`.
	SpeechRate *float64
	// Defines the voice that will be used for the chosen language (example: Joanna). For each supported language, we may offer different voices (learn more [here](https://www.infobip.com/docs/voice-and-video/reference#text-to-speech-languages)). You can use this [method](https://www.infobip.com/docs/api/channels/voice/voice-message/get-voices) to retrieve all voices for the given language. If not defined, it will default to the standard voice for the selected language (if available). If the standard voice is not available, the request will fail. To avoid that, you can choose one of the neural voices (charges will apply).
	VoiceName *string
}

// NewTemplateMessage instantiates a new TemplateMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewTemplateMessage() *TemplateMessage {
	this := TemplateMessage{}
	return &this
}

// NewTemplateMessageWithDefaults instantiates a new TemplateMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateMessageWithDefaults() *TemplateMessage {
	this := TemplateMessage{}

	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *TemplateMessage) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *TemplateMessage) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *TemplateMessage) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *TemplateMessage) GetLanguage() TfaLanguage {
	if o == nil || IsNil(o.Language) {
		var ret TfaLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetLanguageOk() (*TfaLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *TemplateMessage) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given TfaLanguage and assigns it to the Language field.
func (o *TemplateMessage) SetLanguage(v TfaLanguage) {
	o.Language = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *TemplateMessage) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *TemplateMessage) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *TemplateMessage) SetMessageId(v string) {
	o.MessageId = &v
}

// GetMessageText returns the MessageText field value if set, zero value otherwise.
func (o *TemplateMessage) GetMessageText() string {
	if o == nil || IsNil(o.MessageText) {
		var ret string
		return ret
	}
	return *o.MessageText
}

// GetMessageTextOk returns a tuple with the MessageText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetMessageTextOk() (*string, bool) {
	if o == nil || IsNil(o.MessageText) {
		return nil, false
	}
	return o.MessageText, true
}

// HasMessageText returns a boolean if a field has been set.
func (o *TemplateMessage) HasMessageText() bool {
	if o != nil && !IsNil(o.MessageText) {
		return true
	}

	return false
}

// SetMessageText gets a reference to the given string and assigns it to the MessageText field.
func (o *TemplateMessage) SetMessageText(v string) {
	o.MessageText = &v
}

// GetPinLength returns the PinLength field value if set, zero value otherwise.
func (o *TemplateMessage) GetPinLength() int32 {
	if o == nil || IsNil(o.PinLength) {
		var ret int32
		return ret
	}
	return *o.PinLength
}

// GetPinLengthOk returns a tuple with the PinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetPinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PinLength) {
		return nil, false
	}
	return o.PinLength, true
}

// HasPinLength returns a boolean if a field has been set.
func (o *TemplateMessage) HasPinLength() bool {
	if o != nil && !IsNil(o.PinLength) {
		return true
	}

	return false
}

// SetPinLength gets a reference to the given int32 and assigns it to the PinLength field.
func (o *TemplateMessage) SetPinLength(v int32) {
	o.PinLength = &v
}

// GetPinPlaceholder returns the PinPlaceholder field value if set, zero value otherwise.
func (o *TemplateMessage) GetPinPlaceholder() string {
	if o == nil || IsNil(o.PinPlaceholder) {
		var ret string
		return ret
	}
	return *o.PinPlaceholder
}

// GetPinPlaceholderOk returns a tuple with the PinPlaceholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetPinPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.PinPlaceholder) {
		return nil, false
	}
	return o.PinPlaceholder, true
}

// HasPinPlaceholder returns a boolean if a field has been set.
func (o *TemplateMessage) HasPinPlaceholder() bool {
	if o != nil && !IsNil(o.PinPlaceholder) {
		return true
	}

	return false
}

// SetPinPlaceholder gets a reference to the given string and assigns it to the PinPlaceholder field.
func (o *TemplateMessage) SetPinPlaceholder(v string) {
	o.PinPlaceholder = &v
}

// GetPinType returns the PinType field value if set, zero value otherwise.
func (o *TemplateMessage) GetPinType() PinType {
	if o == nil || IsNil(o.PinType) {
		var ret PinType
		return ret
	}
	return *o.PinType
}

// GetPinTypeOk returns a tuple with the PinType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetPinTypeOk() (*PinType, bool) {
	if o == nil || IsNil(o.PinType) {
		return nil, false
	}
	return o.PinType, true
}

// HasPinType returns a boolean if a field has been set.
func (o *TemplateMessage) HasPinType() bool {
	if o != nil && !IsNil(o.PinType) {
		return true
	}

	return false
}

// SetPinType gets a reference to the given PinType and assigns it to the PinType field.
func (o *TemplateMessage) SetPinType(v PinType) {
	o.PinType = &v
}

// GetRegional returns the Regional field value if set, zero value otherwise.
func (o *TemplateMessage) GetRegional() RegionalOptions {
	if o == nil || IsNil(o.Regional) {
		var ret RegionalOptions
		return ret
	}
	return *o.Regional
}

// GetRegionalOk returns a tuple with the Regional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetRegionalOk() (*RegionalOptions, bool) {
	if o == nil || IsNil(o.Regional) {
		return nil, false
	}
	return o.Regional, true
}

// HasRegional returns a boolean if a field has been set.
func (o *TemplateMessage) HasRegional() bool {
	if o != nil && !IsNil(o.Regional) {
		return true
	}

	return false
}

// SetRegional gets a reference to the given RegionalOptions and assigns it to the Regional field.
func (o *TemplateMessage) SetRegional(v RegionalOptions) {
	o.Regional = &v
}

// GetRepeatDTMF returns the RepeatDTMF field value if set, zero value otherwise.
func (o *TemplateMessage) GetRepeatDTMF() string {
	if o == nil || IsNil(o.RepeatDTMF) {
		var ret string
		return ret
	}
	return *o.RepeatDTMF
}

// GetRepeatDTMFOk returns a tuple with the RepeatDTMF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetRepeatDTMFOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatDTMF) {
		return nil, false
	}
	return o.RepeatDTMF, true
}

// HasRepeatDTMF returns a boolean if a field has been set.
func (o *TemplateMessage) HasRepeatDTMF() bool {
	if o != nil && !IsNil(o.RepeatDTMF) {
		return true
	}

	return false
}

// SetRepeatDTMF gets a reference to the given string and assigns it to the RepeatDTMF field.
func (o *TemplateMessage) SetRepeatDTMF(v string) {
	o.RepeatDTMF = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *TemplateMessage) GetSenderId() string {
	if o == nil || IsNil(o.SenderId) {
		var ret string
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetSenderIdOk() (*string, bool) {
	if o == nil || IsNil(o.SenderId) {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *TemplateMessage) HasSenderId() bool {
	if o != nil && !IsNil(o.SenderId) {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given string and assigns it to the SenderId field.
func (o *TemplateMessage) SetSenderId(v string) {
	o.SenderId = &v
}

// GetSpeechRate returns the SpeechRate field value if set, zero value otherwise.
func (o *TemplateMessage) GetSpeechRate() float64 {
	if o == nil || IsNil(o.SpeechRate) {
		var ret float64
		return ret
	}
	return *o.SpeechRate
}

// GetSpeechRateOk returns a tuple with the SpeechRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetSpeechRateOk() (*float64, bool) {
	if o == nil || IsNil(o.SpeechRate) {
		return nil, false
	}
	return o.SpeechRate, true
}

// HasSpeechRate returns a boolean if a field has been set.
func (o *TemplateMessage) HasSpeechRate() bool {
	if o != nil && !IsNil(o.SpeechRate) {
		return true
	}

	return false
}

// SetSpeechRate gets a reference to the given float64 and assigns it to the SpeechRate field.
func (o *TemplateMessage) SetSpeechRate(v float64) {
	o.SpeechRate = &v
}

// GetVoiceName returns the VoiceName field value if set, zero value otherwise.
func (o *TemplateMessage) GetVoiceName() string {
	if o == nil || IsNil(o.VoiceName) {
		var ret string
		return ret
	}
	return *o.VoiceName
}

// GetVoiceNameOk returns a tuple with the VoiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMessage) GetVoiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.VoiceName) {
		return nil, false
	}
	return o.VoiceName, true
}

// HasVoiceName returns a boolean if a field has been set.
func (o *TemplateMessage) HasVoiceName() bool {
	if o != nil && !IsNil(o.VoiceName) {
		return true
	}

	return false
}

// SetVoiceName gets a reference to the given string and assigns it to the VoiceName field.
func (o *TemplateMessage) SetVoiceName(v string) {
	o.VoiceName = &v
}

func (o TemplateMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.MessageText) {
		toSerialize["messageText"] = o.MessageText
	}
	if !IsNil(o.PinLength) {
		toSerialize["pinLength"] = o.PinLength
	}
	if !IsNil(o.PinPlaceholder) {
		toSerialize["pinPlaceholder"] = o.PinPlaceholder
	}
	if !IsNil(o.PinType) {
		toSerialize["pinType"] = o.PinType
	}
	if !IsNil(o.Regional) {
		toSerialize["regional"] = o.Regional
	}
	if !IsNil(o.RepeatDTMF) {
		toSerialize["repeatDTMF"] = o.RepeatDTMF
	}
	if !IsNil(o.SenderId) {
		toSerialize["senderId"] = o.SenderId
	}
	if !IsNil(o.SpeechRate) {
		toSerialize["speechRate"] = o.SpeechRate
	}
	if !IsNil(o.VoiceName) {
		toSerialize["voiceName"] = o.VoiceName
	}
	return toSerialize, nil
}

type NullableTemplateMessage struct {
	value *TemplateMessage
	isSet bool
}

func (v NullableTemplateMessage) Get() *TemplateMessage {
	return v.value
}

func (v *NullableTemplateMessage) Set(val *TemplateMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateMessage(val *TemplateMessage) *NullableTemplateMessage {
	return &NullableTemplateMessage{value: val, isSet: true}
}

func (v NullableTemplateMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

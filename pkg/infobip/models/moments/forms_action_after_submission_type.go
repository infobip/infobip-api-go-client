/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FormsActionAfterSubmissionType the model 'FormsActionAfterSubmissionType'
type FormsActionAfterSubmissionType string

// List of FormsActionAfterSubmissionType
const (
	FORMSACTIONAFTERSUBMISSIONTYPE_REDIRECT FormsActionAfterSubmissionType = "REDIRECT"
	FORMSACTIONAFTERSUBMISSIONTYPE_MESSAGE  FormsActionAfterSubmissionType = "MESSAGE"
)

// All allowed values of FormsActionAfterSubmissionType enum
var AllowedFormsActionAfterSubmissionTypeEnumValues = []FormsActionAfterSubmissionType{
	"REDIRECT",
	"MESSAGE",
}

func (v *FormsActionAfterSubmissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormsActionAfterSubmissionType(value)
	for _, existing := range AllowedFormsActionAfterSubmissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormsActionAfterSubmissionType", value)
}

// NewFormsActionAfterSubmissionTypeFromValue returns a pointer to a valid FormsActionAfterSubmissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormsActionAfterSubmissionTypeFromValue(v string) (*FormsActionAfterSubmissionType, error) {
	ev := FormsActionAfterSubmissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormsActionAfterSubmissionType: valid values are %v", v, AllowedFormsActionAfterSubmissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormsActionAfterSubmissionType) IsValid() bool {
	for _, existing := range AllowedFormsActionAfterSubmissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormsActionAfterSubmissionType value
func (v FormsActionAfterSubmissionType) Ptr() *FormsActionAfterSubmissionType {
	return &v
}

type NullableFormsActionAfterSubmissionType struct {
	value *FormsActionAfterSubmissionType
	isSet bool
}

func (v NullableFormsActionAfterSubmissionType) Get() *FormsActionAfterSubmissionType {
	return v.value
}

func (v *NullableFormsActionAfterSubmissionType) Set(val *FormsActionAfterSubmissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormsActionAfterSubmissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormsActionAfterSubmissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormsActionAfterSubmissionType(val *FormsActionAfterSubmissionType) *NullableFormsActionAfterSubmissionType {
	return &NullableFormsActionAfterSubmissionType{value: val, isSet: true}
}

func (v NullableFormsActionAfterSubmissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormsActionAfterSubmissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

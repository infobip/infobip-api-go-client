/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the TemplateMultiProductButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateMultiProductButton{}

// TemplateMultiProductButton struct for TemplateMultiProductButton
type TemplateMultiProductButton struct {
	Type TemplateButtonType
	// Product-unique identifier, as defined in catalog. If omitted, the image of the first item in your catalog will be used.
	ProductId *string
	// An array of multi product sections.
	Sections []TemplateMultiProductButtonSection
}

type _TemplateMultiProductButton TemplateMultiProductButton

// NewTemplateMultiProductButton instantiates a new TemplateMultiProductButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateMultiProductButton(sections []TemplateMultiProductButtonSection) *TemplateMultiProductButton {
	this := TemplateMultiProductButton{}
	this.Type = TEMPLATEBUTTONTYPE_MULTI_PRODUCT
	this.Sections = sections
	return &this
}

// NewTemplateMultiProductButtonWithDefaults instantiates a new TemplateMultiProductButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateMultiProductButtonWithDefaults() *TemplateMultiProductButton {
	this := TemplateMultiProductButton{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *TemplateMultiProductButton) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMultiProductButton) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *TemplateMultiProductButton) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *TemplateMultiProductButton) SetProductId(v string) {
	o.ProductId = &v
}

// GetSections returns the Sections field value
func (o *TemplateMultiProductButton) GetSections() []TemplateMultiProductButtonSection {
	if o == nil {
		var ret []TemplateMultiProductButtonSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *TemplateMultiProductButton) GetSectionsOk() ([]TemplateMultiProductButtonSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *TemplateMultiProductButton) SetSections(v []TemplateMultiProductButtonSection) {
	o.Sections = v
}

func (o TemplateMultiProductButton) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateMultiProductButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	toSerialize["sections"] = o.Sections
	return toSerialize, nil
}

type NullableTemplateMultiProductButton struct {
	value *TemplateMultiProductButton
	isSet bool
}

func (v NullableTemplateMultiProductButton) Get() *TemplateMultiProductButton {
	return v.value
}

func (v *NullableTemplateMultiProductButton) Set(val *TemplateMultiProductButton) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateMultiProductButton) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateMultiProductButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateMultiProductButton(val *TemplateMultiProductButton) *NullableTemplateMultiProductButton {
	return &NullableTemplateMultiProductButton{value: val, isSet: true}
}

func (v NullableTemplateMultiProductButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateMultiProductButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

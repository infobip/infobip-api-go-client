/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DtmfOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtmfOptions{}

// DtmfOptions struct for DtmfOptions
type DtmfOptions struct {
	// Maximum acceptable number of digits. Capturing is stopped after this number of digits has been entered. Max accepted value is 255. If not set, maximum value will be used.
	MaxInputLength *int32
	// Map of expected collected DTMF values with some real meaning. (Example: if you have multilingual IVR, and option for users to press 1 to enter \"English\" menu, you can define {\"1\":\"English\"}, so the reporting and analysis will be easier). When this option is defined additional variable is present in the scenario. If you set your capture action variable name to myVar, then you will get additional variable myVar_Meaning containing the mapped value for a collected DTMF.
	MappedValues map[string]interface{}
}

// NewDtmfOptions instantiates a new DtmfOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDtmfOptions() *DtmfOptions {
	this := DtmfOptions{}
	return &this
}

// NewDtmfOptionsWithDefaults instantiates a new DtmfOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtmfOptionsWithDefaults() *DtmfOptions {
	this := DtmfOptions{}

	return &this
}

// GetMaxInputLength returns the MaxInputLength field value if set, zero value otherwise.
func (o *DtmfOptions) GetMaxInputLength() int32 {
	if o == nil || IsNil(o.MaxInputLength) {
		var ret int32
		return ret
	}
	return *o.MaxInputLength
}

// GetMaxInputLengthOk returns a tuple with the MaxInputLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfOptions) GetMaxInputLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxInputLength) {
		return nil, false
	}
	return o.MaxInputLength, true
}

// HasMaxInputLength returns a boolean if a field has been set.
func (o *DtmfOptions) HasMaxInputLength() bool {
	if o != nil && !IsNil(o.MaxInputLength) {
		return true
	}

	return false
}

// SetMaxInputLength gets a reference to the given int32 and assigns it to the MaxInputLength field.
func (o *DtmfOptions) SetMaxInputLength(v int32) {
	o.MaxInputLength = &v
}

// GetMappedValues returns the MappedValues field value if set, zero value otherwise.
func (o *DtmfOptions) GetMappedValues() map[string]interface{} {
	if o == nil || IsNil(o.MappedValues) {
		var ret map[string]interface{}
		return ret
	}
	return o.MappedValues
}

// GetMappedValuesOk returns a tuple with the MappedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtmfOptions) GetMappedValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MappedValues) {
		return map[string]interface{}{}, false
	}
	return o.MappedValues, true
}

// HasMappedValues returns a boolean if a field has been set.
func (o *DtmfOptions) HasMappedValues() bool {
	if o != nil && !IsNil(o.MappedValues) {
		return true
	}

	return false
}

// SetMappedValues gets a reference to the given map[string]interface{} and assigns it to the MappedValues field.
func (o *DtmfOptions) SetMappedValues(v map[string]interface{}) {
	o.MappedValues = v
}

func (o DtmfOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtmfOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxInputLength) {
		toSerialize["maxInputLength"] = o.MaxInputLength
	}
	if !IsNil(o.MappedValues) {
		toSerialize["mappedValues"] = o.MappedValues
	}
	return toSerialize, nil
}

type NullableDtmfOptions struct {
	value *DtmfOptions
	isSet bool
}

func (v NullableDtmfOptions) Get() *DtmfOptions {
	return v.value
}

func (v *NullableDtmfOptions) Set(val *DtmfOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDtmfOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDtmfOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtmfOptions(val *DtmfOptions) *NullableDtmfOptions {
	return &NullableDtmfOptions{value: val, isSet: true}
}

func (v NullableDtmfOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtmfOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

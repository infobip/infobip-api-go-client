/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SecurityConfig URL endpoint security configuration.
type SecurityConfig struct {
	BasicSecurityConfig *BasicSecurityConfig
	HmacSecurityConfig  *HmacSecurityConfig
}

// BasicSecurityConfigAsSecurityConfig is a convenience function that returns BasicSecurityConfig wrapped in SecurityConfig
func BasicSecurityConfigAsSecurityConfig(v *BasicSecurityConfig) SecurityConfig {
	return SecurityConfig{
		BasicSecurityConfig: v,
	}
}

// HmacSecurityConfigAsSecurityConfig is a convenience function that returns HmacSecurityConfig wrapped in SecurityConfig
func HmacSecurityConfigAsSecurityConfig(v *HmacSecurityConfig) SecurityConfig {
	return SecurityConfig{
		HmacSecurityConfig: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SecurityConfig) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'BASIC'
	if jsonDict["type"] == "BASIC" {
		// try to unmarshal JSON data into BasicSecurityConfig
		err = json.Unmarshal(data, &dst.BasicSecurityConfig)
		if err == nil {
			jsonBasicSecurityConfig, _ := json.Marshal(dst.BasicSecurityConfig)
			if string(jsonBasicSecurityConfig) == "{}" { // empty struct
				dst.BasicSecurityConfig = nil
			} else {
				return nil // data stored in dst.BasicSecurityConfig, return on the first match
			}
		} else {
			dst.BasicSecurityConfig = nil
		}
	}
	// check if the discriminator value is 'HMAC'
	if jsonDict["type"] == "HMAC" {
		// try to unmarshal JSON data into HmacSecurityConfig
		err = json.Unmarshal(data, &dst.HmacSecurityConfig)
		if err == nil {
			jsonHmacSecurityConfig, _ := json.Marshal(dst.HmacSecurityConfig)
			if string(jsonHmacSecurityConfig) == "{}" { // empty struct
				dst.HmacSecurityConfig = nil
			} else {
				return nil // data stored in dst.HmacSecurityConfig, return on the first match
			}
		} else {
			dst.HmacSecurityConfig = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(SecurityConfig)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecurityConfig) MarshalJSON() ([]byte, error) {
	if src.BasicSecurityConfig != nil {
		return json.Marshal(&src.BasicSecurityConfig)
	}
	if src.HmacSecurityConfig != nil {
		return json.Marshal(&src.HmacSecurityConfig)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *SecurityConfig) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BasicSecurityConfig != nil {
		return obj.BasicSecurityConfig
	}
	if obj.HmacSecurityConfig != nil {
		return obj.HmacSecurityConfig
	}
	// all schemas are nil
	return nil
}

type NullableSecurityConfig struct {
	value *SecurityConfig
	isSet bool
}

func (v NullableSecurityConfig) Get() *SecurityConfig {
	return v.value
}

func (v *NullableSecurityConfig) Set(val *SecurityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfig(val *SecurityConfig) *NullableSecurityConfig {
	return &NullableSecurityConfig{value: val, isSet: true}
}

func (v NullableSecurityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

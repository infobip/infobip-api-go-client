/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the IpDetailResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpDetailResponse{}

// IpDetailResponse struct for IpDetailResponse
type IpDetailResponse struct {
	// Dedicated IP identifier.
	Id string
	// Dedicated IP address.
	Ip    string
	Pools []IpPoolResponse
}

type _IpDetailResponse IpDetailResponse

// NewIpDetailResponse instantiates a new IpDetailResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewIpDetailResponse(id string, ip string, pools []IpPoolResponse) *IpDetailResponse {
	this := IpDetailResponse{}
	this.Id = id
	this.Ip = ip
	this.Pools = pools
	return &this
}

// NewIpDetailResponseWithDefaults instantiates a new IpDetailResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpDetailResponseWithDefaults() *IpDetailResponse {
	this := IpDetailResponse{}

	return &this
}

// GetId returns the Id field value
func (o *IpDetailResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IpDetailResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IpDetailResponse) SetId(v string) {
	o.Id = v
}

// GetIp returns the Ip field value
func (o *IpDetailResponse) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *IpDetailResponse) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *IpDetailResponse) SetIp(v string) {
	o.Ip = v
}

// GetPools returns the Pools field value
func (o *IpDetailResponse) GetPools() []IpPoolResponse {
	if o == nil {
		var ret []IpPoolResponse
		return ret
	}

	return o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value
// and a boolean to check if the value has been set.
func (o *IpDetailResponse) GetPoolsOk() ([]IpPoolResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pools, true
}

// SetPools sets field value
func (o *IpDetailResponse) SetPools(v []IpPoolResponse) {
	o.Pools = v
}

func (o IpDetailResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpDetailResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ip"] = o.Ip
	toSerialize["pools"] = o.Pools
	return toSerialize, nil
}

type NullableIpDetailResponse struct {
	value *IpDetailResponse
	isSet bool
}

func (v NullableIpDetailResponse) Get() *IpDetailResponse {
	return v.value
}

func (v *NullableIpDetailResponse) Set(val *IpDetailResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIpDetailResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIpDetailResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpDetailResponse(val *IpDetailResponse) *NullableIpDetailResponse {
	return &NullableIpDetailResponse{value: val, isSet: true}
}

func (v NullableIpDetailResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpDetailResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CiscoWebexProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiscoWebexProvider{}

// CiscoWebexProvider struct for CiscoWebexProvider
type CiscoWebexProvider struct {
	Type ProviderTrunkType
	// Cisco organization ID.
	CiscoUUID string
}

type _CiscoWebexProvider CiscoWebexProvider

// NewCiscoWebexProvider instantiates a new CiscoWebexProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiscoWebexProvider(ciscoUUID string) *CiscoWebexProvider {
	this := CiscoWebexProvider{}
	this.Type = "CISCO_WEBEX"
	this.CiscoUUID = ciscoUUID
	return &this
}

// NewCiscoWebexProviderWithDefaults instantiates a new CiscoWebexProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiscoWebexProviderWithDefaults() *CiscoWebexProvider {
	this := CiscoWebexProvider{}
	this.Type = "CISCO_WEBEX"
	return &this
}

// GetCiscoUUID returns the CiscoUUID field value
func (o *CiscoWebexProvider) GetCiscoUUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CiscoUUID
}

// GetCiscoUUIDOk returns a tuple with the CiscoUUID field value
// and a boolean to check if the value has been set.
func (o *CiscoWebexProvider) GetCiscoUUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CiscoUUID, true
}

// SetCiscoUUID sets field value
func (o *CiscoWebexProvider) SetCiscoUUID(v string) {
	o.CiscoUUID = v
}

func (o CiscoWebexProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiscoWebexProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["ciscoUUID"] = o.CiscoUUID
	return toSerialize, nil
}

type NullableCiscoWebexProvider struct {
	value *CiscoWebexProvider
	isSet bool
}

func (v NullableCiscoWebexProvider) Get() *CiscoWebexProvider {
	return v.value
}

func (v *NullableCiscoWebexProvider) Set(val *CiscoWebexProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCiscoWebexProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCiscoWebexProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiscoWebexProvider(val *CiscoWebexProvider) *NullableCiscoWebexProvider {
	return &NullableCiscoWebexProvider{value: val, isSet: true}
}

func (v NullableCiscoWebexProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiscoWebexProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

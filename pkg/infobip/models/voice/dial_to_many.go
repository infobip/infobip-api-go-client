/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialToMany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialToMany{}

// DialToMany Dial to Many action performs a call redirection to multiple destinations, joining the userâ€™s call only with the destination that answered the call first. After Dial to Many action the following actions are forbidden: Say, Collect, Dial, Dial to Many, Dial to WebRTC, Dial to SIP trunk, Dial to Conversations, Play, Record and Play from Recording.
type DialToMany struct {
	DialToMany []Numbers
	Options    *DialToManyOptions
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _DialToMany DialToMany

// NewDialToMany instantiates a new DialToMany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialToMany(dialToMany []Numbers) *DialToMany {
	this := DialToMany{}
	this.DialToMany = dialToMany
	return &this
}

// NewDialToManyWithDefaults instantiates a new DialToMany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialToManyWithDefaults() *DialToMany {
	this := DialToMany{}

	return &this
}

// GetDialToMany returns the DialToMany field value
func (o *DialToMany) GetDialToMany() []Numbers {
	if o == nil {
		var ret []Numbers
		return ret
	}

	return o.DialToMany
}

// GetDialToManyOk returns a tuple with the DialToMany field value
// and a boolean to check if the value has been set.
func (o *DialToMany) GetDialToManyOk() ([]Numbers, bool) {
	if o == nil {
		return nil, false
	}
	return o.DialToMany, true
}

// SetDialToMany sets field value
func (o *DialToMany) SetDialToMany(v []Numbers) {
	o.DialToMany = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DialToMany) GetOptions() DialToManyOptions {
	if o == nil || IsNil(o.Options) {
		var ret DialToManyOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToMany) GetOptionsOk() (*DialToManyOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DialToMany) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given DialToManyOptions and assigns it to the Options field.
func (o *DialToMany) SetOptions(v DialToManyOptions) {
	o.Options = &v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *DialToMany) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialToMany) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *DialToMany) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *DialToMany) SetActionId(v int32) {
	o.ActionId = &v
}

func (o DialToMany) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialToMany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dialToMany"] = o.DialToMany
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullableDialToMany struct {
	value *DialToMany
	isSet bool
}

func (v NullableDialToMany) Get() *DialToMany {
	return v.value
}

func (v *NullableDialToMany) Set(val *DialToMany) {
	v.value = val
	v.isSet = true
}

func (v NullableDialToMany) IsSet() bool {
	return v.isSet
}

func (v *NullableDialToMany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialToMany(val *DialToMany) *NullableDialToMany {
	return &NullableDialToMany{value: val, isSet: true}
}

func (v NullableDialToMany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialToMany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MessageHeaderType the model 'MessageHeaderType'
type MessageHeaderType string

// List of MessageHeaderType
const (
	MESSAGEHEADERTYPE_TEXT MessageHeaderType = "TEXT"
)

// All allowed values of MessageHeaderType enum
var AllowedMessageHeaderTypeEnumValues = []MessageHeaderType{
	"TEXT",
}

func (v *MessageHeaderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageHeaderType(value)
	for _, existing := range AllowedMessageHeaderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageHeaderType", value)
}

// NewMessageHeaderTypeFromValue returns a pointer to a valid MessageHeaderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageHeaderTypeFromValue(v string) (*MessageHeaderType, error) {
	ev := MessageHeaderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageHeaderType: valid values are %v", v, AllowedMessageHeaderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageHeaderType) IsValid() bool {
	for _, existing := range AllowedMessageHeaderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageHeaderType value
func (v MessageHeaderType) Ptr() *MessageHeaderType {
	return &v
}

type NullableMessageHeaderType struct {
	value *MessageHeaderType
	isSet bool
}

func (v NullableMessageHeaderType) Get() *MessageHeaderType {
	return v.value
}

func (v *NullableMessageHeaderType) Set(val *MessageHeaderType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageHeaderType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageHeaderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageHeaderType(val *MessageHeaderType) *NullableMessageHeaderType {
	return &NullableMessageHeaderType{value: val, isSet: true}
}

func (v NullableMessageHeaderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageHeaderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

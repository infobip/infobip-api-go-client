/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the UpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRequest{}

// UpdateRequest struct for UpdateRequest
type UpdateRequest struct {
	// Indicates whether to mute or unmute the end user. This action prevents the user from talking.
	Muted *bool
	// Indicates whether to deaf or undeaf the end user. This action prevents the user from hearing the call.
	Deaf *bool
}

// NewUpdateRequest instantiates a new UpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewUpdateRequest() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// NewUpdateRequestWithDefaults instantiates a new UpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestWithDefaults() *UpdateRequest {
	this := UpdateRequest{}

	return &this
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *UpdateRequest) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *UpdateRequest) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *UpdateRequest) SetMuted(v bool) {
	o.Muted = &v
}

// GetDeaf returns the Deaf field value if set, zero value otherwise.
func (o *UpdateRequest) GetDeaf() bool {
	if o == nil || IsNil(o.Deaf) {
		var ret bool
		return ret
	}
	return *o.Deaf
}

// GetDeafOk returns a tuple with the Deaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetDeafOk() (*bool, bool) {
	if o == nil || IsNil(o.Deaf) {
		return nil, false
	}
	return o.Deaf, true
}

// HasDeaf returns a boolean if a field has been set.
func (o *UpdateRequest) HasDeaf() bool {
	if o != nil && !IsNil(o.Deaf) {
		return true
	}

	return false
}

// SetDeaf gets a reference to the given bool and assigns it to the Deaf field.
func (o *UpdateRequest) SetDeaf(v bool) {
	o.Deaf = &v
}

func (o UpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.Deaf) {
		toSerialize["deaf"] = o.Deaf
	}
	return toSerialize, nil
}

type NullableUpdateRequest struct {
	value *UpdateRequest
	isSet bool
}

func (v NullableUpdateRequest) Get() *UpdateRequest {
	return v.value
}

func (v *NullableUpdateRequest) Set(val *UpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequest(val *UpdateRequest) *NullableUpdateRequest {
	return &NullableUpdateRequest{value: val, isSet: true}
}

func (v NullableUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

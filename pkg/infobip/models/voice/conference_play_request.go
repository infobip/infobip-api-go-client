/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ConferencePlayRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferencePlayRequest{}

// ConferencePlayRequest struct for ConferencePlayRequest
type ConferencePlayRequest struct {
	// Number of times the file will be played.
	LoopCount *int32
	Content   PlayContent
}

type _ConferencePlayRequest ConferencePlayRequest

// NewConferencePlayRequest instantiates a new ConferencePlayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewConferencePlayRequest(content PlayContent) *ConferencePlayRequest {
	this := ConferencePlayRequest{}
	this.Content = content
	return &this
}

// NewConferencePlayRequestWithDefaults instantiates a new ConferencePlayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferencePlayRequestWithDefaults() *ConferencePlayRequest {
	this := ConferencePlayRequest{}

	return &this
}

// GetLoopCount returns the LoopCount field value if set, zero value otherwise.
func (o *ConferencePlayRequest) GetLoopCount() int32 {
	if o == nil || IsNil(o.LoopCount) {
		var ret int32
		return ret
	}
	return *o.LoopCount
}

// GetLoopCountOk returns a tuple with the LoopCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetLoopCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LoopCount) {
		return nil, false
	}
	return o.LoopCount, true
}

// HasLoopCount returns a boolean if a field has been set.
func (o *ConferencePlayRequest) HasLoopCount() bool {
	if o != nil && !IsNil(o.LoopCount) {
		return true
	}

	return false
}

// SetLoopCount gets a reference to the given int32 and assigns it to the LoopCount field.
func (o *ConferencePlayRequest) SetLoopCount(v int32) {
	o.LoopCount = &v
}

// GetContent returns the Content field value
func (o *ConferencePlayRequest) GetContent() PlayContent {
	if o == nil {
		var ret PlayContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetContentOk() (*PlayContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ConferencePlayRequest) SetContent(v PlayContent) {
	o.Content = v
}

func (o ConferencePlayRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferencePlayRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoopCount) {
		toSerialize["loopCount"] = o.LoopCount
	}
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

type NullableConferencePlayRequest struct {
	value *ConferencePlayRequest
	isSet bool
}

func (v NullableConferencePlayRequest) Get() *ConferencePlayRequest {
	return v.value
}

func (v *NullableConferencePlayRequest) Set(val *ConferencePlayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConferencePlayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConferencePlayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferencePlayRequest(val *ConferencePlayRequest) *NullableConferencePlayRequest {
	return &NullableConferencePlayRequest{value: val, isSet: true}
}

func (v NullableConferencePlayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferencePlayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

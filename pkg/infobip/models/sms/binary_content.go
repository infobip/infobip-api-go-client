/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the BinaryContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BinaryContent{}

// BinaryContent struct for BinaryContent
type BinaryContent struct {
	// Binary content data coding. The default value is (`0`) for GSM7. Example: (`8`) for  Unicode data.
	DataCoding *int32
	// “Esm_class” parameter. Indicate special message attributes associated with the SMS. Default value is (`0`).
	EsmClass *int32
	// Hexadecimal string. This is the representation of your binary data. Two hex digits represent one byte. They should be separated by the space character.
	Hex string
}

type _BinaryContent BinaryContent

// NewBinaryContent instantiates a new BinaryContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryContent(hex string) *BinaryContent {
	this := BinaryContent{}
	var dataCoding int32 = 0
	this.DataCoding = &dataCoding
	var esmClass int32 = 0
	this.EsmClass = &esmClass
	this.Hex = hex
	return &this
}

// NewBinaryContentWithDefaults instantiates a new BinaryContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryContentWithDefaults() *BinaryContent {
	this := BinaryContent{}
	var dataCoding int32 = 0
	this.DataCoding = &dataCoding
	var esmClass int32 = 0
	this.EsmClass = &esmClass
	return &this
}

// GetDataCoding returns the DataCoding field value if set, zero value otherwise.
func (o *BinaryContent) GetDataCoding() int32 {
	if o == nil || IsNil(o.DataCoding) {
		var ret int32
		return ret
	}
	return *o.DataCoding
}

// GetDataCodingOk returns a tuple with the DataCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetDataCodingOk() (*int32, bool) {
	if o == nil || IsNil(o.DataCoding) {
		return nil, false
	}
	return o.DataCoding, true
}

// HasDataCoding returns a boolean if a field has been set.
func (o *BinaryContent) HasDataCoding() bool {
	if o != nil && !IsNil(o.DataCoding) {
		return true
	}

	return false
}

// SetDataCoding gets a reference to the given int32 and assigns it to the DataCoding field.
func (o *BinaryContent) SetDataCoding(v int32) {
	o.DataCoding = &v
}

// GetEsmClass returns the EsmClass field value if set, zero value otherwise.
func (o *BinaryContent) GetEsmClass() int32 {
	if o == nil || IsNil(o.EsmClass) {
		var ret int32
		return ret
	}
	return *o.EsmClass
}

// GetEsmClassOk returns a tuple with the EsmClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetEsmClassOk() (*int32, bool) {
	if o == nil || IsNil(o.EsmClass) {
		return nil, false
	}
	return o.EsmClass, true
}

// HasEsmClass returns a boolean if a field has been set.
func (o *BinaryContent) HasEsmClass() bool {
	if o != nil && !IsNil(o.EsmClass) {
		return true
	}

	return false
}

// SetEsmClass gets a reference to the given int32 and assigns it to the EsmClass field.
func (o *BinaryContent) SetEsmClass(v int32) {
	o.EsmClass = &v
}

// GetHex returns the Hex field value
func (o *BinaryContent) GetHex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hex
}

// GetHexOk returns a tuple with the Hex field value
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetHexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hex, true
}

// SetHex sets field value
func (o *BinaryContent) SetHex(v string) {
	o.Hex = v
}

func (o BinaryContent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BinaryContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataCoding) {
		toSerialize["dataCoding"] = o.DataCoding
	}
	if !IsNil(o.EsmClass) {
		toSerialize["esmClass"] = o.EsmClass
	}
	toSerialize["hex"] = o.Hex
	return toSerialize, nil
}

type NullableBinaryContent struct {
	value *BinaryContent
	isSet bool
}

func (v NullableBinaryContent) Get() *BinaryContent {
	return v.value
}

func (v *NullableBinaryContent) Set(val *BinaryContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryContent(val *BinaryContent) *NullableBinaryContent {
	return &NullableBinaryContent{value: val, isSet: true}
}

func (v NullableBinaryContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the TrackResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackResponse{}

// TrackResponse struct for TrackResponse
type TrackResponse struct {
	// Tells the type of user event that took place. Possible events: `OPENED`, `CLICKED`, `COMPLAINED`, `UNSUBSCRIBED`.
	NotificationType *string
	// The sending domain used to send the email to the recipient.
	Domain *string
	// Recipient of the email.
	Recipient *string
	// The link the recipient has clicked. This attribute will only be present if the event is of the type `CLICKED`.
	Url *string
	// The time at which the email was sent. Time is in milliseconds.
	SendDateTime *float32
	// The ID that uniquely identifies the message sent to the recipient.
	MessageId *string
	// The ID that uniquely identifies a list of email messages. This is either defined by user in the request or auto generated.
	BulkId *string
	// The callback data sent through the callbackData field in your fully featured Email message.
	CallbackData  *string
	RecipientInfo *RecipientInfo
	GeoLocation   *GeoLocation
}

// NewTrackResponse instantiates a new TrackResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewTrackResponse() *TrackResponse {
	this := TrackResponse{}
	return &this
}

// NewTrackResponseWithDefaults instantiates a new TrackResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackResponseWithDefaults() *TrackResponse {
	this := TrackResponse{}

	return &this
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *TrackResponse) GetNotificationType() string {
	if o == nil || IsNil(o.NotificationType) {
		var ret string
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetNotificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationType) {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *TrackResponse) HasNotificationType() bool {
	if o != nil && !IsNil(o.NotificationType) {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given string and assigns it to the NotificationType field.
func (o *TrackResponse) SetNotificationType(v string) {
	o.NotificationType = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *TrackResponse) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *TrackResponse) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *TrackResponse) SetDomain(v string) {
	o.Domain = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *TrackResponse) GetRecipient() string {
	if o == nil || IsNil(o.Recipient) {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *TrackResponse) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *TrackResponse) SetRecipient(v string) {
	o.Recipient = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TrackResponse) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TrackResponse) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TrackResponse) SetUrl(v string) {
	o.Url = &v
}

// GetSendDateTime returns the SendDateTime field value if set, zero value otherwise.
func (o *TrackResponse) GetSendDateTime() float32 {
	if o == nil || IsNil(o.SendDateTime) {
		var ret float32
		return ret
	}
	return *o.SendDateTime
}

// GetSendDateTimeOk returns a tuple with the SendDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetSendDateTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SendDateTime) {
		return nil, false
	}
	return o.SendDateTime, true
}

// HasSendDateTime returns a boolean if a field has been set.
func (o *TrackResponse) HasSendDateTime() bool {
	if o != nil && !IsNil(o.SendDateTime) {
		return true
	}

	return false
}

// SetSendDateTime gets a reference to the given float32 and assigns it to the SendDateTime field.
func (o *TrackResponse) SetSendDateTime(v float32) {
	o.SendDateTime = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *TrackResponse) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *TrackResponse) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *TrackResponse) SetMessageId(v string) {
	o.MessageId = &v
}

// GetBulkId returns the BulkId field value if set, zero value otherwise.
func (o *TrackResponse) GetBulkId() string {
	if o == nil || IsNil(o.BulkId) {
		var ret string
		return ret
	}
	return *o.BulkId
}

// GetBulkIdOk returns a tuple with the BulkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetBulkIdOk() (*string, bool) {
	if o == nil || IsNil(o.BulkId) {
		return nil, false
	}
	return o.BulkId, true
}

// HasBulkId returns a boolean if a field has been set.
func (o *TrackResponse) HasBulkId() bool {
	if o != nil && !IsNil(o.BulkId) {
		return true
	}

	return false
}

// SetBulkId gets a reference to the given string and assigns it to the BulkId field.
func (o *TrackResponse) SetBulkId(v string) {
	o.BulkId = &v
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *TrackResponse) GetCallbackData() string {
	if o == nil || IsNil(o.CallbackData) {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetCallbackDataOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackData) {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *TrackResponse) HasCallbackData() bool {
	if o != nil && !IsNil(o.CallbackData) {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *TrackResponse) SetCallbackData(v string) {
	o.CallbackData = &v
}

// GetRecipientInfo returns the RecipientInfo field value if set, zero value otherwise.
func (o *TrackResponse) GetRecipientInfo() RecipientInfo {
	if o == nil || IsNil(o.RecipientInfo) {
		var ret RecipientInfo
		return ret
	}
	return *o.RecipientInfo
}

// GetRecipientInfoOk returns a tuple with the RecipientInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetRecipientInfoOk() (*RecipientInfo, bool) {
	if o == nil || IsNil(o.RecipientInfo) {
		return nil, false
	}
	return o.RecipientInfo, true
}

// HasRecipientInfo returns a boolean if a field has been set.
func (o *TrackResponse) HasRecipientInfo() bool {
	if o != nil && !IsNil(o.RecipientInfo) {
		return true
	}

	return false
}

// SetRecipientInfo gets a reference to the given RecipientInfo and assigns it to the RecipientInfo field.
func (o *TrackResponse) SetRecipientInfo(v RecipientInfo) {
	o.RecipientInfo = &v
}

// GetGeoLocation returns the GeoLocation field value if set, zero value otherwise.
func (o *TrackResponse) GetGeoLocation() GeoLocation {
	if o == nil || IsNil(o.GeoLocation) {
		var ret GeoLocation
		return ret
	}
	return *o.GeoLocation
}

// GetGeoLocationOk returns a tuple with the GeoLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetGeoLocationOk() (*GeoLocation, bool) {
	if o == nil || IsNil(o.GeoLocation) {
		return nil, false
	}
	return o.GeoLocation, true
}

// HasGeoLocation returns a boolean if a field has been set.
func (o *TrackResponse) HasGeoLocation() bool {
	if o != nil && !IsNil(o.GeoLocation) {
		return true
	}

	return false
}

// SetGeoLocation gets a reference to the given GeoLocation and assigns it to the GeoLocation field.
func (o *TrackResponse) SetGeoLocation(v GeoLocation) {
	o.GeoLocation = &v
}

func (o TrackResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationType) {
		toSerialize["notificationType"] = o.NotificationType
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.SendDateTime) {
		toSerialize["sendDateTime"] = o.SendDateTime
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.BulkId) {
		toSerialize["bulkId"] = o.BulkId
	}
	if !IsNil(o.CallbackData) {
		toSerialize["callbackData"] = o.CallbackData
	}
	if !IsNil(o.RecipientInfo) {
		toSerialize["recipientInfo"] = o.RecipientInfo
	}
	if !IsNil(o.GeoLocation) {
		toSerialize["geoLocation"] = o.GeoLocation
	}
	return toSerialize, nil
}

type NullableTrackResponse struct {
	value *TrackResponse
	isSet bool
}

func (v NullableTrackResponse) Get() *TrackResponse {
	return v.value
}

func (v *NullableTrackResponse) Set(val *TrackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackResponse(val *TrackResponse) *NullableTrackResponse {
	return &NullableTrackResponse{value: val, isSet: true}
}

func (v NullableTrackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the AddSuppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddSuppression{}

// AddSuppression Suppression.
type AddSuppression struct {
	// Domain name from which suppressions will be added.
	DomainName string
	// Email addresses to add to suppression list.
	EmailAddress []string
	Type         ApiAddSuppressionType
}

type _AddSuppression AddSuppression

// NewAddSuppression instantiates a new AddSuppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAddSuppression(domainName string, emailAddress []string, type_ ApiAddSuppressionType) *AddSuppression {
	this := AddSuppression{}
	this.DomainName = domainName
	this.EmailAddress = emailAddress
	this.Type = type_
	return &this
}

// NewAddSuppressionWithDefaults instantiates a new AddSuppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSuppressionWithDefaults() *AddSuppression {
	this := AddSuppression{}

	return &this
}

// GetDomainName returns the DomainName field value
func (o *AddSuppression) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *AddSuppression) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *AddSuppression) SetDomainName(v string) {
	o.DomainName = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *AddSuppression) GetEmailAddress() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *AddSuppression) GetEmailAddressOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *AddSuppression) SetEmailAddress(v []string) {
	o.EmailAddress = v
}

// GetType returns the Type field value
func (o *AddSuppression) GetType() ApiAddSuppressionType {
	if o == nil {
		var ret ApiAddSuppressionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddSuppression) GetTypeOk() (*ApiAddSuppressionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AddSuppression) SetType(v ApiAddSuppressionType) {
	o.Type = v
}

func (o AddSuppression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddSuppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domainName"] = o.DomainName
	toSerialize["emailAddress"] = o.EmailAddress
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAddSuppression struct {
	value *AddSuppression
	isSet bool
}

func (v NullableAddSuppression) Get() *AddSuppression {
	return v.value
}

func (v *NullableAddSuppression) Set(val *AddSuppression) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSuppression(val *AddSuppression) *NullableAddSuppression {
	return &NullableAddSuppression{value: val, isSet: true}
}

func (v NullableAddSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

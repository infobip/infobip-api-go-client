/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// MachineDetection Machine Detection action detects answering machines at the beginning of the call. This action sets `machineAnswered` variable upon completion to `true`  or `false`. Machine Detection introduces a delay of approximately 4s. This is the minimum time needed for machine detection. Machine Detection action has to be followed by a condition action that uses the value of `machineAnswered` for branching into the 'human answered' block and the 'answering machine answered' block. The 'answering machine' block can have a Say/Play/PlayFromRecording action or a Hangup action. If answering machine is detected, and a Say/Play/Play from Recording action is up next - the voice message will start playing into the voice mail only after the answering machine is finished with its greeting.
type MachineDetection string

// List of MachineDetection
const (
	MACHINEDETECTION_MACHINE_DETECTION MachineDetection = "machineDetection"
)

// All allowed values of MachineDetection enum
var AllowedMachineDetectionEnumValues = []MachineDetection{
	"machineDetection",
}

func (v *MachineDetection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MachineDetection(value)
	for _, existing := range AllowedMachineDetectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MachineDetection", value)
}

// NewMachineDetectionFromValue returns a pointer to a valid MachineDetection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineDetectionFromValue(v string) (*MachineDetection, error) {
	ev := MachineDetection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineDetection: valid values are %v", v, AllowedMachineDetectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineDetection) IsValid() bool {
	for _, existing := range AllowedMachineDetectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineDetection value
func (v MachineDetection) Ptr() *MachineDetection {
	return &v
}

type NullableMachineDetection struct {
	value *MachineDetection
	isSet bool
}

func (v NullableMachineDetection) Get() *MachineDetection {
	return v.value
}

func (v *NullableMachineDetection) Set(val *MachineDetection) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineDetection) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineDetection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineDetection(val *MachineDetection) *NullableMachineDetection {
	return &NullableMachineDetection{value: val, isSet: true}
}

func (v NullableMachineDetection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineDetection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

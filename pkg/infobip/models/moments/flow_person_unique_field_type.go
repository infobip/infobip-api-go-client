/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FlowPersonUniqueFieldType Type of unique ID
type FlowPersonUniqueFieldType string

// List of FlowPersonUniqueFieldType
const (
	FLOWPERSONUNIQUEFIELDTYPE_EMAIL               FlowPersonUniqueFieldType = "EMAIL"
	FLOWPERSONUNIQUEFIELDTYPE_PHONE               FlowPersonUniqueFieldType = "PHONE"
	FLOWPERSONUNIQUEFIELDTYPE_FACEBOOK            FlowPersonUniqueFieldType = "FACEBOOK"
	FLOWPERSONUNIQUEFIELDTYPE_LINE                FlowPersonUniqueFieldType = "LINE"
	FLOWPERSONUNIQUEFIELDTYPE_APPLE_BUSINESS_CHAT FlowPersonUniqueFieldType = "APPLE_BUSINESS_CHAT"
)

// All allowed values of FlowPersonUniqueFieldType enum
var AllowedFlowPersonUniqueFieldTypeEnumValues = []FlowPersonUniqueFieldType{
	"EMAIL",
	"PHONE",
	"FACEBOOK",
	"LINE",
	"APPLE_BUSINESS_CHAT",
}

func (v *FlowPersonUniqueFieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowPersonUniqueFieldType(value)
	for _, existing := range AllowedFlowPersonUniqueFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowPersonUniqueFieldType", value)
}

// NewFlowPersonUniqueFieldTypeFromValue returns a pointer to a valid FlowPersonUniqueFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowPersonUniqueFieldTypeFromValue(v string) (*FlowPersonUniqueFieldType, error) {
	ev := FlowPersonUniqueFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowPersonUniqueFieldType: valid values are %v", v, AllowedFlowPersonUniqueFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowPersonUniqueFieldType) IsValid() bool {
	for _, existing := range AllowedFlowPersonUniqueFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowPersonUniqueFieldType value
func (v FlowPersonUniqueFieldType) Ptr() *FlowPersonUniqueFieldType {
	return &v
}

type NullableFlowPersonUniqueFieldType struct {
	value *FlowPersonUniqueFieldType
	isSet bool
}

func (v NullableFlowPersonUniqueFieldType) Get() *FlowPersonUniqueFieldType {
	return v.value
}

func (v *NullableFlowPersonUniqueFieldType) Set(val *FlowPersonUniqueFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowPersonUniqueFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowPersonUniqueFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowPersonUniqueFieldType(val *FlowPersonUniqueFieldType) *NullableFlowPersonUniqueFieldType {
	return &NullableFlowPersonUniqueFieldType{value: val, isSet: true}
}

func (v NullableFlowPersonUniqueFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowPersonUniqueFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// RecordingLocation the model 'RecordingLocation'
type RecordingLocation string

// List of RecordingLocation
const (
	RECORDINGLOCATION_SAO_PAULO      RecordingLocation = "SAO_PAULO"
	RECORDINGLOCATION_BOGOTA         RecordingLocation = "BOGOTA"
	RECORDINGLOCATION_FRANKFURT      RecordingLocation = "FRANKFURT"
	RECORDINGLOCATION_JOHANNESBURG   RecordingLocation = "JOHANNESBURG"
	RECORDINGLOCATION_JOHANNESBURG_1 RecordingLocation = "JOHANNESBURG_1"
	RECORDINGLOCATION_NEW_YORK       RecordingLocation = "NEW_YORK"
	RECORDINGLOCATION_PORTLAND       RecordingLocation = "PORTLAND"
	RECORDINGLOCATION_MOSCOW         RecordingLocation = "MOSCOW"
	RECORDINGLOCATION_SINGAPORE      RecordingLocation = "SINGAPORE"
	RECORDINGLOCATION_ISTANBUL       RecordingLocation = "ISTANBUL"
	RECORDINGLOCATION_KUALA_LUMPUR   RecordingLocation = "KUALA_LUMPUR"
	RECORDINGLOCATION_JAKARTA        RecordingLocation = "JAKARTA"
	RECORDINGLOCATION_MUMBAI         RecordingLocation = "MUMBAI"
	RECORDINGLOCATION_HONG_KONG_1    RecordingLocation = "HONG_KONG_1"
	RECORDINGLOCATION_HONG_KONG      RecordingLocation = "HONG_KONG"
	RECORDINGLOCATION_RIYADH         RecordingLocation = "RIYADH"
	RECORDINGLOCATION_CHENNAI        RecordingLocation = "CHENNAI"
)

// All allowed values of RecordingLocation enum
var AllowedRecordingLocationEnumValues = []RecordingLocation{
	"SAO_PAULO",
	"BOGOTA",
	"FRANKFURT",
	"JOHANNESBURG",
	"JOHANNESBURG_1",
	"NEW_YORK",
	"PORTLAND",
	"MOSCOW",
	"SINGAPORE",
	"ISTANBUL",
	"KUALA_LUMPUR",
	"JAKARTA",
	"MUMBAI",
	"HONG_KONG_1",
	"HONG_KONG",
	"RIYADH",
	"CHENNAI",
}

func (v *RecordingLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordingLocation(value)
	for _, existing := range AllowedRecordingLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordingLocation", value)
}

// NewRecordingLocationFromValue returns a pointer to a valid RecordingLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordingLocationFromValue(v string) (*RecordingLocation, error) {
	ev := RecordingLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordingLocation: valid values are %v", v, AllowedRecordingLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordingLocation) IsValid() bool {
	for _, existing := range AllowedRecordingLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordingLocation value
func (v RecordingLocation) Ptr() *RecordingLocation {
	return &v
}

type NullableRecordingLocation struct {
	value *RecordingLocation
	isSet bool
}

func (v NullableRecordingLocation) Get() *RecordingLocation {
	return v.value
}

func (v *NullableRecordingLocation) Set(val *RecordingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingLocation(val *RecordingLocation) *NullableRecordingLocation {
	return &NullableRecordingLocation{value: val, isSet: true}
}

func (v NullableRecordingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

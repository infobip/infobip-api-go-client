/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// ParticipantState Participant state.
type ParticipantState string

// List of ParticipantState
const (
	PARTICIPANTSTATE_JOINING ParticipantState = "JOINING"
	PARTICIPANTSTATE_JOINED  ParticipantState = "JOINED"
	PARTICIPANTSTATE_LEFT    ParticipantState = "LEFT"
)

// All allowed values of ParticipantState enum
var AllowedParticipantStateEnumValues = []ParticipantState{
	"JOINING",
	"JOINED",
	"LEFT",
}

func (v *ParticipantState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParticipantState(value)
	for _, existing := range AllowedParticipantStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParticipantState", value)
}

// NewParticipantStateFromValue returns a pointer to a valid ParticipantState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParticipantStateFromValue(v string) (*ParticipantState, error) {
	ev := ParticipantState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParticipantState: valid values are %v", v, AllowedParticipantStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParticipantState) IsValid() bool {
	for _, existing := range AllowedParticipantStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParticipantState value
func (v ParticipantState) Ptr() *ParticipantState {
	return &v
}

type NullableParticipantState struct {
	value *ParticipantState
	isSet bool
}

func (v NullableParticipantState) Get() *ParticipantState {
	return v.value
}

func (v *NullableParticipantState) Set(val *ParticipantState) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantState) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantState(val *ParticipantState) *NullableParticipantState {
	return &NullableParticipantState{value: val, isSet: true}
}

func (v NullableParticipantState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

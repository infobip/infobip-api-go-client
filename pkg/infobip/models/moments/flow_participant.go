/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the FlowParticipant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowParticipant{}

// FlowParticipant Participant to be added to Flow campaign.
type FlowParticipant struct {
	IdentifyBy FlowPersonUniqueField
	// Flow variables to assign to the participant when it is added to the flow.
	Variables map[string]interface{}
	Person    *FlowPerson
}

type _FlowParticipant FlowParticipant

// NewFlowParticipant instantiates a new FlowParticipant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewFlowParticipant(identifyBy FlowPersonUniqueField) *FlowParticipant {
	this := FlowParticipant{}
	this.IdentifyBy = identifyBy
	return &this
}

// NewFlowParticipantWithDefaults instantiates a new FlowParticipant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowParticipantWithDefaults() *FlowParticipant {
	this := FlowParticipant{}

	return &this
}

// GetIdentifyBy returns the IdentifyBy field value
func (o *FlowParticipant) GetIdentifyBy() FlowPersonUniqueField {
	if o == nil {
		var ret FlowPersonUniqueField
		return ret
	}

	return o.IdentifyBy
}

// GetIdentifyByOk returns a tuple with the IdentifyBy field value
// and a boolean to check if the value has been set.
func (o *FlowParticipant) GetIdentifyByOk() (*FlowPersonUniqueField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentifyBy, true
}

// SetIdentifyBy sets field value
func (o *FlowParticipant) SetIdentifyBy(v FlowPersonUniqueField) {
	o.IdentifyBy = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *FlowParticipant) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowParticipant) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *FlowParticipant) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *FlowParticipant) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *FlowParticipant) GetPerson() FlowPerson {
	if o == nil || IsNil(o.Person) {
		var ret FlowPerson
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowParticipant) GetPersonOk() (*FlowPerson, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *FlowParticipant) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given FlowPerson and assigns it to the Person field.
func (o *FlowParticipant) SetPerson(v FlowPerson) {
	o.Person = &v
}

func (o FlowParticipant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowParticipant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifyBy"] = o.IdentifyBy
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	return toSerialize, nil
}

type NullableFlowParticipant struct {
	value *FlowParticipant
	isSet bool
}

func (v NullableFlowParticipant) Get() *FlowParticipant {
	return v.value
}

func (v *NullableFlowParticipant) Set(val *FlowParticipant) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowParticipant(val *FlowParticipant) *NullableFlowParticipant {
	return &NullableFlowParticipant{value: val, isSet: true}
}

func (v NullableFlowParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

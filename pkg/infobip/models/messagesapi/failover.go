/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Failover type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Failover{}

// Failover Configuration of a single failover step
type Failover struct {
	Channel OutboundMessageChannel
	// Sender for channel specified above.
	Sender         string
	Content        *MessageContent
	ValidityPeriod *ValidityPeriod
}

type _Failover Failover

// NewFailover instantiates a new Failover object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailover(channel OutboundMessageChannel, sender string) *Failover {
	this := Failover{}
	this.Channel = channel
	this.Sender = sender
	return &this
}

// NewFailoverWithDefaults instantiates a new Failover object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverWithDefaults() *Failover {
	this := Failover{}
	return &this
}

// GetChannel returns the Channel field value
func (o *Failover) GetChannel() OutboundMessageChannel {
	if o == nil {
		var ret OutboundMessageChannel
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *Failover) GetChannelOk() (*OutboundMessageChannel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *Failover) SetChannel(v OutboundMessageChannel) {
	o.Channel = v
}

// GetSender returns the Sender field value
func (o *Failover) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *Failover) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *Failover) SetSender(v string) {
	o.Sender = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Failover) GetContent() MessageContent {
	if o == nil || IsNil(o.Content) {
		var ret MessageContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Failover) GetContentOk() (*MessageContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Failover) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given MessageContent and assigns it to the Content field.
func (o *Failover) SetContent(v MessageContent) {
	o.Content = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *Failover) GetValidityPeriod() ValidityPeriod {
	if o == nil || IsNil(o.ValidityPeriod) {
		var ret ValidityPeriod
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Failover) GetValidityPeriodOk() (*ValidityPeriod, bool) {
	if o == nil || IsNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *Failover) HasValidityPeriod() bool {
	if o != nil && !IsNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given ValidityPeriod and assigns it to the ValidityPeriod field.
func (o *Failover) SetValidityPeriod(v ValidityPeriod) {
	o.ValidityPeriod = &v
}

func (o Failover) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Failover) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channel"] = o.Channel
	toSerialize["sender"] = o.Sender
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	return toSerialize, nil
}

type NullableFailover struct {
	value *Failover
	isSet bool
}

func (v NullableFailover) Get() *Failover {
	return v.value
}

func (v *NullableFailover) Set(val *Failover) {
	v.value = val
	v.isSet = true
}

func (v NullableFailover) IsSet() bool {
	return v.isSet
}

func (v *NullableFailover) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailover(val *Failover) *NullableFailover {
	return &NullableFailover{value: val, isSet: true}
}

func (v NullableFailover) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailover) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

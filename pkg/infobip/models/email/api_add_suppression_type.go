/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"
	"fmt"
)

// ApiAddSuppressionType Type of suppression.
type ApiAddSuppressionType string

// List of ApiAddSuppressionType
const (
	APIADDSUPPRESSIONTYPE_BOUNCE    ApiAddSuppressionType = "BOUNCE"
	APIADDSUPPRESSIONTYPE_COMPLAINT ApiAddSuppressionType = "COMPLAINT"
)

// All allowed values of ApiAddSuppressionType enum
var AllowedApiAddSuppressionTypeEnumValues = []ApiAddSuppressionType{
	"BOUNCE",
	"COMPLAINT",
}

func (v *ApiAddSuppressionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiAddSuppressionType(value)
	for _, existing := range AllowedApiAddSuppressionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiAddSuppressionType", value)
}

// NewApiAddSuppressionTypeFromValue returns a pointer to a valid ApiAddSuppressionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiAddSuppressionTypeFromValue(v string) (*ApiAddSuppressionType, error) {
	ev := ApiAddSuppressionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiAddSuppressionType: valid values are %v", v, AllowedApiAddSuppressionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiAddSuppressionType) IsValid() bool {
	for _, existing := range AllowedApiAddSuppressionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiAddSuppressionType value
func (v ApiAddSuppressionType) Ptr() *ApiAddSuppressionType {
	return &v
}

type NullableApiAddSuppressionType struct {
	value *ApiAddSuppressionType
	isSet bool
}

func (v NullableApiAddSuppressionType) Get() *ApiAddSuppressionType {
	return v.value
}

func (v *NullableApiAddSuppressionType) Set(val *ApiAddSuppressionType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAddSuppressionType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAddSuppressionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAddSuppressionType(val *ApiAddSuppressionType) *NullableApiAddSuppressionType {
	return &NullableApiAddSuppressionType{value: val, isSet: true}
}

func (v NullableApiAddSuppressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAddSuppressionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

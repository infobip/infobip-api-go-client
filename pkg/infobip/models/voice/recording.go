/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Recording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Recording{}

// Recording struct for Recording
type Recording struct {
	// Call ID.
	CallId    *string
	Endpoint  CallEndpoint
	Direction *CallDirection
	// Call recording files.
	Files  []RecordingFile
	Status *RecordingStatus
	// Reason for recording failure.
	Reason *string
	// Calls Configuration ID.
	CallsConfigurationId *string
	Platform             *Platform
	// Date and time when the (first) call recording started.
	StartTime *Time
	// Date and time when the (last) call recording ended.
	EndTime *Time
}

type _Recording Recording

// NewRecording instantiates a new Recording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewRecording(endpoint CallEndpoint) *Recording {
	this := Recording{}
	this.Endpoint = endpoint
	return &this
}

// NewRecordingWithDefaults instantiates a new Recording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingWithDefaults() *Recording {
	this := Recording{}

	return &this
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *Recording) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *Recording) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *Recording) SetCallId(v string) {
	o.CallId = &v
}

// GetEndpoint returns the Endpoint field value
func (o *Recording) GetEndpoint() CallEndpoint {
	if o == nil {
		var ret CallEndpoint
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *Recording) GetEndpointOk() (*CallEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *Recording) SetEndpoint(v CallEndpoint) {
	o.Endpoint = v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *Recording) GetDirection() CallDirection {
	if o == nil || IsNil(o.Direction) {
		var ret CallDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetDirectionOk() (*CallDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *Recording) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given CallDirection and assigns it to the Direction field.
func (o *Recording) SetDirection(v CallDirection) {
	o.Direction = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Recording) GetFiles() []RecordingFile {
	if o == nil || IsNil(o.Files) {
		var ret []RecordingFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetFilesOk() ([]RecordingFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Recording) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []RecordingFile and assigns it to the Files field.
func (o *Recording) SetFiles(v []RecordingFile) {
	o.Files = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Recording) GetStatus() RecordingStatus {
	if o == nil || IsNil(o.Status) {
		var ret RecordingStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetStatusOk() (*RecordingStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Recording) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RecordingStatus and assigns it to the Status field.
func (o *Recording) SetStatus(v RecordingStatus) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Recording) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Recording) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Recording) SetReason(v string) {
	o.Reason = &v
}

// GetCallsConfigurationId returns the CallsConfigurationId field value if set, zero value otherwise.
func (o *Recording) GetCallsConfigurationId() string {
	if o == nil || IsNil(o.CallsConfigurationId) {
		var ret string
		return ret
	}
	return *o.CallsConfigurationId
}

// GetCallsConfigurationIdOk returns a tuple with the CallsConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetCallsConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallsConfigurationId) {
		return nil, false
	}
	return o.CallsConfigurationId, true
}

// HasCallsConfigurationId returns a boolean if a field has been set.
func (o *Recording) HasCallsConfigurationId() bool {
	if o != nil && !IsNil(o.CallsConfigurationId) {
		return true
	}

	return false
}

// SetCallsConfigurationId gets a reference to the given string and assigns it to the CallsConfigurationId field.
func (o *Recording) SetCallsConfigurationId(v string) {
	o.CallsConfigurationId = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *Recording) GetPlatform() Platform {
	if o == nil || IsNil(o.Platform) {
		var ret Platform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetPlatformOk() (*Platform, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *Recording) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given Platform and assigns it to the Platform field.
func (o *Recording) SetPlatform(v Platform) {
	o.Platform = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Recording) GetStartTime() Time {
	if o == nil || IsNil(o.StartTime) {
		var ret Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetStartTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Recording) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given Time and assigns it to the StartTime field.
func (o *Recording) SetStartTime(v Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Recording) GetEndTime() Time {
	if o == nil || IsNil(o.EndTime) {
		var ret Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recording) GetEndTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Recording) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given Time and assigns it to the EndTime field.
func (o *Recording) SetEndTime(v Time) {
	o.EndTime = &v
}

func (o Recording) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Recording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallId) {
		toSerialize["callId"] = o.CallId
	}
	toSerialize["endpoint"] = o.Endpoint
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.CallsConfigurationId) {
		toSerialize["callsConfigurationId"] = o.CallsConfigurationId
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	return toSerialize, nil
}

type NullableRecording struct {
	value *Recording
	isSet bool
}

func (v NullableRecording) Get() *Recording {
	return v.value
}

func (v *NullableRecording) Set(val *Recording) {
	v.value = val
	v.isSet = true
}

func (v NullableRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecording(val *Recording) *NullableRecording {
	return &NullableRecording{value: val, isSet: true}
}

func (v NullableRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

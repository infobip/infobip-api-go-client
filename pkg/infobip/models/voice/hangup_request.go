/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the HangupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HangupRequest{}

// HangupRequest Hangup request.
type HangupRequest struct {
	ErrorCode *ErrorCode
}

// NewHangupRequest instantiates a new HangupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewHangupRequest() *HangupRequest {
	this := HangupRequest{}
	return &this
}

// NewHangupRequestWithDefaults instantiates a new HangupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHangupRequestWithDefaults() *HangupRequest {
	this := HangupRequest{}

	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *HangupRequest) GetErrorCode() ErrorCode {
	if o == nil || IsNil(o.ErrorCode) {
		var ret ErrorCode
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HangupRequest) GetErrorCodeOk() (*ErrorCode, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *HangupRequest) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given ErrorCode and assigns it to the ErrorCode field.
func (o *HangupRequest) SetErrorCode(v ErrorCode) {
	o.ErrorCode = &v
}

func (o HangupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HangupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableHangupRequest struct {
	value *HangupRequest
	isSet bool
}

func (v NullableHangupRequest) Get() *HangupRequest {
	return v.value
}

func (v *NullableHangupRequest) Set(val *HangupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHangupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHangupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHangupRequest(val *HangupRequest) *NullableHangupRequest {
	return &NullableHangupRequest{value: val, isSet: true}
}

func (v NullableHangupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHangupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

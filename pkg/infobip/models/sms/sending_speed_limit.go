/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SendingSpeedLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendingSpeedLimit{}

// SendingSpeedLimit Limits the send speed when sending messages in bulk to deliver messages over a longer period of time. You may wish to use this to allow your systems or agents to handle large amounts of incoming traffic, e.g., if you are expecting recipients to follow through with a call-to-action option from a message you sent. Not setting a send speed limit can overwhelm your resources with incoming traffic.
type SendingSpeedLimit struct {
	// The number of messages to be sent per timeUnit. By default, the system sends messages as fast as the infrastructure allows. Use this parameter to adapt sending capacity to your needs. The system is only able to work against its maximum capacity for ambitious message batches.
	Amount   int32
	TimeUnit *SpeedLimitTimeUnit
}

type _SendingSpeedLimit SendingSpeedLimit

// NewSendingSpeedLimit instantiates a new SendingSpeedLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendingSpeedLimit(amount int32) *SendingSpeedLimit {
	this := SendingSpeedLimit{}
	this.Amount = amount
	var timeUnit SpeedLimitTimeUnit = SPEEDLIMITTIMEUNIT_MINUTE
	this.TimeUnit = &timeUnit
	return &this
}

// NewSendingSpeedLimitWithDefaults instantiates a new SendingSpeedLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendingSpeedLimitWithDefaults() *SendingSpeedLimit {
	this := SendingSpeedLimit{}
	var timeUnit SpeedLimitTimeUnit = SPEEDLIMITTIMEUNIT_MINUTE
	this.TimeUnit = &timeUnit
	return &this
}

// GetAmount returns the Amount field value
func (o *SendingSpeedLimit) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SendingSpeedLimit) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SendingSpeedLimit) SetAmount(v int32) {
	o.Amount = v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *SendingSpeedLimit) GetTimeUnit() SpeedLimitTimeUnit {
	if o == nil || IsNil(o.TimeUnit) {
		var ret SpeedLimitTimeUnit
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendingSpeedLimit) GetTimeUnitOk() (*SpeedLimitTimeUnit, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *SendingSpeedLimit) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given SpeedLimitTimeUnit and assigns it to the TimeUnit field.
func (o *SendingSpeedLimit) SetTimeUnit(v SpeedLimitTimeUnit) {
	o.TimeUnit = &v
}

func (o SendingSpeedLimit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendingSpeedLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.TimeUnit) {
		toSerialize["timeUnit"] = o.TimeUnit
	}
	return toSerialize, nil
}

type NullableSendingSpeedLimit struct {
	value *SendingSpeedLimit
	isSet bool
}

func (v NullableSendingSpeedLimit) Get() *SendingSpeedLimit {
	return v.value
}

func (v *NullableSendingSpeedLimit) Set(val *SendingSpeedLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSendingSpeedLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSendingSpeedLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendingSpeedLimit(val *SendingSpeedLimit) *NullableSendingSpeedLimit {
	return &NullableSendingSpeedLimit{value: val, isSet: true}
}

func (v NullableSendingSpeedLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendingSpeedLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

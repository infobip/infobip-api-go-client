/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallApi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallApi{}

// CallApi Call API Action performs an HTTP request to a clientâ€™s endpoint, and (if told to) processes the response data. If collectResponse is set, the system will attempt to parse the response from the server. Our platform needs to be able to make HTTP requests to the specified endpoint.
type CallApi struct {
	// The URL to target
	Request string
	Options CallApiOptions
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _CallApi CallApi

// NewCallApi instantiates a new CallApi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallApi(request string, options CallApiOptions) *CallApi {
	this := CallApi{}
	this.Request = request
	this.Options = options
	return &this
}

// NewCallApiWithDefaults instantiates a new CallApi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallApiWithDefaults() *CallApi {
	this := CallApi{}

	return &this
}

// GetRequest returns the Request field value
func (o *CallApi) GetRequest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *CallApi) GetRequestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *CallApi) SetRequest(v string) {
	o.Request = v
}

// GetOptions returns the Options field value
func (o *CallApi) GetOptions() CallApiOptions {
	if o == nil {
		var ret CallApiOptions
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *CallApi) GetOptionsOk() (*CallApiOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *CallApi) SetOptions(v CallApiOptions) {
	o.Options = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *CallApi) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallApi) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *CallApi) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *CallApi) SetActionId(v int32) {
	o.ActionId = &v
}

func (o CallApi) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallApi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request"] = o.Request
	toSerialize["options"] = o.Options
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullableCallApi struct {
	value *CallApi
	isSet bool
}

func (v NullableCallApi) Get() *CallApi {
	return v.value
}

func (v *NullableCallApi) Set(val *CallApi) {
	v.value = val
	v.isSet = true
}

func (v NullableCallApi) IsSet() bool {
	return v.isSet
}

func (v *NullableCallApi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallApi(val *CallApi) *NullableCallApi {
	return &NullableCallApi{value: val, isSet: true}
}

func (v NullableCallApi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallApi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

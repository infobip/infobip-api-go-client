/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// InboundEvent Incoming messages
type InboundEvent struct {
	MoEvent                   *MoEvent
	InboundTypingStartedEvent *InboundTypingStartedEvent
	InboundTypingStoppedEvent *InboundTypingStoppedEvent
}

// MoEventAsInboundEvent is a convenience function that returns MoEvent wrapped in InboundEvent
func MoEventAsInboundEvent(v *MoEvent) InboundEvent {
	return InboundEvent{
		MoEvent: v,
	}
}

// InboundTypingStartedEventAsInboundEvent is a convenience function that returns InboundTypingStartedEvent wrapped in InboundEvent
func InboundTypingStartedEventAsInboundEvent(v *InboundTypingStartedEvent) InboundEvent {
	return InboundEvent{
		InboundTypingStartedEvent: v,
	}
}

// InboundTypingStoppedEventAsInboundEvent is a convenience function that returns InboundTypingStoppedEvent wrapped in InboundEvent
func InboundTypingStoppedEventAsInboundEvent(v *InboundTypingStoppedEvent) InboundEvent {
	return InboundEvent{
		InboundTypingStoppedEvent: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *InboundEvent) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'MO'
	if jsonDict["event"] == "MO" {
		// try to unmarshal JSON data into MoEvent
		err = json.Unmarshal(data, &dst.MoEvent)
		if err == nil {
			jsonMoEvent, _ := json.Marshal(dst.MoEvent)
			if string(jsonMoEvent) == "{}" { // empty struct
				dst.MoEvent = nil
			} else {
				return nil // data stored in dst.MoEvent, return on the first match
			}
		} else {
			dst.MoEvent = nil
		}
	}
	// check if the discriminator value is 'TYPING_STARTED'
	if jsonDict["event"] == "TYPING_STARTED" {
		// try to unmarshal JSON data into InboundTypingStartedEvent
		err = json.Unmarshal(data, &dst.InboundTypingStartedEvent)
		if err == nil {
			jsonInboundTypingStartedEvent, _ := json.Marshal(dst.InboundTypingStartedEvent)
			if string(jsonInboundTypingStartedEvent) == "{}" { // empty struct
				dst.InboundTypingStartedEvent = nil
			} else {
				return nil // data stored in dst.InboundTypingStartedEvent, return on the first match
			}
		} else {
			dst.InboundTypingStartedEvent = nil
		}
	}
	// check if the discriminator value is 'TYPING_STOPPED'
	if jsonDict["event"] == "TYPING_STOPPED" {
		// try to unmarshal JSON data into InboundTypingStoppedEvent
		err = json.Unmarshal(data, &dst.InboundTypingStoppedEvent)
		if err == nil {
			jsonInboundTypingStoppedEvent, _ := json.Marshal(dst.InboundTypingStoppedEvent)
			if string(jsonInboundTypingStoppedEvent) == "{}" { // empty struct
				dst.InboundTypingStoppedEvent = nil
			} else {
				return nil // data stored in dst.InboundTypingStoppedEvent, return on the first match
			}
		} else {
			dst.InboundTypingStoppedEvent = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(InboundEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InboundEvent) MarshalJSON() ([]byte, error) {
	if src.MoEvent != nil {
		return json.Marshal(&src.MoEvent)
	}
	if src.InboundTypingStartedEvent != nil {
		return json.Marshal(&src.InboundTypingStartedEvent)
	}
	if src.InboundTypingStoppedEvent != nil {
		return json.Marshal(&src.InboundTypingStoppedEvent)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *InboundEvent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MoEvent != nil {
		return obj.MoEvent
	}
	if obj.InboundTypingStartedEvent != nil {
		return obj.InboundTypingStartedEvent
	}
	if obj.InboundTypingStoppedEvent != nil {
		return obj.InboundTypingStoppedEvent
	}
	// all schemas are nil
	return nil
}

type NullableInboundEvent struct {
	value *InboundEvent
	isSet bool
}

func (v NullableInboundEvent) Get() *InboundEvent {
	return v.value
}

func (v *NullableInboundEvent) Set(val *InboundEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundEvent(val *InboundEvent) *NullableInboundEvent {
	return &NullableInboundEvent{value: val, isSet: true}
}

func (v NullableInboundEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

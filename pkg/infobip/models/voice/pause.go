/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Pause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pause{}

// Pause Pause action pauses execution of the IVR scenario for the provided duration.
type Pause struct {
	// the amount to wait in seconds, from 0 (exclusive) to 5 (inclusive)
	Pause float64
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _Pause Pause

// NewPause instantiates a new Pause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPause(pause float64) *Pause {
	this := Pause{}
	this.Pause = pause
	return &this
}

// NewPauseWithDefaults instantiates a new Pause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseWithDefaults() *Pause {
	this := Pause{}

	return &this
}

// GetPause returns the Pause field value
func (o *Pause) GetPause() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Pause
}

// GetPauseOk returns a tuple with the Pause field value
// and a boolean to check if the value has been set.
func (o *Pause) GetPauseOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pause, true
}

// SetPause sets field value
func (o *Pause) SetPause(v float64) {
	o.Pause = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *Pause) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pause) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *Pause) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *Pause) SetActionId(v int32) {
	o.ActionId = &v
}

func (o Pause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pause"] = o.Pause
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullablePause struct {
	value *Pause
	isSet bool
}

func (v NullablePause) Get() *Pause {
	return v.value
}

func (v *NullablePause) Set(val *Pause) {
	v.value = val
	v.isSet = true
}

func (v NullablePause) IsSet() bool {
	return v.isSet
}

func (v *NullablePause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePause(val *Pause) *NullablePause {
	return &NullablePause{value: val, isSet: true}
}

func (v NullablePause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

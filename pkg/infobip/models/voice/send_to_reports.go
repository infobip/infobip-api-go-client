/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SendToReports Choose if you want to show DTMF inputs in Voice reports and logs. Options are: ALWAYS (always send - default value), MASKED (send masked - xxxx will be shown in reports and logs), NEVER (don't send - DTMF inputs will not be shown in reports and logs).
type SendToReports string

// List of SendToReports
const (
	SENDTOREPORTS_ALWAYS SendToReports = "ALWAYS"
	SENDTOREPORTS_MASKED SendToReports = "MASKED"
	SENDTOREPORTS_NEVER  SendToReports = "NEVER"
)

// All allowed values of SendToReports enum
var AllowedSendToReportsEnumValues = []SendToReports{
	"ALWAYS",
	"MASKED",
	"NEVER",
}

func (v *SendToReports) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SendToReports(value)
	for _, existing := range AllowedSendToReportsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SendToReports", value)
}

// NewSendToReportsFromValue returns a pointer to a valid SendToReports
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSendToReportsFromValue(v string) (*SendToReports, error) {
	ev := SendToReports(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SendToReports: valid values are %v", v, AllowedSendToReportsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SendToReports) IsValid() bool {
	for _, existing := range AllowedSendToReportsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SendToReports value
func (v SendToReports) Ptr() *SendToReports {
	return &v
}

type NullableSendToReports struct {
	value *SendToReports
	isSet bool
}

func (v NullableSendToReports) Get() *SendToReports {
	return v.value
}

func (v *NullableSendToReports) Set(val *SendToReports) {
	v.value = val
	v.isSet = true
}

func (v NullableSendToReports) IsSet() bool {
	return v.isSet
}

func (v *NullableSendToReports) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendToReports(val *SendToReports) *NullableSendToReports {
	return &NullableSendToReports{value: val, isSet: true}
}

func (v NullableSendToReports) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendToReports) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

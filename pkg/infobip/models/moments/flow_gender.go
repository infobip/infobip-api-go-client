/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FlowGender Person's gender.
type FlowGender string

// List of FlowGender
const (
	FLOWGENDER_MALE   FlowGender = "MALE"
	FLOWGENDER_FEMALE FlowGender = "FEMALE"
)

// All allowed values of FlowGender enum
var AllowedFlowGenderEnumValues = []FlowGender{
	"MALE",
	"FEMALE",
}

func (v *FlowGender) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowGender(value)
	for _, existing := range AllowedFlowGenderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowGender", value)
}

// NewFlowGenderFromValue returns a pointer to a valid FlowGender
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowGenderFromValue(v string) (*FlowGender, error) {
	ev := FlowGender(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowGender: valid values are %v", v, AllowedFlowGenderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowGender) IsValid() bool {
	for _, existing := range AllowedFlowGenderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowGender value
func (v FlowGender) Ptr() *FlowGender {
	return &v
}

type NullableFlowGender struct {
	value *FlowGender
	isSet bool
}

func (v NullableFlowGender) Get() *FlowGender {
	return v.value
}

func (v *NullableFlowGender) Set(val *FlowGender) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowGender) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowGender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowGender(val *FlowGender) *NullableFlowGender {
	return &NullableFlowGender{value: val, isSet: true}
}

func (v NullableFlowGender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowGender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

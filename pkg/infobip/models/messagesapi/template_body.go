/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// TemplateBody Body of a template message.
type TemplateBody struct {
	TemplateCarouselBody *TemplateCarouselBody
	TemplateTextBody     *TemplateTextBody
}

// TemplateCarouselBodyAsTemplateBody is a convenience function that returns TemplateCarouselBody wrapped in TemplateBody
func TemplateCarouselBodyAsTemplateBody(v *TemplateCarouselBody) TemplateBody {
	return TemplateBody{
		TemplateCarouselBody: v,
	}
}

// TemplateTextBodyAsTemplateBody is a convenience function that returns TemplateTextBody wrapped in TemplateBody
func TemplateTextBodyAsTemplateBody(v *TemplateTextBody) TemplateBody {
	return TemplateBody{
		TemplateTextBody: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TemplateBody) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'CAROUSEL'
	if jsonDict["type"] == "CAROUSEL" {
		// try to unmarshal JSON data into TemplateCarouselBody
		err = json.Unmarshal(data, &dst.TemplateCarouselBody)
		if err == nil {
			jsonTemplateCarouselBody, _ := json.Marshal(dst.TemplateCarouselBody)
			if string(jsonTemplateCarouselBody) == "{}" { // empty struct
				dst.TemplateCarouselBody = nil
			} else {
				return nil // data stored in dst.TemplateCarouselBody, return on the first match
			}
		} else {
			dst.TemplateCarouselBody = nil
		}
	}
	// check if the discriminator value is 'TEXT'
	if jsonDict["type"] == "TEXT" {
		// try to unmarshal JSON data into TemplateTextBody
		err = json.Unmarshal(data, &dst.TemplateTextBody)
		if err == nil {
			jsonTemplateTextBody, _ := json.Marshal(dst.TemplateTextBody)
			if string(jsonTemplateTextBody) == "{}" { // empty struct
				dst.TemplateTextBody = nil
			} else {
				return nil // data stored in dst.TemplateTextBody, return on the first match
			}
		} else {
			dst.TemplateTextBody = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(TemplateBody)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateBody) MarshalJSON() ([]byte, error) {
	if src.TemplateCarouselBody != nil {
		return json.Marshal(&src.TemplateCarouselBody)
	}
	if src.TemplateTextBody != nil {
		return json.Marshal(&src.TemplateTextBody)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *TemplateBody) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TemplateCarouselBody != nil {
		return obj.TemplateCarouselBody
	}
	if obj.TemplateTextBody != nil {
		return obj.TemplateTextBody
	}
	// all schemas are nil
	return nil
}

type NullableTemplateBody struct {
	value *TemplateBody
	isSet bool
}

func (v NullableTemplateBody) Get() *TemplateBody {
	return v.value
}

func (v *NullableTemplateBody) Set(val *TemplateBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateBody(val *TemplateBody) *NullableTemplateBody {
	return &NullableTemplateBody{value: val, isSet: true}
}

func (v NullableTemplateBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

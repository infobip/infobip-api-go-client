/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FlowAddFlowParticipantStatus Processing status of the participant.
type FlowAddFlowParticipantStatus string

// List of FlowAddFlowParticipantStatus
const (
	FLOWADDFLOWPARTICIPANTSTATUS_PENDING  FlowAddFlowParticipantStatus = "PENDING"
	FLOWADDFLOWPARTICIPANTSTATUS_REJECTED FlowAddFlowParticipantStatus = "REJECTED"
	FLOWADDFLOWPARTICIPANTSTATUS_ACCEPTED FlowAddFlowParticipantStatus = "ACCEPTED"
)

// All allowed values of FlowAddFlowParticipantStatus enum
var AllowedFlowAddFlowParticipantStatusEnumValues = []FlowAddFlowParticipantStatus{
	"PENDING",
	"REJECTED",
	"ACCEPTED",
}

func (v *FlowAddFlowParticipantStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowAddFlowParticipantStatus(value)
	for _, existing := range AllowedFlowAddFlowParticipantStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowAddFlowParticipantStatus", value)
}

// NewFlowAddFlowParticipantStatusFromValue returns a pointer to a valid FlowAddFlowParticipantStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowAddFlowParticipantStatusFromValue(v string) (*FlowAddFlowParticipantStatus, error) {
	ev := FlowAddFlowParticipantStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowAddFlowParticipantStatus: valid values are %v", v, AllowedFlowAddFlowParticipantStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowAddFlowParticipantStatus) IsValid() bool {
	for _, existing := range AllowedFlowAddFlowParticipantStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowAddFlowParticipantStatus value
func (v FlowAddFlowParticipantStatus) Ptr() *FlowAddFlowParticipantStatus {
	return &v
}

type NullableFlowAddFlowParticipantStatus struct {
	value *FlowAddFlowParticipantStatus
	isSet bool
}

func (v NullableFlowAddFlowParticipantStatus) Get() *FlowAddFlowParticipantStatus {
	return v.value
}

func (v *NullableFlowAddFlowParticipantStatus) Set(val *FlowAddFlowParticipantStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowAddFlowParticipantStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowAddFlowParticipantStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowAddFlowParticipantStatus(val *FlowAddFlowParticipantStatus) *NullableFlowAddFlowParticipantStatus {
	return &NullableFlowAddFlowParticipantStatus{value: val, isSet: true}
}

func (v NullableFlowAddFlowParticipantStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowAddFlowParticipantStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

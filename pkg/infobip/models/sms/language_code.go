/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// LanguageCode Language code for the correct character set. Possible values: `TR` for Turkish, `ES` for Spanish, `PT` for Portuguese, or `AUTODETECT` to let platform select the character set based on message content.
type LanguageCode string

// List of LanguageCode
const (
	LANGUAGECODE_NONE       LanguageCode = "NONE"
	LANGUAGECODE_TR         LanguageCode = "TR"
	LANGUAGECODE_ES         LanguageCode = "ES"
	LANGUAGECODE_PT         LanguageCode = "PT"
	LANGUAGECODE_AUTODETECT LanguageCode = "AUTODETECT"
)

// All allowed values of LanguageCode enum
var AllowedLanguageCodeEnumValues = []LanguageCode{
	"NONE",
	"TR",
	"ES",
	"PT",
	"AUTODETECT",
}

func (v *LanguageCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LanguageCode(value)
	for _, existing := range AllowedLanguageCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LanguageCode", value)
}

// NewLanguageCodeFromValue returns a pointer to a valid LanguageCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLanguageCodeFromValue(v string) (*LanguageCode, error) {
	ev := LanguageCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LanguageCode: valid values are %v", v, AllowedLanguageCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LanguageCode) IsValid() bool {
	for _, existing := range AllowedLanguageCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LanguageCode value
func (v LanguageCode) Ptr() *LanguageCode {
	return &v
}

type NullableLanguageCode struct {
	value *LanguageCode
	isSet bool
}

func (v NullableLanguageCode) Get() *LanguageCode {
	return v.value
}

func (v *NullableLanguageCode) Set(val *LanguageCode) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageCode) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageCode(val *LanguageCode) *NullableLanguageCode {
	return &NullableLanguageCode{value: val, isSet: true}
}

func (v NullableLanguageCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

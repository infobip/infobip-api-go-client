/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsDestination An array of destination objects for where messages are being sent. A valid destination is required.
type SmsDestination struct {
	// The ID that uniquely identifies the message sent.
	MessageId *string `json:"messageId,omitempty"`
	// Message destination address. Addresses must be in international format (Example: `41793026727`).
	To string `json:"to"`
}

// NewSmsDestination instantiates a new SmsDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsDestination(to string) *SmsDestination {
	this := SmsDestination{}
	this.To = to
	return &this
}

// NewSmsDestinationWithDefaults instantiates a new SmsDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsDestinationWithDefaults() *SmsDestination {
	this := SmsDestination{}
	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *SmsDestination) GetMessageId() string {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsDestination) GetMessageIdOk() (*string, bool) {
	if o == nil || o.MessageId == nil {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *SmsDestination) HasMessageId() bool {
	if o != nil && o.MessageId != nil {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *SmsDestination) SetMessageId(v string) {
	o.MessageId = &v
}

// GetTo returns the To field value
func (o *SmsDestination) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SmsDestination) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SmsDestination) SetTo(v string) {
	o.To = v
}

func (o SmsDestination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MessageId != nil {
		toSerialize["messageId"] = o.MessageId
	}
	if true {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableSmsDestination struct {
	value *SmsDestination
	isSet bool
}

func (v NullableSmsDestination) Get() *SmsDestination {
	return v.value
}

func (v *NullableSmsDestination) Set(val *SmsDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsDestination(val *SmsDestination) *NullableSmsDestination {
	return &NullableSmsDestination{value: val, isSet: true}
}

func (v NullableSmsDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

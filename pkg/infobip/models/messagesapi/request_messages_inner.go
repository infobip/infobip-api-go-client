/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
	"gopkg.in/validator.v2"
)

// RequestMessagesInner - struct for RequestMessagesInner
type RequestMessagesInner struct {
	Message         *Message
	TemplateMessage *TemplateMessage
}

// MessageAsRequestMessagesInner is a convenience function that returns Message wrapped in RequestMessagesInner
func MessageAsRequestMessagesInner(v *Message) RequestMessagesInner {
	return RequestMessagesInner{
		Message: v,
	}
}

// TemplateMessageAsRequestMessagesInner is a convenience function that returns TemplateMessage wrapped in RequestMessagesInner
func TemplateMessageAsRequestMessagesInner(v *TemplateMessage) RequestMessagesInner {
	return RequestMessagesInner{
		TemplateMessage: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RequestMessagesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Message
	err = NewStrictDecoder(data).Decode(&dst.Message)
	if err == nil {
		jsonMessage, _ := json.Marshal(dst.Message)
		if string(jsonMessage) == "{}" { // empty struct
			dst.Message = nil
		} else {
			if err = validator.Validate(dst.Message); err != nil {
				dst.Message = nil
			} else {
				match++
			}
		}
	} else {
		dst.Message = nil
	}

	// try to unmarshal data into TemplateMessage
	err = NewStrictDecoder(data).Decode(&dst.TemplateMessage)
	if err == nil {
		jsonTemplateMessage, _ := json.Marshal(dst.TemplateMessage)
		if string(jsonTemplateMessage) == "{}" { // empty struct
			dst.TemplateMessage = nil
		} else {
			if err = validator.Validate(dst.TemplateMessage); err != nil {
				dst.TemplateMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.TemplateMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Message = nil
		dst.TemplateMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RequestMessagesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RequestMessagesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RequestMessagesInner) MarshalJSON() ([]byte, error) {
	if src.Message != nil {
		return json.Marshal(&src.Message)
	}

	if src.TemplateMessage != nil {
		return json.Marshal(&src.TemplateMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RequestMessagesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Message != nil {
		return obj.Message
	}

	if obj.TemplateMessage != nil {
		return obj.TemplateMessage
	}

	// all schemas are nil
	return nil
}

type NullableRequestMessagesInner struct {
	value *RequestMessagesInner
	isSet bool
}

func (v NullableRequestMessagesInner) Get() *RequestMessagesInner {
	return v.value
}

func (v *NullableRequestMessagesInner) Set(val *RequestMessagesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestMessagesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestMessagesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestMessagesInner(val *RequestMessagesInner) *NullableRequestMessagesInner {
	return &NullableRequestMessagesInner{value: val, isSet: true}
}

func (v NullableRequestMessagesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestMessagesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

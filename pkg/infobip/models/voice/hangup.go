/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// Hangup Hangup action marks the end of the IVR flow execution, leading to the call actually being hung up.
type Hangup string

// List of Hangup
const (
	HANGUP_HANGUP Hangup = "hangup"
)

// All allowed values of Hangup enum
var AllowedHangupEnumValues = []Hangup{
	"hangup",
}

func (v *Hangup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Hangup(value)
	for _, existing := range AllowedHangupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Hangup", value)
}

// NewHangupFromValue returns a pointer to a valid Hangup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHangupFromValue(v string) (*Hangup, error) {
	ev := Hangup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Hangup: valid values are %v", v, AllowedHangupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Hangup) IsValid() bool {
	for _, existing := range AllowedHangupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Hangup value
func (v Hangup) Ptr() *Hangup {
	return &v
}

type NullableHangup struct {
	value *Hangup
	isSet bool
}

func (v NullableHangup) Get() *Hangup {
	return v.value
}

func (v *NullableHangup) Set(val *Hangup) {
	v.value = val
	v.isSet = true
}

func (v NullableHangup) IsSet() bool {
	return v.isSet
}

func (v *NullableHangup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHangup(val *Hangup) *NullableHangup {
	return &NullableHangup{value: val, isSet: true}
}

func (v NullableHangup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHangup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

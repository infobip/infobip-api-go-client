/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FormsStatus Form status
type FormsStatus string

// List of FormsStatus
const (
	FORMSSTATUS_ACTIVE   FormsStatus = "ACTIVE"
	FORMSSTATUS_DISABLED FormsStatus = "DISABLED"
	FORMSSTATUS_DRAFT    FormsStatus = "DRAFT"
)

// All allowed values of FormsStatus enum
var AllowedFormsStatusEnumValues = []FormsStatus{
	"ACTIVE",
	"DISABLED",
	"DRAFT",
}

func (v *FormsStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormsStatus(value)
	for _, existing := range AllowedFormsStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormsStatus", value)
}

// NewFormsStatusFromValue returns a pointer to a valid FormsStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormsStatusFromValue(v string) (*FormsStatus, error) {
	ev := FormsStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormsStatus: valid values are %v", v, AllowedFormsStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormsStatus) IsValid() bool {
	for _, existing := range AllowedFormsStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormsStatus value
func (v FormsStatus) Ptr() *FormsStatus {
	return &v
}

type NullableFormsStatus struct {
	value *FormsStatus
	isSet bool
}

func (v NullableFormsStatus) Get() *FormsStatus {
	return v.value
}

func (v *NullableFormsStatus) Set(val *FormsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFormsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFormsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormsStatus(val *FormsStatus) *NullableFormsStatus {
	return &NullableFormsStatus{value: val, isSet: true}
}

func (v NullableFormsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

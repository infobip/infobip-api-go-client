/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// InboundMoEventChannel Messaging channel using which the message was sent.
type InboundMoEventChannel string

// List of InboundMoEventChannel
const (
	INBOUNDMOEVENTCHANNEL_SMS          InboundMoEventChannel = "SMS"
	INBOUNDMOEVENTCHANNEL_MMS          InboundMoEventChannel = "MMS"
	INBOUNDMOEVENTCHANNEL_WHATSAPP     InboundMoEventChannel = "WHATSAPP"
	INBOUNDMOEVENTCHANNEL_VIBER_BM     InboundMoEventChannel = "VIBER_BM"
	INBOUNDMOEVENTCHANNEL_VIBER_BOT    InboundMoEventChannel = "VIBER_BOT"
	INBOUNDMOEVENTCHANNEL_RCS          InboundMoEventChannel = "RCS"
	INBOUNDMOEVENTCHANNEL_APPLE_MB     InboundMoEventChannel = "APPLE_MB"
	INBOUNDMOEVENTCHANNEL_INSTAGRAM_DM InboundMoEventChannel = "INSTAGRAM_DM"
	INBOUNDMOEVENTCHANNEL_MESSENGER    InboundMoEventChannel = "MESSENGER"
)

// All allowed values of InboundMoEventChannel enum
var AllowedInboundMoEventChannelEnumValues = []InboundMoEventChannel{
	"SMS",
	"MMS",
	"WHATSAPP",
	"VIBER_BM",
	"VIBER_BOT",
	"RCS",
	"APPLE_MB",
	"INSTAGRAM_DM",
	"MESSENGER",
}

func (v *InboundMoEventChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InboundMoEventChannel(value)
	for _, existing := range AllowedInboundMoEventChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InboundMoEventChannel", value)
}

// NewInboundMoEventChannelFromValue returns a pointer to a valid InboundMoEventChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInboundMoEventChannelFromValue(v string) (*InboundMoEventChannel, error) {
	ev := InboundMoEventChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InboundMoEventChannel: valid values are %v", v, AllowedInboundMoEventChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InboundMoEventChannel) IsValid() bool {
	for _, existing := range AllowedInboundMoEventChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InboundMoEventChannel value
func (v InboundMoEventChannel) Ptr() *InboundMoEventChannel {
	return &v
}

type NullableInboundMoEventChannel struct {
	value *InboundMoEventChannel
	isSet bool
}

func (v NullableInboundMoEventChannel) Get() *InboundMoEventChannel {
	return v.value
}

func (v *NullableInboundMoEventChannel) Set(val *InboundMoEventChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundMoEventChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundMoEventChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundMoEventChannel(val *InboundMoEventChannel) *NullableInboundMoEventChannel {
	return &NullableInboundMoEventChannel{value: val, isSet: true}
}

func (v NullableInboundMoEventChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundMoEventChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

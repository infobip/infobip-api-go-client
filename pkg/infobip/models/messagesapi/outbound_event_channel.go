/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// OutboundEventChannel Messaging channel used for sending an event.
type OutboundEventChannel string

// List of OutboundEventChannel
const (
	OUTBOUNDEVENTCHANNEL_APPLE_MB OutboundEventChannel = "APPLE_MB"
)

// All allowed values of OutboundEventChannel enum
var AllowedOutboundEventChannelEnumValues = []OutboundEventChannel{
	"APPLE_MB",
}

func (v *OutboundEventChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboundEventChannel(value)
	for _, existing := range AllowedOutboundEventChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboundEventChannel", value)
}

// NewOutboundEventChannelFromValue returns a pointer to a valid OutboundEventChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboundEventChannelFromValue(v string) (*OutboundEventChannel, error) {
	ev := OutboundEventChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboundEventChannel: valid values are %v", v, AllowedOutboundEventChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboundEventChannel) IsValid() bool {
	for _, existing := range AllowedOutboundEventChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboundEventChannel value
func (v OutboundEventChannel) Ptr() *OutboundEventChannel {
	return &v
}

type NullableOutboundEventChannel struct {
	value *OutboundEventChannel
	isSet bool
}

func (v NullableOutboundEventChannel) Get() *OutboundEventChannel {
	return v.value
}

func (v *NullableOutboundEventChannel) Set(val *OutboundEventChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundEventChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundEventChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundEventChannel(val *OutboundEventChannel) *NullableOutboundEventChannel {
	return &NullableOutboundEventChannel{value: val, isSet: true}
}

func (v NullableOutboundEventChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundEventChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

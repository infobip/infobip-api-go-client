/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// DtmfType DTMF type.
type DtmfType string

// List of DtmfType
const (
	DTMFTYPE_RFC2833 DtmfType = "RFC2833"
	DTMFTYPE_INBAND  DtmfType = "INBAND"
)

// All allowed values of DtmfType enum
var AllowedDtmfTypeEnumValues = []DtmfType{
	"RFC2833",
	"INBAND",
}

func (v *DtmfType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DtmfType(value)
	for _, existing := range AllowedDtmfTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DtmfType", value)
}

// NewDtmfTypeFromValue returns a pointer to a valid DtmfType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDtmfTypeFromValue(v string) (*DtmfType, error) {
	ev := DtmfType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DtmfType: valid values are %v", v, AllowedDtmfTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DtmfType) IsValid() bool {
	for _, existing := range AllowedDtmfTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DtmfType value
func (v DtmfType) Ptr() *DtmfType {
	return &v
}

type NullableDtmfType struct {
	value *DtmfType
	isSet bool
}

func (v NullableDtmfType) Get() *DtmfType {
	return v.value
}

func (v *NullableDtmfType) Set(val *DtmfType) {
	v.value = val
	v.isSet = true
}

func (v NullableDtmfType) IsSet() bool {
	return v.isSet
}

func (v *NullableDtmfType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtmfType(val *DtmfType) *NullableDtmfType {
	return &NullableDtmfType{value: val, isSet: true}
}

func (v NullableDtmfType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtmfType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

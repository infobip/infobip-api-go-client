/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ForEach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForEach{}

// ForEach For-each action is a control statement that executes a block of code for each of the values within the supplied list. The Supplied list of values can be static or dynamic (defined as user variable).
type ForEach struct {
	// Variable name that will be used inside the loop to represent single value from supplied list of values.
	ForEach string
	// Variable name that will be used inside the loop to represent single value from supplied list of values.
	In string
	// Variable name that will be used inside the loop to represent single value from supplied list of values.
	Delimiter *string
	// Array of IVR actions defining scenario. NOTE: Answering Machine Detection, Call Recording and Speech Recognition (used for Capture action) are add-on features. To enable these add-ons, please contact our [sales](https://www.infobip.com/contact) organisation.
	Do []ScriptInner
}

type _ForEach ForEach

// NewForEach instantiates a new ForEach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewForEach(forEach string, in string, do []ScriptInner) *ForEach {
	this := ForEach{}
	this.ForEach = forEach
	this.In = in
	this.Do = do
	return &this
}

// NewForEachWithDefaults instantiates a new ForEach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForEachWithDefaults() *ForEach {
	this := ForEach{}

	return &this
}

// GetForEach returns the ForEach field value
func (o *ForEach) GetForEach() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForEach
}

// GetForEachOk returns a tuple with the ForEach field value
// and a boolean to check if the value has been set.
func (o *ForEach) GetForEachOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForEach, true
}

// SetForEach sets field value
func (o *ForEach) SetForEach(v string) {
	o.ForEach = v
}

// GetIn returns the In field value
func (o *ForEach) GetIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.In
}

// GetInOk returns a tuple with the In field value
// and a boolean to check if the value has been set.
func (o *ForEach) GetInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.In, true
}

// SetIn sets field value
func (o *ForEach) SetIn(v string) {
	o.In = v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ForEach) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForEach) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ForEach) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ForEach) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetDo returns the Do field value
func (o *ForEach) GetDo() []ScriptInner {
	if o == nil {
		var ret []ScriptInner
		return ret
	}

	return o.Do
}

// GetDoOk returns a tuple with the Do field value
// and a boolean to check if the value has been set.
func (o *ForEach) GetDoOk() ([]ScriptInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Do, true
}

// SetDo sets field value
func (o *ForEach) SetDo(v []ScriptInner) {
	o.Do = v
}

func (o ForEach) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForEach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["for-each"] = o.ForEach
	toSerialize["in"] = o.In
	if !IsNil(o.Delimiter) {
		toSerialize["delimiter"] = o.Delimiter
	}
	toSerialize["do"] = o.Do
	return toSerialize, nil
}

type NullableForEach struct {
	value *ForEach
	isSet bool
}

func (v NullableForEach) Get() *ForEach {
	return v.value
}

func (v *NullableForEach) Set(val *ForEach) {
	v.value = val
	v.isSet = true
}

func (v NullableForEach) IsSet() bool {
	return v.isSet
}

func (v *NullableForEach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForEach(val *ForEach) *NullableForEach {
	return &NullableForEach{value: val, isSet: true}
}

func (v NullableForEach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForEach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

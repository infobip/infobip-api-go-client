/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// TemplateButtonType the model 'TemplateButtonType'
type TemplateButtonType string

// List of TemplateButtonType
const (
	TEMPLATEBUTTONTYPE_QUICK_REPLY   TemplateButtonType = "QUICK_REPLY"
	TEMPLATEBUTTONTYPE_OPEN_URL      TemplateButtonType = "OPEN_URL"
	TEMPLATEBUTTONTYPE_PHONE_NUMBER  TemplateButtonType = "PHONE_NUMBER"
	TEMPLATEBUTTONTYPE_FLOW          TemplateButtonType = "FLOW"
	TEMPLATEBUTTONTYPE_COPY_CODE     TemplateButtonType = "COPY_CODE"
	TEMPLATEBUTTONTYPE_CATALOG       TemplateButtonType = "CATALOG"
	TEMPLATEBUTTONTYPE_MULTI_PRODUCT TemplateButtonType = "MULTI_PRODUCT"
)

// All allowed values of TemplateButtonType enum
var AllowedTemplateButtonTypeEnumValues = []TemplateButtonType{
	"QUICK_REPLY",
	"OPEN_URL",
	"PHONE_NUMBER",
	"FLOW",
	"COPY_CODE",
	"CATALOG",
	"MULTI_PRODUCT",
}

func (v *TemplateButtonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemplateButtonType(value)
	for _, existing := range AllowedTemplateButtonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemplateButtonType", value)
}

// NewTemplateButtonTypeFromValue returns a pointer to a valid TemplateButtonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemplateButtonTypeFromValue(v string) (*TemplateButtonType, error) {
	ev := TemplateButtonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemplateButtonType: valid values are %v", v, AllowedTemplateButtonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemplateButtonType) IsValid() bool {
	for _, existing := range AllowedTemplateButtonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemplateButtonType value
func (v TemplateButtonType) Ptr() *TemplateButtonType {
	return &v
}

type NullableTemplateButtonType struct {
	value *TemplateButtonType
	isSet bool
}

func (v NullableTemplateButtonType) Get() *TemplateButtonType {
	return v.value
}

func (v *NullableTemplateButtonType) Set(val *TemplateButtonType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateButtonType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateButtonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateButtonType(val *TemplateButtonType) *NullableTemplateButtonType {
	return &NullableTemplateButtonType{value: val, isSet: true}
}

func (v NullableTemplateButtonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateButtonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the GoToOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoToOptions{}

// GoToOptions struct for GoToOptions
type GoToOptions struct {
	// Maximum number of times goto can jump to specified action. Valid values are from 1 to 100.
	GoToLimit *int32
	// Name of the variable which counts passes through goto action
	CountVariable *string
}

// NewGoToOptions instantiates a new GoToOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewGoToOptions() *GoToOptions {
	this := GoToOptions{}
	return &this
}

// NewGoToOptionsWithDefaults instantiates a new GoToOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoToOptionsWithDefaults() *GoToOptions {
	this := GoToOptions{}

	return &this
}

// GetGoToLimit returns the GoToLimit field value if set, zero value otherwise.
func (o *GoToOptions) GetGoToLimit() int32 {
	if o == nil || IsNil(o.GoToLimit) {
		var ret int32
		return ret
	}
	return *o.GoToLimit
}

// GetGoToLimitOk returns a tuple with the GoToLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoToOptions) GetGoToLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.GoToLimit) {
		return nil, false
	}
	return o.GoToLimit, true
}

// HasGoToLimit returns a boolean if a field has been set.
func (o *GoToOptions) HasGoToLimit() bool {
	if o != nil && !IsNil(o.GoToLimit) {
		return true
	}

	return false
}

// SetGoToLimit gets a reference to the given int32 and assigns it to the GoToLimit field.
func (o *GoToOptions) SetGoToLimit(v int32) {
	o.GoToLimit = &v
}

// GetCountVariable returns the CountVariable field value if set, zero value otherwise.
func (o *GoToOptions) GetCountVariable() string {
	if o == nil || IsNil(o.CountVariable) {
		var ret string
		return ret
	}
	return *o.CountVariable
}

// GetCountVariableOk returns a tuple with the CountVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoToOptions) GetCountVariableOk() (*string, bool) {
	if o == nil || IsNil(o.CountVariable) {
		return nil, false
	}
	return o.CountVariable, true
}

// HasCountVariable returns a boolean if a field has been set.
func (o *GoToOptions) HasCountVariable() bool {
	if o != nil && !IsNil(o.CountVariable) {
		return true
	}

	return false
}

// SetCountVariable gets a reference to the given string and assigns it to the CountVariable field.
func (o *GoToOptions) SetCountVariable(v string) {
	o.CountVariable = &v
}

func (o GoToOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoToOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GoToLimit) {
		toSerialize["goToLimit"] = o.GoToLimit
	}
	if !IsNil(o.CountVariable) {
		toSerialize["countVariable"] = o.CountVariable
	}
	return toSerialize, nil
}

type NullableGoToOptions struct {
	value *GoToOptions
	isSet bool
}

func (v NullableGoToOptions) Get() *GoToOptions {
	return v.value
}

func (v *NullableGoToOptions) Set(val *GoToOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableGoToOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableGoToOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoToOptions(val *GoToOptions) *NullableGoToOptions {
	return &NullableGoToOptions{value: val, isSet: true}
}

func (v NullableGoToOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoToOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

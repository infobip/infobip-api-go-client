/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ConferenceAndCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceAndCall{}

// ConferenceAndCall struct for ConferenceAndCall
type ConferenceAndCall struct {
	Conference *Conference
	Call       *Call
}

// NewConferenceAndCall instantiates a new ConferenceAndCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewConferenceAndCall() *ConferenceAndCall {
	this := ConferenceAndCall{}
	return &this
}

// NewConferenceAndCallWithDefaults instantiates a new ConferenceAndCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceAndCallWithDefaults() *ConferenceAndCall {
	this := ConferenceAndCall{}

	return &this
}

// GetConference returns the Conference field value if set, zero value otherwise.
func (o *ConferenceAndCall) GetConference() Conference {
	if o == nil || IsNil(o.Conference) {
		var ret Conference
		return ret
	}
	return *o.Conference
}

// GetConferenceOk returns a tuple with the Conference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceAndCall) GetConferenceOk() (*Conference, bool) {
	if o == nil || IsNil(o.Conference) {
		return nil, false
	}
	return o.Conference, true
}

// HasConference returns a boolean if a field has been set.
func (o *ConferenceAndCall) HasConference() bool {
	if o != nil && !IsNil(o.Conference) {
		return true
	}

	return false
}

// SetConference gets a reference to the given Conference and assigns it to the Conference field.
func (o *ConferenceAndCall) SetConference(v Conference) {
	o.Conference = &v
}

// GetCall returns the Call field value if set, zero value otherwise.
func (o *ConferenceAndCall) GetCall() Call {
	if o == nil || IsNil(o.Call) {
		var ret Call
		return ret
	}
	return *o.Call
}

// GetCallOk returns a tuple with the Call field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceAndCall) GetCallOk() (*Call, bool) {
	if o == nil || IsNil(o.Call) {
		return nil, false
	}
	return o.Call, true
}

// HasCall returns a boolean if a field has been set.
func (o *ConferenceAndCall) HasCall() bool {
	if o != nil && !IsNil(o.Call) {
		return true
	}

	return false
}

// SetCall gets a reference to the given Call and assigns it to the Call field.
func (o *ConferenceAndCall) SetCall(v Call) {
	o.Call = &v
}

func (o ConferenceAndCall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceAndCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conference) {
		toSerialize["conference"] = o.Conference
	}
	if !IsNil(o.Call) {
		toSerialize["call"] = o.Call
	}
	return toSerialize, nil
}

type NullableConferenceAndCall struct {
	value *ConferenceAndCall
	isSet bool
}

func (v NullableConferenceAndCall) Get() *ConferenceAndCall {
	return v.value
}

func (v *NullableConferenceAndCall) Set(val *ConferenceAndCall) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceAndCall) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceAndCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceAndCall(val *ConferenceAndCall) *NullableConferenceAndCall {
	return &NullableConferenceAndCall{value: val, isSet: true}
}

func (v NullableConferenceAndCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceAndCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CountryList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryList{}

// CountryList struct for CountryList
type CountryList struct {
	// List of countries.
	Countries []Country
}

// NewCountryList instantiates a new CountryList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCountryList() *CountryList {
	this := CountryList{}
	return &this
}

// NewCountryListWithDefaults instantiates a new CountryList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryListWithDefaults() *CountryList {
	this := CountryList{}

	return &this
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *CountryList) GetCountries() []Country {
	if o == nil || IsNil(o.Countries) {
		var ret []Country
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryList) GetCountriesOk() ([]Country, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *CountryList) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []Country and assigns it to the Countries field.
func (o *CountryList) SetCountries(v []Country) {
	o.Countries = v
}

func (o CountryList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	return toSerialize, nil
}

type NullableCountryList struct {
	value *CountryList
	isSet bool
}

func (v NullableCountryList) Get() *CountryList {
	return v.value
}

func (v *NullableCountryList) Set(val *CountryList) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryList) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryList(val *CountryList) *NullableCountryList {
	return &NullableCountryList{value: val, isSet: true}
}

func (v NullableCountryList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the IfThenElse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IfThenElse{}

// IfThenElse If-Then-Else action provides simple branching based on a condition. If the condition evaluates to true, the then block is executed, otherwise the else block is executed. Only one of the blocks is required to be non-empty.
type IfThenElse struct {
	// The expression to evaluate
	If string
	// Array of IVR actions defining scenario. NOTE: Answering Machine Detection, Call Recording and Speech Recognition (used for Capture action) are add-on features. To enable these add-ons, please contact our [sales](https://www.infobip.com/contact) organisation.
	Then []ScriptInner
	// Array of IVR actions defining scenario. NOTE: Answering Machine Detection, Call Recording and Speech Recognition (used for Capture action) are add-on features. To enable these add-ons, please contact our [sales](https://www.infobip.com/contact) organisation.
	Else []ScriptInner
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _IfThenElse IfThenElse

// NewIfThenElse instantiates a new IfThenElse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewIfThenElse(if_ string) *IfThenElse {
	this := IfThenElse{}
	this.If = if_
	return &this
}

// NewIfThenElseWithDefaults instantiates a new IfThenElse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIfThenElseWithDefaults() *IfThenElse {
	this := IfThenElse{}

	return &this
}

// GetIf returns the If field value
func (o *IfThenElse) GetIf() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *IfThenElse) GetIfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *IfThenElse) SetIf(v string) {
	o.If = v
}

// GetThen returns the Then field value if set, zero value otherwise.
func (o *IfThenElse) GetThen() []ScriptInner {
	if o == nil || IsNil(o.Then) {
		var ret []ScriptInner
		return ret
	}
	return o.Then
}

// GetThenOk returns a tuple with the Then field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IfThenElse) GetThenOk() ([]ScriptInner, bool) {
	if o == nil || IsNil(o.Then) {
		return nil, false
	}
	return o.Then, true
}

// HasThen returns a boolean if a field has been set.
func (o *IfThenElse) HasThen() bool {
	if o != nil && !IsNil(o.Then) {
		return true
	}

	return false
}

// SetThen gets a reference to the given []ScriptInner and assigns it to the Then field.
func (o *IfThenElse) SetThen(v []ScriptInner) {
	o.Then = v
}

// GetElse returns the Else field value if set, zero value otherwise.
func (o *IfThenElse) GetElse() []ScriptInner {
	if o == nil || IsNil(o.Else) {
		var ret []ScriptInner
		return ret
	}
	return o.Else
}

// GetElseOk returns a tuple with the Else field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IfThenElse) GetElseOk() ([]ScriptInner, bool) {
	if o == nil || IsNil(o.Else) {
		return nil, false
	}
	return o.Else, true
}

// HasElse returns a boolean if a field has been set.
func (o *IfThenElse) HasElse() bool {
	if o != nil && !IsNil(o.Else) {
		return true
	}

	return false
}

// SetElse gets a reference to the given []ScriptInner and assigns it to the Else field.
func (o *IfThenElse) SetElse(v []ScriptInner) {
	o.Else = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *IfThenElse) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IfThenElse) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *IfThenElse) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *IfThenElse) SetActionId(v int32) {
	o.ActionId = &v
}

func (o IfThenElse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IfThenElse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["if"] = o.If
	if !IsNil(o.Then) {
		toSerialize["then"] = o.Then
	}
	if !IsNil(o.Else) {
		toSerialize["else"] = o.Else
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullableIfThenElse struct {
	value *IfThenElse
	isSet bool
}

func (v NullableIfThenElse) Get() *IfThenElse {
	return v.value
}

func (v *NullableIfThenElse) Set(val *IfThenElse) {
	v.value = val
	v.isSet = true
}

func (v NullableIfThenElse) IsSet() bool {
	return v.isSet
}

func (v *NullableIfThenElse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIfThenElse(val *IfThenElse) *NullableIfThenElse {
	return &NullableIfThenElse{value: val, isSet: true}
}

func (v NullableIfThenElse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIfThenElse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

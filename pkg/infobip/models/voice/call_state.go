/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallState Call state.
type CallState string

// List of CallState
const (
	CALLSTATE_CALLING         CallState = "CALLING"
	CALLSTATE_RINGING         CallState = "RINGING"
	CALLSTATE_PRE_ESTABLISHED CallState = "PRE_ESTABLISHED"
	CALLSTATE_ESTABLISHED     CallState = "ESTABLISHED"
	CALLSTATE_FINISHED        CallState = "FINISHED"
	CALLSTATE_FAILED          CallState = "FAILED"
	CALLSTATE_CANCELLED       CallState = "CANCELLED"
	CALLSTATE_NO_ANSWER       CallState = "NO_ANSWER"
	CALLSTATE_BUSY            CallState = "BUSY"
	CALLSTATE_DISCONNECTED    CallState = "DISCONNECTED"
)

// All allowed values of CallState enum
var AllowedCallStateEnumValues = []CallState{
	"CALLING",
	"RINGING",
	"PRE_ESTABLISHED",
	"ESTABLISHED",
	"FINISHED",
	"FAILED",
	"CANCELLED",
	"NO_ANSWER",
	"BUSY",
	"DISCONNECTED",
}

func (v *CallState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallState(value)
	for _, existing := range AllowedCallStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallState", value)
}

// NewCallStateFromValue returns a pointer to a valid CallState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallStateFromValue(v string) (*CallState, error) {
	ev := CallState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallState: valid values are %v", v, AllowedCallStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallState) IsValid() bool {
	for _, existing := range AllowedCallStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CallState value
func (v CallState) Ptr() *CallState {
	return &v
}

type NullableCallState struct {
	value *CallState
	isSet bool
}

func (v NullableCallState) Get() *CallState {
	return v.value
}

func (v *NullableCallState) Set(val *CallState) {
	v.value = val
	v.isSet = true
}

func (v NullableCallState) IsSet() bool {
	return v.isSet
}

func (v *NullableCallState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallState(val *CallState) *NullableCallState {
	return &NullableCallState{value: val, isSet: true}
}

func (v NullableCallState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsBinaryMessage An array of message objects of a single message or multiple messages sent under one bulk ID.
type SmsBinaryMessage struct {
	Binary *SmsBinaryContent `json:"binary,omitempty"`
	// Additional client data that will be sent on the notifyUrl. The maximum value is 4000 characters.
	CallbackData       *string                `json:"callbackData,omitempty"`
	DeliveryTimeWindow *SmsDeliveryTimeWindow `json:"deliveryTimeWindow,omitempty"`
	// An array of destination objects for where messages are being sent. A valid destination is required.
	Destinations *[]SmsDestination `json:"destinations"`
	// Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically appear on recipient devices without interaction. Set to `true` to enable flash SMS, or leave the default value, `false` to send a standard SMS.
	Flash *bool `json:"flash,omitempty"`
	// The sender ID which can be alphanumeric or numeric (e.g., `CompanyName`). Make sure you don't exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
	From *string `json:"from,omitempty"`
	// The [real-time intermediate delivery report](https://www.infobip.com/docs/api#channels/sms/receive-outbound-sms-message-report) containing GSM error codes, messages status, pricing, network and country codes, etc., which will be sent on your callback server. Defaults to `false`.
	IntermediateReport *bool `json:"intermediateReport,omitempty"`
	// Preferred delivery report content type, `application/json` or `application/xml`.
	NotifyContentType *string `json:"notifyContentType,omitempty"`
	// The URL on your call back server on which the Delivery report will be sent.
	NotifyUrl *string             `json:"notifyUrl,omitempty"`
	Regional  *SmsRegionalOptions `json:"regional,omitempty"`
	// Date and time when the message is to be sent. Used for [scheduled SMS](https://www.infobip.com/docs/api#channels/sms/get-scheduled-sms-messages). Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, and can only be scheduled for no later than 180 days in advance.
	SendAt *Time `json:"sendAt,omitempty"`
	// The message validity period in minutes. When the period expires, it will not be allowed for the message to be sent. Validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
	ValidityPeriod *int64 `json:"validityPeriod,omitempty"`
	// Required for entity use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
	EntityId *string `json:"entityId,omitempty"`
	// Required for application use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
	ApplicationId *string `json:"applicationId,omitempty"`
}

// NewSmsBinaryMessage instantiates a new SmsBinaryMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsBinaryMessage() *SmsBinaryMessage {
	this := SmsBinaryMessage{}
	return &this
}

// NewSmsBinaryMessageWithDefaults instantiates a new SmsBinaryMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsBinaryMessageWithDefaults() *SmsBinaryMessage {
	this := SmsBinaryMessage{}
	return &this
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetBinary() SmsBinaryContent {
	if o == nil || o.Binary == nil {
		var ret SmsBinaryContent
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetBinaryOk() (*SmsBinaryContent, bool) {
	if o == nil || o.Binary == nil {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasBinary() bool {
	if o != nil && o.Binary != nil {
		return true
	}

	return false
}

// SetBinary gets a reference to the given SmsBinaryContent and assigns it to the Binary field.
func (o *SmsBinaryMessage) SetBinary(v SmsBinaryContent) {
	o.Binary = &v
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetCallbackData() string {
	if o == nil || o.CallbackData == nil {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetCallbackDataOk() (*string, bool) {
	if o == nil || o.CallbackData == nil {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasCallbackData() bool {
	if o != nil && o.CallbackData != nil {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *SmsBinaryMessage) SetCallbackData(v string) {
	o.CallbackData = &v
}

// GetDeliveryTimeWindow returns the DeliveryTimeWindow field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetDeliveryTimeWindow() SmsDeliveryTimeWindow {
	if o == nil || o.DeliveryTimeWindow == nil {
		var ret SmsDeliveryTimeWindow
		return ret
	}
	return *o.DeliveryTimeWindow
}

// GetDeliveryTimeWindowOk returns a tuple with the DeliveryTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetDeliveryTimeWindowOk() (*SmsDeliveryTimeWindow, bool) {
	if o == nil || o.DeliveryTimeWindow == nil {
		return nil, false
	}
	return o.DeliveryTimeWindow, true
}

// HasDeliveryTimeWindow returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasDeliveryTimeWindow() bool {
	if o != nil && o.DeliveryTimeWindow != nil {
		return true
	}

	return false
}

// SetDeliveryTimeWindow gets a reference to the given SmsDeliveryTimeWindow and assigns it to the DeliveryTimeWindow field.
func (o *SmsBinaryMessage) SetDeliveryTimeWindow(v SmsDeliveryTimeWindow) {
	o.DeliveryTimeWindow = &v
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetDestinations() []SmsDestination {
	if o == nil || o.Destinations == nil {
		var ret []SmsDestination
		return ret
	}

	return *o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetDestinationsOk() (*[]SmsDestination, bool) {
	if o == nil || o.Destinations == nil {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasDestinations() bool {
	if o != nil && o.Destinations != nil {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []SmsDestination and assigns it to the Destinations field.
func (o *SmsBinaryMessage) SetDestinations(v []SmsDestination) {
	o.Destinations = &v
}

// GetFlash returns the Flash field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetFlash() bool {
	if o == nil || o.Flash == nil {
		var ret bool
		return ret
	}
	return *o.Flash
}

// GetFlashOk returns a tuple with the Flash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetFlashOk() (*bool, bool) {
	if o == nil || o.Flash == nil {
		return nil, false
	}
	return o.Flash, true
}

// HasFlash returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasFlash() bool {
	if o != nil && o.Flash != nil {
		return true
	}

	return false
}

// SetFlash gets a reference to the given bool and assigns it to the Flash field.
func (o *SmsBinaryMessage) SetFlash(v bool) {
	o.Flash = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SmsBinaryMessage) SetFrom(v string) {
	o.From = &v
}

// GetIntermediateReport returns the IntermediateReport field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetIntermediateReport() bool {
	if o == nil || o.IntermediateReport == nil {
		var ret bool
		return ret
	}
	return *o.IntermediateReport
}

// GetIntermediateReportOk returns a tuple with the IntermediateReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetIntermediateReportOk() (*bool, bool) {
	if o == nil || o.IntermediateReport == nil {
		return nil, false
	}
	return o.IntermediateReport, true
}

// HasIntermediateReport returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasIntermediateReport() bool {
	if o != nil && o.IntermediateReport != nil {
		return true
	}

	return false
}

// SetIntermediateReport gets a reference to the given bool and assigns it to the IntermediateReport field.
func (o *SmsBinaryMessage) SetIntermediateReport(v bool) {
	o.IntermediateReport = &v
}

// GetNotifyContentType returns the NotifyContentType field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetNotifyContentType() string {
	if o == nil || o.NotifyContentType == nil {
		var ret string
		return ret
	}
	return *o.NotifyContentType
}

// GetNotifyContentTypeOk returns a tuple with the NotifyContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetNotifyContentTypeOk() (*string, bool) {
	if o == nil || o.NotifyContentType == nil {
		return nil, false
	}
	return o.NotifyContentType, true
}

// HasNotifyContentType returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasNotifyContentType() bool {
	if o != nil && o.NotifyContentType != nil {
		return true
	}

	return false
}

// SetNotifyContentType gets a reference to the given string and assigns it to the NotifyContentType field.
func (o *SmsBinaryMessage) SetNotifyContentType(v string) {
	o.NotifyContentType = &v
}

// GetNotifyUrl returns the NotifyUrl field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetNotifyUrl() string {
	if o == nil || o.NotifyUrl == nil {
		var ret string
		return ret
	}
	return *o.NotifyUrl
}

// GetNotifyUrlOk returns a tuple with the NotifyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetNotifyUrlOk() (*string, bool) {
	if o == nil || o.NotifyUrl == nil {
		return nil, false
	}
	return o.NotifyUrl, true
}

// HasNotifyUrl returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasNotifyUrl() bool {
	if o != nil && o.NotifyUrl != nil {
		return true
	}

	return false
}

// SetNotifyUrl gets a reference to the given string and assigns it to the NotifyUrl field.
func (o *SmsBinaryMessage) SetNotifyUrl(v string) {
	o.NotifyUrl = &v
}

// GetRegional returns the Regional field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetRegional() SmsRegionalOptions {
	if o == nil || o.Regional == nil {
		var ret SmsRegionalOptions
		return ret
	}
	return *o.Regional
}

// GetRegionalOk returns a tuple with the Regional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetRegionalOk() (*SmsRegionalOptions, bool) {
	if o == nil || o.Regional == nil {
		return nil, false
	}
	return o.Regional, true
}

// HasRegional returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasRegional() bool {
	if o != nil && o.Regional != nil {
		return true
	}

	return false
}

// SetRegional gets a reference to the given SmsRegionalOptions and assigns it to the Regional field.
func (o *SmsBinaryMessage) SetRegional(v SmsRegionalOptions) {
	o.Regional = &v
}

// GetSendAt returns the SendAt field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetSendAt() Time {
	if o == nil || o.SendAt == nil {
		var ret Time
		return ret
	}
	return *o.SendAt
}

// GetSendAtOk returns a tuple with the SendAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetSendAtOk() (*Time, bool) {
	if o == nil || o.SendAt == nil {
		return nil, false
	}
	return o.SendAt, true
}

// HasSendAt returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasSendAt() bool {
	if o != nil && o.SendAt != nil {
		return true
	}

	return false
}

// SetSendAt gets a reference to the given Time and assigns it to the SendAt field.
func (o *SmsBinaryMessage) SetSendAt(v Time) {
	o.SendAt = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetValidityPeriod() int64 {
	if o == nil || o.ValidityPeriod == nil {
		var ret int64
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetValidityPeriodOk() (*int64, bool) {
	if o == nil || o.ValidityPeriod == nil {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasValidityPeriod() bool {
	if o != nil && o.ValidityPeriod != nil {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given int64 and assigns it to the ValidityPeriod field.
func (o *SmsBinaryMessage) SetValidityPeriod(v int64) {
	o.ValidityPeriod = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *SmsBinaryMessage) SetEntityId(v string) {
	o.EntityId = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *SmsBinaryMessage) GetApplicationId() string {
	if o == nil || o.ApplicationId == nil {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsBinaryMessage) GetApplicationIdOk() (*string, bool) {
	if o == nil || o.ApplicationId == nil {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *SmsBinaryMessage) HasApplicationId() bool {
	if o != nil && o.ApplicationId != nil {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *SmsBinaryMessage) SetApplicationId(v string) {
	o.ApplicationId = &v
}

func (o SmsBinaryMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Binary != nil {
		toSerialize["binary"] = o.Binary
	}
	if o.CallbackData != nil {
		toSerialize["callbackData"] = o.CallbackData
	}
	if o.DeliveryTimeWindow != nil {
		toSerialize["deliveryTimeWindow"] = o.DeliveryTimeWindow
	}
	if o.Destinations != nil {
		toSerialize["destinations"] = o.Destinations
	}
	if o.Flash != nil {
		toSerialize["flash"] = o.Flash
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.IntermediateReport != nil {
		toSerialize["intermediateReport"] = o.IntermediateReport
	}
	if o.NotifyContentType != nil {
		toSerialize["notifyContentType"] = o.NotifyContentType
	}
	if o.NotifyUrl != nil {
		toSerialize["notifyUrl"] = o.NotifyUrl
	}
	if o.Regional != nil {
		toSerialize["regional"] = o.Regional
	}
	if o.SendAt != nil {
		toSerialize["sendAt"] = o.SendAt
	}
	if o.ValidityPeriod != nil {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.ApplicationId != nil {
		toSerialize["applicationId"] = o.ApplicationId
	}
	return json.Marshal(toSerialize)
}

type NullableSmsBinaryMessage struct {
	value *SmsBinaryMessage
	isSet bool
}

func (v NullableSmsBinaryMessage) Get() *SmsBinaryMessage {
	return v.value
}

func (v *NullableSmsBinaryMessage) Set(val *SmsBinaryMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsBinaryMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsBinaryMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsBinaryMessage(val *SmsBinaryMessage) *NullableSmsBinaryMessage {
	return &NullableSmsBinaryMessage{value: val, isSet: true}
}

func (v NullableSmsBinaryMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsBinaryMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Play type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Play{}

// Play Play action performs playback of audio provided by the clientâ€™s URL. Supported formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080, etc.) are advised.
type Play struct {
	// Audio file URL.
	PlayFromUrl string
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _Play Play

// NewPlay instantiates a new Play object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPlay(playFromUrl string) *Play {
	this := Play{}
	this.PlayFromUrl = playFromUrl
	return &this
}

// NewPlayWithDefaults instantiates a new Play object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayWithDefaults() *Play {
	this := Play{}

	return &this
}

// GetPlayFromUrl returns the PlayFromUrl field value
func (o *Play) GetPlayFromUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayFromUrl
}

// GetPlayFromUrlOk returns a tuple with the PlayFromUrl field value
// and a boolean to check if the value has been set.
func (o *Play) GetPlayFromUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayFromUrl, true
}

// SetPlayFromUrl sets field value
func (o *Play) SetPlayFromUrl(v string) {
	o.PlayFromUrl = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *Play) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Play) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *Play) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *Play) SetActionId(v int32) {
	o.ActionId = &v
}

func (o Play) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Play) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["playFromUrl"] = o.PlayFromUrl
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullablePlay struct {
	value *Play
	isSet bool
}

func (v NullablePlay) Get() *Play {
	return v.value
}

func (v *NullablePlay) Set(val *Play) {
	v.value = val
	v.isSet = true
}

func (v NullablePlay) IsSet() bool {
	return v.isSet
}

func (v *NullablePlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlay(val *Play) *NullablePlay {
	return &NullablePlay{value: val, isSet: true}
}

func (v NullablePlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

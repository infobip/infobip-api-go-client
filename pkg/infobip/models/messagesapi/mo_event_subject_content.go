/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MoEventSubjectContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoEventSubjectContent{}

// MoEventSubjectContent struct for MoEventSubjectContent
type MoEventSubjectContent struct {
	Type MoEventContentType
	// Subject of the message.
	Text string
	// Subject of the message without the keyword (if a keyword was sent).
	CleanText string
	// Keyword extracted from the message subject.
	Keyword *string
}

type _MoEventSubjectContent MoEventSubjectContent

// NewMoEventSubjectContent instantiates a new MoEventSubjectContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoEventSubjectContent(text string, cleanText string) *MoEventSubjectContent {
	this := MoEventSubjectContent{}
	this.Type = "SUBJECT"
	this.Text = text
	this.CleanText = cleanText
	return &this
}

// NewMoEventSubjectContentWithDefaults instantiates a new MoEventSubjectContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoEventSubjectContentWithDefaults() *MoEventSubjectContent {
	this := MoEventSubjectContent{}
	this.Type = "SUBJECT"
	return &this
}

// GetText returns the Text field value
func (o *MoEventSubjectContent) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MoEventSubjectContent) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MoEventSubjectContent) SetText(v string) {
	o.Text = v
}

// GetCleanText returns the CleanText field value
func (o *MoEventSubjectContent) GetCleanText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CleanText
}

// GetCleanTextOk returns a tuple with the CleanText field value
// and a boolean to check if the value has been set.
func (o *MoEventSubjectContent) GetCleanTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CleanText, true
}

// SetCleanText sets field value
func (o *MoEventSubjectContent) SetCleanText(v string) {
	o.CleanText = v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *MoEventSubjectContent) GetKeyword() string {
	if o == nil || IsNil(o.Keyword) {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoEventSubjectContent) GetKeywordOk() (*string, bool) {
	if o == nil || IsNil(o.Keyword) {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *MoEventSubjectContent) HasKeyword() bool {
	if o != nil && !IsNil(o.Keyword) {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *MoEventSubjectContent) SetKeyword(v string) {
	o.Keyword = &v
}

func (o MoEventSubjectContent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoEventSubjectContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	toSerialize["cleanText"] = o.CleanText
	if !IsNil(o.Keyword) {
		toSerialize["keyword"] = o.Keyword
	}
	return toSerialize, nil
}

type NullableMoEventSubjectContent struct {
	value *MoEventSubjectContent
	isSet bool
}

func (v NullableMoEventSubjectContent) Get() *MoEventSubjectContent {
	return v.value
}

func (v *NullableMoEventSubjectContent) Set(val *MoEventSubjectContent) {
	v.value = val
	v.isSet = true
}

func (v NullableMoEventSubjectContent) IsSet() bool {
	return v.isSet
}

func (v *NullableMoEventSubjectContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoEventSubjectContent(val *MoEventSubjectContent) *NullableMoEventSubjectContent {
	return &NullableMoEventSubjectContent{value: val, isSet: true}
}

func (v NullableMoEventSubjectContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoEventSubjectContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MoEventContentType the model 'MoEventContentType'
type MoEventContentType string

// List of MoEventContentType
const (
	MOEVENTCONTENTTYPE_TEXT                    MoEventContentType = "TEXT"
	MOEVENTCONTENTTYPE_SUBJECT                 MoEventContentType = "SUBJECT"
	MOEVENTCONTENTTYPE_IMAGE                   MoEventContentType = "IMAGE"
	MOEVENTCONTENTTYPE_AUDIO                   MoEventContentType = "AUDIO"
	MOEVENTCONTENTTYPE_VIDEO                   MoEventContentType = "VIDEO"
	MOEVENTCONTENTTYPE_DOCUMENT                MoEventContentType = "DOCUMENT"
	MOEVENTCONTENTTYPE_FILE                    MoEventContentType = "FILE"
	MOEVENTCONTENTTYPE_BUTTON_REPLY            MoEventContentType = "BUTTON_REPLY"
	MOEVENTCONTENTTYPE_LIST_REPLY              MoEventContentType = "LIST_REPLY"
	MOEVENTCONTENTTYPE_LOCATION                MoEventContentType = "LOCATION"
	MOEVENTCONTENTTYPE_AUTHENTICATION_RESPONSE MoEventContentType = "AUTHENTICATION_RESPONSE"
)

// All allowed values of MoEventContentType enum
var AllowedMoEventContentTypeEnumValues = []MoEventContentType{
	"TEXT",
	"SUBJECT",
	"IMAGE",
	"AUDIO",
	"VIDEO",
	"DOCUMENT",
	"FILE",
	"BUTTON_REPLY",
	"LIST_REPLY",
	"LOCATION",
	"AUTHENTICATION_RESPONSE",
}

func (v *MoEventContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MoEventContentType(value)
	for _, existing := range AllowedMoEventContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MoEventContentType", value)
}

// NewMoEventContentTypeFromValue returns a pointer to a valid MoEventContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMoEventContentTypeFromValue(v string) (*MoEventContentType, error) {
	ev := MoEventContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MoEventContentType: valid values are %v", v, AllowedMoEventContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MoEventContentType) IsValid() bool {
	for _, existing := range AllowedMoEventContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MoEventContentType value
func (v MoEventContentType) Ptr() *MoEventContentType {
	return &v
}

type NullableMoEventContentType struct {
	value *MoEventContentType
	isSet bool
}

func (v NullableMoEventContentType) Get() *MoEventContentType {
	return v.value
}

func (v *NullableMoEventContentType) Set(val *MoEventContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableMoEventContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableMoEventContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoEventContentType(val *MoEventContentType) *NullableMoEventContentType {
	return &NullableMoEventContentType{value: val, isSet: true}
}

func (v NullableMoEventContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoEventContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

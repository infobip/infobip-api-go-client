/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the LanguageV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageV1{}

// LanguageV1 struct for LanguageV1
type LanguageV1 struct {
	// Language code for the correct character set. Possible values: `TR` for Turkish, `ES` for Spanish, `PT` for Portuguese, or `AUTODETECT` to let platform select the character set based on message content.
	LanguageCode *string
}

// NewLanguageV1 instantiates a new LanguageV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageV1() *LanguageV1 {
	this := LanguageV1{}
	return &this
}

// NewLanguageV1WithDefaults instantiates a new LanguageV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageV1WithDefaults() *LanguageV1 {
	this := LanguageV1{}
	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *LanguageV1) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageV1) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *LanguageV1) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *LanguageV1) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

func (o LanguageV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	return toSerialize, nil
}

type NullableLanguageV1 struct {
	value *LanguageV1
	isSet bool
}

func (v NullableLanguageV1) Get() *LanguageV1 {
	return v.value
}

func (v *NullableLanguageV1) Set(val *LanguageV1) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageV1) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageV1(val *LanguageV1) *NullableLanguageV1 {
	return &NullableLanguageV1{value: val, isSet: true}
}

func (v NullableLanguageV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

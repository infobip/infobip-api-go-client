/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallsRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallsRecording{}

// CallsRecording Recording configuration of a Number Masking call.
type CallsRecording struct {
	// Indicates whether call recording is enabled from the callee perspective.
	Enabled *bool
	// Flag that indicates will callee announcement be included in recording file. If not set, it will be `true`.
	RecordCalleeAnnouncement *bool
}

// NewCallsRecording instantiates a new CallsRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallsRecording() *CallsRecording {
	this := CallsRecording{}
	var recordCalleeAnnouncement bool = true
	this.RecordCalleeAnnouncement = &recordCalleeAnnouncement
	return &this
}

// NewCallsRecordingWithDefaults instantiates a new CallsRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallsRecordingWithDefaults() *CallsRecording {
	this := CallsRecording{}

	var recordCalleeAnnouncement bool = true
	this.RecordCalleeAnnouncement = &recordCalleeAnnouncement
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CallsRecording) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsRecording) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CallsRecording) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CallsRecording) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRecordCalleeAnnouncement returns the RecordCalleeAnnouncement field value if set, zero value otherwise.
func (o *CallsRecording) GetRecordCalleeAnnouncement() bool {
	if o == nil || IsNil(o.RecordCalleeAnnouncement) {
		var ret bool
		return ret
	}
	return *o.RecordCalleeAnnouncement
}

// GetRecordCalleeAnnouncementOk returns a tuple with the RecordCalleeAnnouncement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallsRecording) GetRecordCalleeAnnouncementOk() (*bool, bool) {
	if o == nil || IsNil(o.RecordCalleeAnnouncement) {
		return nil, false
	}
	return o.RecordCalleeAnnouncement, true
}

// HasRecordCalleeAnnouncement returns a boolean if a field has been set.
func (o *CallsRecording) HasRecordCalleeAnnouncement() bool {
	if o != nil && !IsNil(o.RecordCalleeAnnouncement) {
		return true
	}

	return false
}

// SetRecordCalleeAnnouncement gets a reference to the given bool and assigns it to the RecordCalleeAnnouncement field.
func (o *CallsRecording) SetRecordCalleeAnnouncement(v bool) {
	o.RecordCalleeAnnouncement = &v
}

func (o CallsRecording) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallsRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RecordCalleeAnnouncement) {
		toSerialize["recordCalleeAnnouncement"] = o.RecordCalleeAnnouncement
	}
	return toSerialize, nil
}

type NullableCallsRecording struct {
	value *CallsRecording
	isSet bool
}

func (v NullableCallsRecording) Get() *CallsRecording {
	return v.value
}

func (v *NullableCallsRecording) Set(val *CallsRecording) {
	v.value = val
	v.isSet = true
}

func (v NullableCallsRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableCallsRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallsRecording(val *CallsRecording) *NullableCallsRecording {
	return &NullableCallsRecording{value: val, isSet: true}
}

func (v NullableCallsRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallsRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

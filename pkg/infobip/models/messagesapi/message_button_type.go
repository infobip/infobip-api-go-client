/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MessageButtonType the model 'MessageButtonType'
type MessageButtonType string

// List of MessageButtonType
const (
	MESSAGEBUTTONTYPE_REPLY              MessageButtonType = "REPLY"
	MESSAGEBUTTONTYPE_OPEN_URL           MessageButtonType = "OPEN_URL"
	MESSAGEBUTTONTYPE_REQUEST_LOCATION   MessageButtonType = "REQUEST_LOCATION"
	MESSAGEBUTTONTYPE_ADD_CALENDAR_EVENT MessageButtonType = "ADD_CALENDAR_EVENT"
)

// All allowed values of MessageButtonType enum
var AllowedMessageButtonTypeEnumValues = []MessageButtonType{
	"REPLY",
	"OPEN_URL",
	"REQUEST_LOCATION",
	"ADD_CALENDAR_EVENT",
}

func (v *MessageButtonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageButtonType(value)
	for _, existing := range AllowedMessageButtonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageButtonType", value)
}

// NewMessageButtonTypeFromValue returns a pointer to a valid MessageButtonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageButtonTypeFromValue(v string) (*MessageButtonType, error) {
	ev := MessageButtonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageButtonType: valid values are %v", v, AllowedMessageButtonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageButtonType) IsValid() bool {
	for _, existing := range AllowedMessageButtonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageButtonType value
func (v MessageButtonType) Ptr() *MessageButtonType {
	return &v
}

type NullableMessageButtonType struct {
	value *MessageButtonType
	isSet bool
}

func (v NullableMessageButtonType) Get() *MessageButtonType {
	return v.value
}

func (v *NullableMessageButtonType) Set(val *MessageButtonType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageButtonType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageButtonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageButtonType(val *MessageButtonType) *NullableMessageButtonType {
	return &NullableMessageButtonType{value: val, isSet: true}
}

func (v NullableMessageButtonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageButtonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"
	"fmt"
)

// ApiDomainAccess Represents the access level for the domain. Domain can be either owned or have granted permissions.
type ApiDomainAccess string

// List of ApiDomainAccess
const (
	APIDOMAINACCESS_OWNER   ApiDomainAccess = "OWNER"
	APIDOMAINACCESS_GRANTED ApiDomainAccess = "GRANTED"
)

// All allowed values of ApiDomainAccess enum
var AllowedApiDomainAccessEnumValues = []ApiDomainAccess{
	"OWNER",
	"GRANTED",
}

func (v *ApiDomainAccess) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiDomainAccess(value)
	for _, existing := range AllowedApiDomainAccessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiDomainAccess", value)
}

// NewApiDomainAccessFromValue returns a pointer to a valid ApiDomainAccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiDomainAccessFromValue(v string) (*ApiDomainAccess, error) {
	ev := ApiDomainAccess(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiDomainAccess: valid values are %v", v, AllowedApiDomainAccessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiDomainAccess) IsValid() bool {
	for _, existing := range AllowedApiDomainAccessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiDomainAccess value
func (v ApiDomainAccess) Ptr() *ApiDomainAccess {
	return &v
}

type NullableApiDomainAccess struct {
	value *ApiDomainAccess
	isSet bool
}

func (v NullableApiDomainAccess) Get() *ApiDomainAccess {
	return v.value
}

func (v *NullableApiDomainAccess) Set(val *ApiDomainAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDomainAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDomainAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDomainAccess(val *ApiDomainAccess) *NullableApiDomainAccess {
	return &NullableApiDomainAccess{value: val, isSet: true}
}

func (v NullableApiDomainAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDomainAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

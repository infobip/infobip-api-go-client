/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// TemplateCarouselCardHeader Header of a card.
type TemplateCarouselCardHeader struct {
	TemplateCarouselCardImageHeader *TemplateCarouselCardImageHeader
	TemplateCarouselCardVideoHeader *TemplateCarouselCardVideoHeader
}

// TemplateCarouselCardImageHeaderAsTemplateCarouselCardHeader is a convenience function that returns TemplateCarouselCardImageHeader wrapped in TemplateCarouselCardHeader
func TemplateCarouselCardImageHeaderAsTemplateCarouselCardHeader(v *TemplateCarouselCardImageHeader) TemplateCarouselCardHeader {
	return TemplateCarouselCardHeader{
		TemplateCarouselCardImageHeader: v,
	}
}

// TemplateCarouselCardVideoHeaderAsTemplateCarouselCardHeader is a convenience function that returns TemplateCarouselCardVideoHeader wrapped in TemplateCarouselCardHeader
func TemplateCarouselCardVideoHeaderAsTemplateCarouselCardHeader(v *TemplateCarouselCardVideoHeader) TemplateCarouselCardHeader {
	return TemplateCarouselCardHeader{
		TemplateCarouselCardVideoHeader: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TemplateCarouselCardHeader) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'IMAGE'
	if jsonDict["type"] == "IMAGE" {
		// try to unmarshal JSON data into TemplateCarouselCardImageHeader
		err = json.Unmarshal(data, &dst.TemplateCarouselCardImageHeader)
		if err == nil {
			jsonTemplateCarouselCardImageHeader, _ := json.Marshal(dst.TemplateCarouselCardImageHeader)
			if string(jsonTemplateCarouselCardImageHeader) == "{}" { // empty struct
				dst.TemplateCarouselCardImageHeader = nil
			} else {
				return nil // data stored in dst.TemplateCarouselCardImageHeader, return on the first match
			}
		} else {
			dst.TemplateCarouselCardImageHeader = nil
		}
	}
	// check if the discriminator value is 'VIDEO'
	if jsonDict["type"] == "VIDEO" {
		// try to unmarshal JSON data into TemplateCarouselCardVideoHeader
		err = json.Unmarshal(data, &dst.TemplateCarouselCardVideoHeader)
		if err == nil {
			jsonTemplateCarouselCardVideoHeader, _ := json.Marshal(dst.TemplateCarouselCardVideoHeader)
			if string(jsonTemplateCarouselCardVideoHeader) == "{}" { // empty struct
				dst.TemplateCarouselCardVideoHeader = nil
			} else {
				return nil // data stored in dst.TemplateCarouselCardVideoHeader, return on the first match
			}
		} else {
			dst.TemplateCarouselCardVideoHeader = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(TemplateCarouselCardHeader)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateCarouselCardHeader) MarshalJSON() ([]byte, error) {
	if src.TemplateCarouselCardImageHeader != nil {
		return json.Marshal(&src.TemplateCarouselCardImageHeader)
	}
	if src.TemplateCarouselCardVideoHeader != nil {
		return json.Marshal(&src.TemplateCarouselCardVideoHeader)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *TemplateCarouselCardHeader) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TemplateCarouselCardImageHeader != nil {
		return obj.TemplateCarouselCardImageHeader
	}
	if obj.TemplateCarouselCardVideoHeader != nil {
		return obj.TemplateCarouselCardVideoHeader
	}
	// all schemas are nil
	return nil
}

type NullableTemplateCarouselCardHeader struct {
	value *TemplateCarouselCardHeader
	isSet bool
}

func (v NullableTemplateCarouselCardHeader) Get() *TemplateCarouselCardHeader {
	return v.value
}

func (v *NullableTemplateCarouselCardHeader) Set(val *TemplateCarouselCardHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateCarouselCardHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateCarouselCardHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateCarouselCardHeader(val *TemplateCarouselCardHeader) *NullableTemplateCarouselCardHeader {
	return &NullableTemplateCarouselCardHeader{value: val, isSet: true}
}

func (v NullableTemplateCarouselCardHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateCarouselCardHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DnsRecordResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRecordResponse{}

// DnsRecordResponse Records for the domain.
type DnsRecordResponse struct {
	// Type of the record.
	RecordType *string
	// Name of the record.
	Name *string
	// Expected value to be set for the given record.
	ExpectedValue *string
	// Boolean value representing if the record is verified or not.
	Verified *bool
}

// NewDnsRecordResponse instantiates a new DnsRecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDnsRecordResponse() *DnsRecordResponse {
	this := DnsRecordResponse{}
	return &this
}

// NewDnsRecordResponseWithDefaults instantiates a new DnsRecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRecordResponseWithDefaults() *DnsRecordResponse {
	this := DnsRecordResponse{}

	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *DnsRecordResponse) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordResponse) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *DnsRecordResponse) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *DnsRecordResponse) SetRecordType(v string) {
	o.RecordType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DnsRecordResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DnsRecordResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DnsRecordResponse) SetName(v string) {
	o.Name = &v
}

// GetExpectedValue returns the ExpectedValue field value if set, zero value otherwise.
func (o *DnsRecordResponse) GetExpectedValue() string {
	if o == nil || IsNil(o.ExpectedValue) {
		var ret string
		return ret
	}
	return *o.ExpectedValue
}

// GetExpectedValueOk returns a tuple with the ExpectedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordResponse) GetExpectedValueOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedValue) {
		return nil, false
	}
	return o.ExpectedValue, true
}

// HasExpectedValue returns a boolean if a field has been set.
func (o *DnsRecordResponse) HasExpectedValue() bool {
	if o != nil && !IsNil(o.ExpectedValue) {
		return true
	}

	return false
}

// SetExpectedValue gets a reference to the given string and assigns it to the ExpectedValue field.
func (o *DnsRecordResponse) SetExpectedValue(v string) {
	o.ExpectedValue = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *DnsRecordResponse) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordResponse) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *DnsRecordResponse) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *DnsRecordResponse) SetVerified(v bool) {
	o.Verified = &v
}

func (o DnsRecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRecordResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["recordType"] = o.RecordType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpectedValue) {
		toSerialize["expectedValue"] = o.ExpectedValue
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	return toSerialize, nil
}

type NullableDnsRecordResponse struct {
	value *DnsRecordResponse
	isSet bool
}

func (v NullableDnsRecordResponse) Get() *DnsRecordResponse {
	return v.value
}

func (v *NullableDnsRecordResponse) Set(val *DnsRecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRecordResponse(val *DnsRecordResponse) *NullableDnsRecordResponse {
	return &NullableDnsRecordResponse{value: val, isSet: true}
}

func (v NullableDnsRecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

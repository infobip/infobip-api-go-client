/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ClickToCallMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickToCallMessage{}

// ClickToCallMessage Array of click to call messages to be sent.
type ClickToCallMessage struct {
	// If set, same numeric sender (defined in _from_) is used for both calls (towards _destinationA_ and _destinationB_). If not set, _destinationA_ will be shown to _destinationB_. If _fromB_ is set up, _anonymization_ will not be applied; _from_ will be shown to _destinationA_ and _fromB_ will be shown to _destinationB_. Default value is `false`.
	Anonymization *bool
	// An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so that the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080, etc.) are advised.
	AudioFileUrl       *string
	DeliveryTimeWindow *DeliveryTimeWindow
	// Original destination address. Address must be in the international format (Example: `41793026727`).
	DestinationA string
	// Destination address to which the call will be transferred after successful answering. Address must be in the international format (Example: `41793026727`).
	DestinationB string
	// Numeric sender ID in E.164 format. Will be shown to _destinationA_.
	From string
	// Numeric sender ID in E.164 format. If set, it will be shown to _destinationB_. If not set, _from_ or _destinationA_ will be shown to _destinationB_, depending on the value of _anonymization_.
	FromB *string
	// If the message is in text format, language in which the message is written must be defined for correct pronunciation. In the Languages section, you can find the list of languages that we support. If not set, default language is `English [en].`
	Language *string
	// Used for enabling detection of answering machine after the call has been answered on `destinationA`. It can be set to `hangup` which means if a machine is detected, the call is hung up. If `machineDetection` is used, there is a minimum of 4 seconds detection time, which can result in delay of playing the message. Answering machine detection is additionally charged. For more information please contact your account manager.
	MachineDetection *string
	// Maximum duration of transferred call in seconds. If set, when _maxDuration_ is reached call will be terminated.
	MaxDuration *int32
	// The ID that uniquely identifies the message sent. It can be defined by you or Infobip will generate unique message ID for this specific call. The field is not mandatory.
	MessageId *string
	// Preferred Delivery report content type. Can be `application/json` or `application/xml`.
	NotifyContentType *string
	// Specifies the version of the report model to be sent. Can be `1` ([deprecated version 1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or `2` ([current version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2.
	NotifyContentVersion *int32
	// The URL on your callback server on which the Delivery report will be sent.
	NotifyUrl *string
	Retry     *Retry
	// Text of the message that will be played before call transfer.
	Text  *string
	Voice *Voice
	// Time before the end of the transferred call, in seconds, when warning beep sound will be played. For example, if _maxDuration_ is set to `60` and warningTime is set to `5`, this means that warning beep will be played on `55.` second of the transferred call, or `5` seconds before it's end.
	WarningTime *int32
}

type _ClickToCallMessage ClickToCallMessage

// NewClickToCallMessage instantiates a new ClickToCallMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewClickToCallMessage(destinationA string, destinationB string, from string) *ClickToCallMessage {
	this := ClickToCallMessage{}
	this.DestinationA = destinationA
	this.DestinationB = destinationB
	this.From = from
	return &this
}

// NewClickToCallMessageWithDefaults instantiates a new ClickToCallMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickToCallMessageWithDefaults() *ClickToCallMessage {
	this := ClickToCallMessage{}

	return &this
}

// GetAnonymization returns the Anonymization field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetAnonymization() bool {
	if o == nil || IsNil(o.Anonymization) {
		var ret bool
		return ret
	}
	return *o.Anonymization
}

// GetAnonymizationOk returns a tuple with the Anonymization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetAnonymizationOk() (*bool, bool) {
	if o == nil || IsNil(o.Anonymization) {
		return nil, false
	}
	return o.Anonymization, true
}

// HasAnonymization returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasAnonymization() bool {
	if o != nil && !IsNil(o.Anonymization) {
		return true
	}

	return false
}

// SetAnonymization gets a reference to the given bool and assigns it to the Anonymization field.
func (o *ClickToCallMessage) SetAnonymization(v bool) {
	o.Anonymization = &v
}

// GetAudioFileUrl returns the AudioFileUrl field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetAudioFileUrl() string {
	if o == nil || IsNil(o.AudioFileUrl) {
		var ret string
		return ret
	}
	return *o.AudioFileUrl
}

// GetAudioFileUrlOk returns a tuple with the AudioFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetAudioFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioFileUrl) {
		return nil, false
	}
	return o.AudioFileUrl, true
}

// HasAudioFileUrl returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasAudioFileUrl() bool {
	if o != nil && !IsNil(o.AudioFileUrl) {
		return true
	}

	return false
}

// SetAudioFileUrl gets a reference to the given string and assigns it to the AudioFileUrl field.
func (o *ClickToCallMessage) SetAudioFileUrl(v string) {
	o.AudioFileUrl = &v
}

// GetDeliveryTimeWindow returns the DeliveryTimeWindow field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetDeliveryTimeWindow() DeliveryTimeWindow {
	if o == nil || IsNil(o.DeliveryTimeWindow) {
		var ret DeliveryTimeWindow
		return ret
	}
	return *o.DeliveryTimeWindow
}

// GetDeliveryTimeWindowOk returns a tuple with the DeliveryTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetDeliveryTimeWindowOk() (*DeliveryTimeWindow, bool) {
	if o == nil || IsNil(o.DeliveryTimeWindow) {
		return nil, false
	}
	return o.DeliveryTimeWindow, true
}

// HasDeliveryTimeWindow returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasDeliveryTimeWindow() bool {
	if o != nil && !IsNil(o.DeliveryTimeWindow) {
		return true
	}

	return false
}

// SetDeliveryTimeWindow gets a reference to the given DeliveryTimeWindow and assigns it to the DeliveryTimeWindow field.
func (o *ClickToCallMessage) SetDeliveryTimeWindow(v DeliveryTimeWindow) {
	o.DeliveryTimeWindow = &v
}

// GetDestinationA returns the DestinationA field value
func (o *ClickToCallMessage) GetDestinationA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationA
}

// GetDestinationAOk returns a tuple with the DestinationA field value
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetDestinationAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationA, true
}

// SetDestinationA sets field value
func (o *ClickToCallMessage) SetDestinationA(v string) {
	o.DestinationA = v
}

// GetDestinationB returns the DestinationB field value
func (o *ClickToCallMessage) GetDestinationB() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationB
}

// GetDestinationBOk returns a tuple with the DestinationB field value
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetDestinationBOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationB, true
}

// SetDestinationB sets field value
func (o *ClickToCallMessage) SetDestinationB(v string) {
	o.DestinationB = v
}

// GetFrom returns the From field value
func (o *ClickToCallMessage) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *ClickToCallMessage) SetFrom(v string) {
	o.From = v
}

// GetFromB returns the FromB field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetFromB() string {
	if o == nil || IsNil(o.FromB) {
		var ret string
		return ret
	}
	return *o.FromB
}

// GetFromBOk returns a tuple with the FromB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetFromBOk() (*string, bool) {
	if o == nil || IsNil(o.FromB) {
		return nil, false
	}
	return o.FromB, true
}

// HasFromB returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasFromB() bool {
	if o != nil && !IsNil(o.FromB) {
		return true
	}

	return false
}

// SetFromB gets a reference to the given string and assigns it to the FromB field.
func (o *ClickToCallMessage) SetFromB(v string) {
	o.FromB = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ClickToCallMessage) SetLanguage(v string) {
	o.Language = &v
}

// GetMachineDetection returns the MachineDetection field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetMachineDetection() string {
	if o == nil || IsNil(o.MachineDetection) {
		var ret string
		return ret
	}
	return *o.MachineDetection
}

// GetMachineDetectionOk returns a tuple with the MachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetMachineDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.MachineDetection) {
		return nil, false
	}
	return o.MachineDetection, true
}

// HasMachineDetection returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasMachineDetection() bool {
	if o != nil && !IsNil(o.MachineDetection) {
		return true
	}

	return false
}

// SetMachineDetection gets a reference to the given string and assigns it to the MachineDetection field.
func (o *ClickToCallMessage) SetMachineDetection(v string) {
	o.MachineDetection = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetMaxDuration() int32 {
	if o == nil || IsNil(o.MaxDuration) {
		var ret int32
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetMaxDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDuration) {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasMaxDuration() bool {
	if o != nil && !IsNil(o.MaxDuration) {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given int32 and assigns it to the MaxDuration field.
func (o *ClickToCallMessage) SetMaxDuration(v int32) {
	o.MaxDuration = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *ClickToCallMessage) SetMessageId(v string) {
	o.MessageId = &v
}

// GetNotifyContentType returns the NotifyContentType field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetNotifyContentType() string {
	if o == nil || IsNil(o.NotifyContentType) {
		var ret string
		return ret
	}
	return *o.NotifyContentType
}

// GetNotifyContentTypeOk returns a tuple with the NotifyContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetNotifyContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyContentType) {
		return nil, false
	}
	return o.NotifyContentType, true
}

// HasNotifyContentType returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasNotifyContentType() bool {
	if o != nil && !IsNil(o.NotifyContentType) {
		return true
	}

	return false
}

// SetNotifyContentType gets a reference to the given string and assigns it to the NotifyContentType field.
func (o *ClickToCallMessage) SetNotifyContentType(v string) {
	o.NotifyContentType = &v
}

// GetNotifyContentVersion returns the NotifyContentVersion field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetNotifyContentVersion() int32 {
	if o == nil || IsNil(o.NotifyContentVersion) {
		var ret int32
		return ret
	}
	return *o.NotifyContentVersion
}

// GetNotifyContentVersionOk returns a tuple with the NotifyContentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetNotifyContentVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.NotifyContentVersion) {
		return nil, false
	}
	return o.NotifyContentVersion, true
}

// HasNotifyContentVersion returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasNotifyContentVersion() bool {
	if o != nil && !IsNil(o.NotifyContentVersion) {
		return true
	}

	return false
}

// SetNotifyContentVersion gets a reference to the given int32 and assigns it to the NotifyContentVersion field.
func (o *ClickToCallMessage) SetNotifyContentVersion(v int32) {
	o.NotifyContentVersion = &v
}

// GetNotifyUrl returns the NotifyUrl field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetNotifyUrl() string {
	if o == nil || IsNil(o.NotifyUrl) {
		var ret string
		return ret
	}
	return *o.NotifyUrl
}

// GetNotifyUrlOk returns a tuple with the NotifyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetNotifyUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyUrl) {
		return nil, false
	}
	return o.NotifyUrl, true
}

// HasNotifyUrl returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasNotifyUrl() bool {
	if o != nil && !IsNil(o.NotifyUrl) {
		return true
	}

	return false
}

// SetNotifyUrl gets a reference to the given string and assigns it to the NotifyUrl field.
func (o *ClickToCallMessage) SetNotifyUrl(v string) {
	o.NotifyUrl = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetRetry() Retry {
	if o == nil || IsNil(o.Retry) {
		var ret Retry
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetRetryOk() (*Retry, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given Retry and assigns it to the Retry field.
func (o *ClickToCallMessage) SetRetry(v Retry) {
	o.Retry = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ClickToCallMessage) SetText(v string) {
	o.Text = &v
}

// GetVoice returns the Voice field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetVoice() Voice {
	if o == nil || IsNil(o.Voice) {
		var ret Voice
		return ret
	}
	return *o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetVoiceOk() (*Voice, bool) {
	if o == nil || IsNil(o.Voice) {
		return nil, false
	}
	return o.Voice, true
}

// HasVoice returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasVoice() bool {
	if o != nil && !IsNil(o.Voice) {
		return true
	}

	return false
}

// SetVoice gets a reference to the given Voice and assigns it to the Voice field.
func (o *ClickToCallMessage) SetVoice(v Voice) {
	o.Voice = &v
}

// GetWarningTime returns the WarningTime field value if set, zero value otherwise.
func (o *ClickToCallMessage) GetWarningTime() int32 {
	if o == nil || IsNil(o.WarningTime) {
		var ret int32
		return ret
	}
	return *o.WarningTime
}

// GetWarningTimeOk returns a tuple with the WarningTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickToCallMessage) GetWarningTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.WarningTime) {
		return nil, false
	}
	return o.WarningTime, true
}

// HasWarningTime returns a boolean if a field has been set.
func (o *ClickToCallMessage) HasWarningTime() bool {
	if o != nil && !IsNil(o.WarningTime) {
		return true
	}

	return false
}

// SetWarningTime gets a reference to the given int32 and assigns it to the WarningTime field.
func (o *ClickToCallMessage) SetWarningTime(v int32) {
	o.WarningTime = &v
}

func (o ClickToCallMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickToCallMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anonymization) {
		toSerialize["anonymization"] = o.Anonymization
	}
	if !IsNil(o.AudioFileUrl) {
		toSerialize["audioFileUrl"] = o.AudioFileUrl
	}
	if !IsNil(o.DeliveryTimeWindow) {
		toSerialize["deliveryTimeWindow"] = o.DeliveryTimeWindow
	}
	toSerialize["destinationA"] = o.DestinationA
	toSerialize["destinationB"] = o.DestinationB
	toSerialize["from"] = o.From
	if !IsNil(o.FromB) {
		toSerialize["fromB"] = o.FromB
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MachineDetection) {
		toSerialize["machineDetection"] = o.MachineDetection
	}
	if !IsNil(o.MaxDuration) {
		toSerialize["maxDuration"] = o.MaxDuration
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.NotifyContentType) {
		toSerialize["notifyContentType"] = o.NotifyContentType
	}
	if !IsNil(o.NotifyContentVersion) {
		toSerialize["notifyContentVersion"] = o.NotifyContentVersion
	}
	if !IsNil(o.NotifyUrl) {
		toSerialize["notifyUrl"] = o.NotifyUrl
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Voice) {
		toSerialize["voice"] = o.Voice
	}
	if !IsNil(o.WarningTime) {
		toSerialize["warningTime"] = o.WarningTime
	}
	return toSerialize, nil
}

type NullableClickToCallMessage struct {
	value *ClickToCallMessage
	isSet bool
}

func (v NullableClickToCallMessage) Get() *ClickToCallMessage {
	return v.value
}

func (v *NullableClickToCallMessage) Set(val *ClickToCallMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableClickToCallMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableClickToCallMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickToCallMessage(val *ClickToCallMessage) *NullableClickToCallMessage {
	return &NullableClickToCallMessage{value: val, isSet: true}
}

func (v NullableClickToCallMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickToCallMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

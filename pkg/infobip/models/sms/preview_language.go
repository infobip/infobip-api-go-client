/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the PreviewLanguage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviewLanguage{}

// PreviewLanguage struct for PreviewLanguage
type PreviewLanguage struct {
	// Language code for the correct character set. Possible values: `TR` for Turkish, `ES` for Spanish, `PT` for Portuguese, or `AUTODETECT` to let platform select the character set based on message content.
	LanguageCode *string
}

// NewPreviewLanguage instantiates a new PreviewLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewPreviewLanguage() *PreviewLanguage {
	this := PreviewLanguage{}
	return &this
}

// NewPreviewLanguageWithDefaults instantiates a new PreviewLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewLanguageWithDefaults() *PreviewLanguage {
	this := PreviewLanguage{}

	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *PreviewLanguage) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewLanguage) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *PreviewLanguage) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *PreviewLanguage) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

func (o PreviewLanguage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviewLanguage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	return toSerialize, nil
}

type NullablePreviewLanguage struct {
	value *PreviewLanguage
	isSet bool
}

func (v NullablePreviewLanguage) Get() *PreviewLanguage {
	return v.value
}

func (v *NullablePreviewLanguage) Set(val *PreviewLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewLanguage(val *PreviewLanguage) *NullablePreviewLanguage {
	return &NullablePreviewLanguage{value: val, isSet: true}
}

func (v NullablePreviewLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// SpeedLimitTimeUnit The time unit to define when setting a messaging speed limit. Defaults to `MINUTE`.
type SpeedLimitTimeUnit string

// List of SpeedLimitTimeUnit
const (
	SPEEDLIMITTIMEUNIT_MINUTE SpeedLimitTimeUnit = "MINUTE"
	SPEEDLIMITTIMEUNIT_HOUR   SpeedLimitTimeUnit = "HOUR"
	SPEEDLIMITTIMEUNIT_DAY    SpeedLimitTimeUnit = "DAY"
)

// All allowed values of SpeedLimitTimeUnit enum
var AllowedSpeedLimitTimeUnitEnumValues = []SpeedLimitTimeUnit{
	"MINUTE",
	"HOUR",
	"DAY",
}

func (v *SpeedLimitTimeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpeedLimitTimeUnit(value)
	for _, existing := range AllowedSpeedLimitTimeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpeedLimitTimeUnit", value)
}

// NewSpeedLimitTimeUnitFromValue returns a pointer to a valid SpeedLimitTimeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpeedLimitTimeUnitFromValue(v string) (*SpeedLimitTimeUnit, error) {
	ev := SpeedLimitTimeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpeedLimitTimeUnit: valid values are %v", v, AllowedSpeedLimitTimeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpeedLimitTimeUnit) IsValid() bool {
	for _, existing := range AllowedSpeedLimitTimeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpeedLimitTimeUnit value
func (v SpeedLimitTimeUnit) Ptr() *SpeedLimitTimeUnit {
	return &v
}

type NullableSpeedLimitTimeUnit struct {
	value *SpeedLimitTimeUnit
	isSet bool
}

func (v NullableSpeedLimitTimeUnit) Get() *SpeedLimitTimeUnit {
	return v.value
}

func (v *NullableSpeedLimitTimeUnit) Set(val *SpeedLimitTimeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeedLimitTimeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeedLimitTimeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeedLimitTimeUnit(val *SpeedLimitTimeUnit) *NullableSpeedLimitTimeUnit {
	return &NullableSpeedLimitTimeUnit{value: val, isSet: true}
}

func (v NullableSpeedLimitTimeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeedLimitTimeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

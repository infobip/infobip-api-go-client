/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the WebRtcEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebRtcEndpoint{}

// WebRtcEndpoint struct for WebRtcEndpoint
type WebRtcEndpoint struct {
	Type CallEndpointType
	// The identity used to present a user on the Infobip WebRTC platform. Must be unique.
	Identity string
	// A human-readable name for a given identity.
	DisplayName *string
}

type _WebRtcEndpoint WebRtcEndpoint

// NewWebRtcEndpoint instantiates a new WebRtcEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebRtcEndpoint(identity string) *WebRtcEndpoint {
	this := WebRtcEndpoint{}
	this.Type = "WEBRTC"
	this.Identity = identity
	return &this
}

// NewWebRtcEndpointWithDefaults instantiates a new WebRtcEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebRtcEndpointWithDefaults() *WebRtcEndpoint {
	this := WebRtcEndpoint{}
	this.Type = "WEBRTC"
	return &this
}

// GetIdentity returns the Identity field value
func (o *WebRtcEndpoint) GetIdentity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value
// and a boolean to check if the value has been set.
func (o *WebRtcEndpoint) GetIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identity, true
}

// SetIdentity sets field value
func (o *WebRtcEndpoint) SetIdentity(v string) {
	o.Identity = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *WebRtcEndpoint) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebRtcEndpoint) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *WebRtcEndpoint) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *WebRtcEndpoint) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o WebRtcEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebRtcEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["identity"] = o.Identity
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	return toSerialize, nil
}

type NullableWebRtcEndpoint struct {
	value *WebRtcEndpoint
	isSet bool
}

func (v NullableWebRtcEndpoint) Get() *WebRtcEndpoint {
	return v.value
}

func (v *NullableWebRtcEndpoint) Set(val *WebRtcEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableWebRtcEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableWebRtcEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebRtcEndpoint(val *WebRtcEndpoint) *NullableWebRtcEndpoint {
	return &NullableWebRtcEndpoint{value: val, isSet: true}
}

func (v NullableWebRtcEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebRtcEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

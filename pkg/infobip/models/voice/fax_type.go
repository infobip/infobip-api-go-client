/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// FaxType Fax type.
type FaxType string

// List of FaxType
const (
	FAXTYPE_NONE   FaxType = "NONE"
	FAXTYPE_INBAND FaxType = "INBAND"
	FAXTYPE_T38    FaxType = "T38"
)

// All allowed values of FaxType enum
var AllowedFaxTypeEnumValues = []FaxType{
	"NONE",
	"INBAND",
	"T38",
}

func (v *FaxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FaxType(value)
	for _, existing := range AllowedFaxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FaxType", value)
}

// NewFaxTypeFromValue returns a pointer to a valid FaxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFaxTypeFromValue(v string) (*FaxType, error) {
	ev := FaxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FaxType: valid values are %v", v, AllowedFaxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FaxType) IsValid() bool {
	for _, existing := range AllowedFaxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FaxType value
func (v FaxType) Ptr() *FaxType {
	return &v
}

type NullableFaxType struct {
	value *FaxType
	isSet bool
}

func (v NullableFaxType) Get() *FaxType {
	return v.value
}

func (v *NullableFaxType) Set(val *FaxType) {
	v.value = val
	v.isSet = true
}

func (v NullableFaxType) IsSet() bool {
	return v.isSet
}

func (v *NullableFaxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFaxType(val *FaxType) *NullableFaxType {
	return &NullableFaxType{value: val, isSet: true}
}

func (v NullableFaxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFaxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

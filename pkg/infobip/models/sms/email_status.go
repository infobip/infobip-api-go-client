/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the EmailStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailStatus{}

// EmailStatus Indicates the [status](https://www.infobip.com/docs/essentials/response-status-and-error-codes#api-status-codes) of the message and how to recover from an error should there be any.
type EmailStatus struct {
	// Human-readable description of the status.
	Description *string
	// [Status name](https://www.infobip.com/docs/essentials/response-status-and-error-codes).
	Name *string
}

// NewEmailStatus instantiates a new EmailStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailStatus() *EmailStatus {
	this := EmailStatus{}
	return &this
}

// NewEmailStatusWithDefaults instantiates a new EmailStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailStatusWithDefaults() *EmailStatus {
	this := EmailStatus{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EmailStatus) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailStatus) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EmailStatus) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EmailStatus) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EmailStatus) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailStatus) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EmailStatus) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EmailStatus) SetName(v string) {
	o.Name = &v
}

func (o EmailStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableEmailStatus struct {
	value *EmailStatus
	isSet bool
}

func (v NullableEmailStatus) Get() *EmailStatus {
	return v.value
}

func (v *NullableEmailStatus) Set(val *EmailStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailStatus(val *EmailStatus) *NullableEmailStatus {
	return &NullableEmailStatus{value: val, isSet: true}
}

func (v NullableEmailStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

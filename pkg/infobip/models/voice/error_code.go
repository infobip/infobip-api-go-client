/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// ErrorCode Error code to hang up with. There are rules for using error codes.  `NORMAL_HANGUP` - Call needs to be established.  `MACHINE_DETECTED` - Call needs to be established and must be `OUTBOUND`.  `NO_ANSWER` - Call cannot be established.  `BUSY` - Call cannot be established.  `CANCELLED` - Call cannot be established.  `REJECTED` - Call cannot be established.  `FORBIDDEN` - Call cannot be established.  `DESTINATION_NOT_FOUND` - Call cannot be established.  `DESTINATION_UNAVAILABLE` - Call cannot be established.  `INVALID_DESTINATION` - Call cannot be established.  `SERVICE_UNAVAILABLE` - Call cannot be established.
type ErrorCode string

// List of ErrorCode
const (
	ERRORCODE_NORMAL_HANGUP           ErrorCode = "NORMAL_HANGUP"
	ERRORCODE_MACHINE_DETECTED        ErrorCode = "MACHINE_DETECTED"
	ERRORCODE_NO_ANSWER               ErrorCode = "NO_ANSWER"
	ERRORCODE_BUSY                    ErrorCode = "BUSY"
	ERRORCODE_CANCELLED               ErrorCode = "CANCELLED"
	ERRORCODE_REJECTED                ErrorCode = "REJECTED"
	ERRORCODE_FORBIDDEN               ErrorCode = "FORBIDDEN"
	ERRORCODE_DESTINATION_NOT_FOUND   ErrorCode = "DESTINATION_NOT_FOUND"
	ERRORCODE_DESTINATION_UNAVAILABLE ErrorCode = "DESTINATION_UNAVAILABLE"
	ERRORCODE_INVALID_DESTINATION     ErrorCode = "INVALID_DESTINATION"
	ERRORCODE_INVALID_REQUEST         ErrorCode = "INVALID_REQUEST"
	ERRORCODE_REQUEST_TIMEOUT         ErrorCode = "REQUEST_TIMEOUT"
	ERRORCODE_SERVICE_UNAVAILABLE     ErrorCode = "SERVICE_UNAVAILABLE"
)

// All allowed values of ErrorCode enum
var AllowedErrorCodeEnumValues = []ErrorCode{
	"NORMAL_HANGUP",
	"MACHINE_DETECTED",
	"NO_ANSWER",
	"BUSY",
	"CANCELLED",
	"REJECTED",
	"FORBIDDEN",
	"DESTINATION_NOT_FOUND",
	"DESTINATION_UNAVAILABLE",
	"INVALID_DESTINATION",
	"INVALID_REQUEST",
	"REQUEST_TIMEOUT",
	"SERVICE_UNAVAILABLE",
}

func (v *ErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorCode(value)
	for _, existing := range AllowedErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorCode", value)
}

// NewErrorCodeFromValue returns a pointer to a valid ErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorCodeFromValue(v string) (*ErrorCode, error) {
	ev := ErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorCode: valid values are %v", v, AllowedErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorCode) IsValid() bool {
	for _, existing := range AllowedErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorCode value
func (v ErrorCode) Ptr() *ErrorCode {
	return &v
}

type NullableErrorCode struct {
	value *ErrorCode
	isSet bool
}

func (v NullableErrorCode) Get() *ErrorCode {
	return v.value
}

func (v *NullableErrorCode) Set(val *ErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorCode(val *ErrorCode) *NullableErrorCode {
	return &NullableErrorCode{value: val, isSet: true}
}

func (v NullableErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

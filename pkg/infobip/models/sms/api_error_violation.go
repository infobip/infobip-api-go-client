/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ApiErrorViolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiErrorViolation{}

// ApiErrorViolation List of violations that caused the error.
type ApiErrorViolation struct {
	// Request property that caused the error.
	Property *string
	// Detailed violation description.
	Violation *string
}

// NewApiErrorViolation instantiates a new ApiErrorViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorViolation() *ApiErrorViolation {
	this := ApiErrorViolation{}
	return &this
}

// NewApiErrorViolationWithDefaults instantiates a new ApiErrorViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorViolationWithDefaults() *ApiErrorViolation {
	this := ApiErrorViolation{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ApiErrorViolation) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorViolation) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ApiErrorViolation) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ApiErrorViolation) SetProperty(v string) {
	o.Property = &v
}

// GetViolation returns the Violation field value if set, zero value otherwise.
func (o *ApiErrorViolation) GetViolation() string {
	if o == nil || IsNil(o.Violation) {
		var ret string
		return ret
	}
	return *o.Violation
}

// GetViolationOk returns a tuple with the Violation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorViolation) GetViolationOk() (*string, bool) {
	if o == nil || IsNil(o.Violation) {
		return nil, false
	}
	return o.Violation, true
}

// HasViolation returns a boolean if a field has been set.
func (o *ApiErrorViolation) HasViolation() bool {
	if o != nil && !IsNil(o.Violation) {
		return true
	}

	return false
}

// SetViolation gets a reference to the given string and assigns it to the Violation field.
func (o *ApiErrorViolation) SetViolation(v string) {
	o.Violation = &v
}

func (o ApiErrorViolation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiErrorViolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Violation) {
		toSerialize["violation"] = o.Violation
	}
	return toSerialize, nil
}

type NullableApiErrorViolation struct {
	value *ApiErrorViolation
	isSet bool
}

func (v NullableApiErrorViolation) Get() *ApiErrorViolation {
	return v.value
}

func (v *NullableApiErrorViolation) Set(val *ApiErrorViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorViolation(val *ApiErrorViolation) *NullableApiErrorViolation {
	return &NullableApiErrorViolation{value: val, isSet: true}
}

func (v NullableApiErrorViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

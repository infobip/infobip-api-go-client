/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MessageBody Body of the message.
type MessageBody struct {
	MessageAuthenticationRequestBody *MessageAuthenticationRequestBody
	MessageCarouselBody              *MessageCarouselBody
	MessageContactBody               *MessageContactBody
	MessageDocumentBody              *MessageDocumentBody
	MessageImageBody                 *MessageImageBody
	MessageListBody                  *MessageListBody
	MessageLocationBody              *MessageLocationBody
	MessageRichLinkBody              *MessageRichLinkBody
	MessageStickerBody               *MessageStickerBody
	MessageTextBody                  *MessageTextBody
	MessageVideoBody                 *MessageVideoBody
}

// MessageAuthenticationRequestBodyAsMessageBody is a convenience function that returns MessageAuthenticationRequestBody wrapped in MessageBody
func MessageAuthenticationRequestBodyAsMessageBody(v *MessageAuthenticationRequestBody) MessageBody {
	return MessageBody{
		MessageAuthenticationRequestBody: v,
	}
}

// MessageCarouselBodyAsMessageBody is a convenience function that returns MessageCarouselBody wrapped in MessageBody
func MessageCarouselBodyAsMessageBody(v *MessageCarouselBody) MessageBody {
	return MessageBody{
		MessageCarouselBody: v,
	}
}

// MessageContactBodyAsMessageBody is a convenience function that returns MessageContactBody wrapped in MessageBody
func MessageContactBodyAsMessageBody(v *MessageContactBody) MessageBody {
	return MessageBody{
		MessageContactBody: v,
	}
}

// MessageDocumentBodyAsMessageBody is a convenience function that returns MessageDocumentBody wrapped in MessageBody
func MessageDocumentBodyAsMessageBody(v *MessageDocumentBody) MessageBody {
	return MessageBody{
		MessageDocumentBody: v,
	}
}

// MessageImageBodyAsMessageBody is a convenience function that returns MessageImageBody wrapped in MessageBody
func MessageImageBodyAsMessageBody(v *MessageImageBody) MessageBody {
	return MessageBody{
		MessageImageBody: v,
	}
}

// MessageListBodyAsMessageBody is a convenience function that returns MessageListBody wrapped in MessageBody
func MessageListBodyAsMessageBody(v *MessageListBody) MessageBody {
	return MessageBody{
		MessageListBody: v,
	}
}

// MessageLocationBodyAsMessageBody is a convenience function that returns MessageLocationBody wrapped in MessageBody
func MessageLocationBodyAsMessageBody(v *MessageLocationBody) MessageBody {
	return MessageBody{
		MessageLocationBody: v,
	}
}

// MessageRichLinkBodyAsMessageBody is a convenience function that returns MessageRichLinkBody wrapped in MessageBody
func MessageRichLinkBodyAsMessageBody(v *MessageRichLinkBody) MessageBody {
	return MessageBody{
		MessageRichLinkBody: v,
	}
}

// MessageStickerBodyAsMessageBody is a convenience function that returns MessageStickerBody wrapped in MessageBody
func MessageStickerBodyAsMessageBody(v *MessageStickerBody) MessageBody {
	return MessageBody{
		MessageStickerBody: v,
	}
}

// MessageTextBodyAsMessageBody is a convenience function that returns MessageTextBody wrapped in MessageBody
func MessageTextBodyAsMessageBody(v *MessageTextBody) MessageBody {
	return MessageBody{
		MessageTextBody: v,
	}
}

// MessageVideoBodyAsMessageBody is a convenience function that returns MessageVideoBody wrapped in MessageBody
func MessageVideoBodyAsMessageBody(v *MessageVideoBody) MessageBody {
	return MessageBody{
		MessageVideoBody: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MessageBody) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'AUTHENTICATION_REQUEST'
	if jsonDict["type"] == "AUTHENTICATION_REQUEST" {
		// try to unmarshal JSON data into MessageAuthenticationRequestBody
		err = json.Unmarshal(data, &dst.MessageAuthenticationRequestBody)
		if err == nil {
			jsonMessageAuthenticationRequestBody, _ := json.Marshal(dst.MessageAuthenticationRequestBody)
			if string(jsonMessageAuthenticationRequestBody) == "{}" { // empty struct
				dst.MessageAuthenticationRequestBody = nil
			} else {
				return nil // data stored in dst.MessageAuthenticationRequestBody, return on the first match
			}
		} else {
			dst.MessageAuthenticationRequestBody = nil
		}
	}
	// check if the discriminator value is 'CAROUSEL'
	if jsonDict["type"] == "CAROUSEL" {
		// try to unmarshal JSON data into MessageCarouselBody
		err = json.Unmarshal(data, &dst.MessageCarouselBody)
		if err == nil {
			jsonMessageCarouselBody, _ := json.Marshal(dst.MessageCarouselBody)
			if string(jsonMessageCarouselBody) == "{}" { // empty struct
				dst.MessageCarouselBody = nil
			} else {
				return nil // data stored in dst.MessageCarouselBody, return on the first match
			}
		} else {
			dst.MessageCarouselBody = nil
		}
	}
	// check if the discriminator value is 'CONTACT'
	if jsonDict["type"] == "CONTACT" {
		// try to unmarshal JSON data into MessageContactBody
		err = json.Unmarshal(data, &dst.MessageContactBody)
		if err == nil {
			jsonMessageContactBody, _ := json.Marshal(dst.MessageContactBody)
			if string(jsonMessageContactBody) == "{}" { // empty struct
				dst.MessageContactBody = nil
			} else {
				return nil // data stored in dst.MessageContactBody, return on the first match
			}
		} else {
			dst.MessageContactBody = nil
		}
	}
	// check if the discriminator value is 'DOCUMENT'
	if jsonDict["type"] == "DOCUMENT" {
		// try to unmarshal JSON data into MessageDocumentBody
		err = json.Unmarshal(data, &dst.MessageDocumentBody)
		if err == nil {
			jsonMessageDocumentBody, _ := json.Marshal(dst.MessageDocumentBody)
			if string(jsonMessageDocumentBody) == "{}" { // empty struct
				dst.MessageDocumentBody = nil
			} else {
				return nil // data stored in dst.MessageDocumentBody, return on the first match
			}
		} else {
			dst.MessageDocumentBody = nil
		}
	}
	// check if the discriminator value is 'IMAGE'
	if jsonDict["type"] == "IMAGE" {
		// try to unmarshal JSON data into MessageImageBody
		err = json.Unmarshal(data, &dst.MessageImageBody)
		if err == nil {
			jsonMessageImageBody, _ := json.Marshal(dst.MessageImageBody)
			if string(jsonMessageImageBody) == "{}" { // empty struct
				dst.MessageImageBody = nil
			} else {
				return nil // data stored in dst.MessageImageBody, return on the first match
			}
		} else {
			dst.MessageImageBody = nil
		}
	}
	// check if the discriminator value is 'LIST'
	if jsonDict["type"] == "LIST" {
		// try to unmarshal JSON data into MessageListBody
		err = json.Unmarshal(data, &dst.MessageListBody)
		if err == nil {
			jsonMessageListBody, _ := json.Marshal(dst.MessageListBody)
			if string(jsonMessageListBody) == "{}" { // empty struct
				dst.MessageListBody = nil
			} else {
				return nil // data stored in dst.MessageListBody, return on the first match
			}
		} else {
			dst.MessageListBody = nil
		}
	}
	// check if the discriminator value is 'LOCATION'
	if jsonDict["type"] == "LOCATION" {
		// try to unmarshal JSON data into MessageLocationBody
		err = json.Unmarshal(data, &dst.MessageLocationBody)
		if err == nil {
			jsonMessageLocationBody, _ := json.Marshal(dst.MessageLocationBody)
			if string(jsonMessageLocationBody) == "{}" { // empty struct
				dst.MessageLocationBody = nil
			} else {
				return nil // data stored in dst.MessageLocationBody, return on the first match
			}
		} else {
			dst.MessageLocationBody = nil
		}
	}
	// check if the discriminator value is 'RICH_LINK'
	if jsonDict["type"] == "RICH_LINK" {
		// try to unmarshal JSON data into MessageRichLinkBody
		err = json.Unmarshal(data, &dst.MessageRichLinkBody)
		if err == nil {
			jsonMessageRichLinkBody, _ := json.Marshal(dst.MessageRichLinkBody)
			if string(jsonMessageRichLinkBody) == "{}" { // empty struct
				dst.MessageRichLinkBody = nil
			} else {
				return nil // data stored in dst.MessageRichLinkBody, return on the first match
			}
		} else {
			dst.MessageRichLinkBody = nil
		}
	}
	// check if the discriminator value is 'STICKER'
	if jsonDict["type"] == "STICKER" {
		// try to unmarshal JSON data into MessageStickerBody
		err = json.Unmarshal(data, &dst.MessageStickerBody)
		if err == nil {
			jsonMessageStickerBody, _ := json.Marshal(dst.MessageStickerBody)
			if string(jsonMessageStickerBody) == "{}" { // empty struct
				dst.MessageStickerBody = nil
			} else {
				return nil // data stored in dst.MessageStickerBody, return on the first match
			}
		} else {
			dst.MessageStickerBody = nil
		}
	}
	// check if the discriminator value is 'TEXT'
	if jsonDict["type"] == "TEXT" {
		// try to unmarshal JSON data into MessageTextBody
		err = json.Unmarshal(data, &dst.MessageTextBody)
		if err == nil {
			jsonMessageTextBody, _ := json.Marshal(dst.MessageTextBody)
			if string(jsonMessageTextBody) == "{}" { // empty struct
				dst.MessageTextBody = nil
			} else {
				return nil // data stored in dst.MessageTextBody, return on the first match
			}
		} else {
			dst.MessageTextBody = nil
		}
	}
	// check if the discriminator value is 'VIDEO'
	if jsonDict["type"] == "VIDEO" {
		// try to unmarshal JSON data into MessageVideoBody
		err = json.Unmarshal(data, &dst.MessageVideoBody)
		if err == nil {
			jsonMessageVideoBody, _ := json.Marshal(dst.MessageVideoBody)
			if string(jsonMessageVideoBody) == "{}" { // empty struct
				dst.MessageVideoBody = nil
			} else {
				return nil // data stored in dst.MessageVideoBody, return on the first match
			}
		} else {
			dst.MessageVideoBody = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(MessageBody)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageBody) MarshalJSON() ([]byte, error) {
	if src.MessageAuthenticationRequestBody != nil {
		return json.Marshal(&src.MessageAuthenticationRequestBody)
	}
	if src.MessageCarouselBody != nil {
		return json.Marshal(&src.MessageCarouselBody)
	}
	if src.MessageContactBody != nil {
		return json.Marshal(&src.MessageContactBody)
	}
	if src.MessageDocumentBody != nil {
		return json.Marshal(&src.MessageDocumentBody)
	}
	if src.MessageImageBody != nil {
		return json.Marshal(&src.MessageImageBody)
	}
	if src.MessageListBody != nil {
		return json.Marshal(&src.MessageListBody)
	}
	if src.MessageLocationBody != nil {
		return json.Marshal(&src.MessageLocationBody)
	}
	if src.MessageRichLinkBody != nil {
		return json.Marshal(&src.MessageRichLinkBody)
	}
	if src.MessageStickerBody != nil {
		return json.Marshal(&src.MessageStickerBody)
	}
	if src.MessageTextBody != nil {
		return json.Marshal(&src.MessageTextBody)
	}
	if src.MessageVideoBody != nil {
		return json.Marshal(&src.MessageVideoBody)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *MessageBody) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageAuthenticationRequestBody != nil {
		return obj.MessageAuthenticationRequestBody
	}
	if obj.MessageCarouselBody != nil {
		return obj.MessageCarouselBody
	}
	if obj.MessageContactBody != nil {
		return obj.MessageContactBody
	}
	if obj.MessageDocumentBody != nil {
		return obj.MessageDocumentBody
	}
	if obj.MessageImageBody != nil {
		return obj.MessageImageBody
	}
	if obj.MessageListBody != nil {
		return obj.MessageListBody
	}
	if obj.MessageLocationBody != nil {
		return obj.MessageLocationBody
	}
	if obj.MessageRichLinkBody != nil {
		return obj.MessageRichLinkBody
	}
	if obj.MessageStickerBody != nil {
		return obj.MessageStickerBody
	}
	if obj.MessageTextBody != nil {
		return obj.MessageTextBody
	}
	if obj.MessageVideoBody != nil {
		return obj.MessageVideoBody
	}
	// all schemas are nil
	return nil
}

type NullableMessageBody struct {
	value *MessageBody
	isSet bool
}

func (v NullableMessageBody) Get() *MessageBody {
	return v.value
}

func (v *NullableMessageBody) Set(val *MessageBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageBody(val *MessageBody) *NullableMessageBody {
	return &NullableMessageBody{value: val, isSet: true}
}

func (v NullableMessageBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

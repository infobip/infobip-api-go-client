/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the AdvancedVoiceMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedVoiceMessage{}

// AdvancedVoiceMessage Array of messages to be sent, one object per every message
type AdvancedVoiceMessage struct {
	// An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so that the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080, etc.) are advised.
	AudioFileUrl *string
	// Maximum possible duration of the call to be set, shown in seconds.
	CallTimeout *int32
	// Call transfers object enables transferring the ongoing call to another recipient(s) and establish a communication between your original recipient and additional one.
	CallTransfers []CallTransfer
	// Additional client's data that will be sent on the notifyUrl. The maximum value is 700 characters. Example:  `Text containing some additional data needed in Delivery Report`.
	CallbackData       *string
	DeliveryTimeWindow *DeliveryTimeWindow
	// Message destination addresses. Destination address must be in the E.164 standard format (Example: 41793026727). Maximum number of destination addresses is 20k.
	Destinations []Destination
	// The waiting period for end user to enter DTMF digits. Default value is `10` seconds.
	DtmfTimeout *int32
	// Numeric sender ID in E.164 standard format (Example: 41793026727). This is caller ID that will be presented to the end user where applicable.
	From *string
	// If the message is in text format, the language in which the message is written must be defined for correct pronunciation. More about Text-to-speech functionality and supported TTS languages can be found [here](https://www.infobip.com/docs/voice-and-video/outbound-calls#text-to-speech-voice-over-broadcast). If not set, default language is `English [en]`. If voice is not set, then default voice for that specific language is used. In the case of English language, the voice is `[Joanna]`.
	Language *string
	// Used for enabling detection of answering machine after the call has been answered. It can be set to `hangup` or `continue`. When set to `hangup`, if a machine is detected call will hang up. When set to `continue`, if a machine is detected, then voice message starts playing into voice mail after the answering message is finished with its greeting. If machineDetection is used, there is a minimum of 4 seconds detection time, which can result in delay of playing the message. Answering machine detection is additionally charged. For more information please contact your account manager and check documentation on Answering Machine Detection.
	MachineDetection *string
	// Defines the maximum number of DTMF codes entered by end user that would be collected.
	MaxDtmf *int32
	// Preferred Delivery report content type. Can be `application/json` or `application/xml`. [Read more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
	NotifyContentType *string
	// Specifies the version of the Delivery report to be sent. Can be `1` ([deprecated version 1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or `2` ([current version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2. [Read more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
	NotifyContentVersion *int32
	// The URL on your callback server on which the Delivery report will be sent.
	NotifyUrl *string
	// Period of time in seconds between end user answering the call and message starting to be played. Minimal value is `0` and maximum value is 10 seconds. Default value is `0`.
	Pause *int32
	// Specify DTMF code that is used as an indicator to repeat the voice message to the end user. The # key cannot be collected, as it is reserved for user input termination. Message can be repeated up to 5 times.
	RepeatDtmf *string
	Retry      *Retry
	// Ringing duration, unless there are no operator limitations. Default value is `45`. Note: There are no limitations on the Voice platform regarding this value, however, most of the operators have their own ring timeout limitations and it is advisable to keep the ringTimeout value up to `45` seconds.
	RingTimeout *int32
	// Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time).
	SendAt       *Time
	SendingSpeed *SendingSpeed
	// The reproduction speed of speech in the resulting message. Effective only when using text. Supported range is from `0.5` (slow down speech) to `2` (speed up speech). Values less than `0.5` will be replaced with `0.5`, and values higher than `2` will be replaced with `2`. Default value is `1`.
	SpeechRate *float64
	// Text of the message that will be sent. Message text can be up to 1400 characters long and cannot contain only punctuation. Adding _pauses_ between the words and extending the duration of the voice message is possible by using the comma character `“,”`. For example, if you want to have a 3 second pause after each word, then the text parameter should look like this `“one,,,,,,two,,,,,,three,,,,,,”`. Each comma creates a pause of 0.5 seconds. SSML (_Speech Synthesis Markup Language_) is supported and can be used to fully customize pronunciation of the provided text.
	Text *string
	// The message validity period shown in minutes. When the period expires, it will not be allowed for the message to be sent. A validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
	ValidityPeriod *int32
	Voice          *Voice
}

type _AdvancedVoiceMessage AdvancedVoiceMessage

// NewAdvancedVoiceMessage instantiates a new AdvancedVoiceMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAdvancedVoiceMessage(destinations []Destination) *AdvancedVoiceMessage {
	this := AdvancedVoiceMessage{}
	this.Destinations = destinations
	return &this
}

// NewAdvancedVoiceMessageWithDefaults instantiates a new AdvancedVoiceMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedVoiceMessageWithDefaults() *AdvancedVoiceMessage {
	this := AdvancedVoiceMessage{}

	return &this
}

// GetAudioFileUrl returns the AudioFileUrl field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetAudioFileUrl() string {
	if o == nil || IsNil(o.AudioFileUrl) {
		var ret string
		return ret
	}
	return *o.AudioFileUrl
}

// GetAudioFileUrlOk returns a tuple with the AudioFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetAudioFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioFileUrl) {
		return nil, false
	}
	return o.AudioFileUrl, true
}

// HasAudioFileUrl returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasAudioFileUrl() bool {
	if o != nil && !IsNil(o.AudioFileUrl) {
		return true
	}

	return false
}

// SetAudioFileUrl gets a reference to the given string and assigns it to the AudioFileUrl field.
func (o *AdvancedVoiceMessage) SetAudioFileUrl(v string) {
	o.AudioFileUrl = &v
}

// GetCallTimeout returns the CallTimeout field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetCallTimeout() int32 {
	if o == nil || IsNil(o.CallTimeout) {
		var ret int32
		return ret
	}
	return *o.CallTimeout
}

// GetCallTimeoutOk returns a tuple with the CallTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetCallTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.CallTimeout) {
		return nil, false
	}
	return o.CallTimeout, true
}

// HasCallTimeout returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasCallTimeout() bool {
	if o != nil && !IsNil(o.CallTimeout) {
		return true
	}

	return false
}

// SetCallTimeout gets a reference to the given int32 and assigns it to the CallTimeout field.
func (o *AdvancedVoiceMessage) SetCallTimeout(v int32) {
	o.CallTimeout = &v
}

// GetCallTransfers returns the CallTransfers field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetCallTransfers() []CallTransfer {
	if o == nil || IsNil(o.CallTransfers) {
		var ret []CallTransfer
		return ret
	}
	return o.CallTransfers
}

// GetCallTransfersOk returns a tuple with the CallTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetCallTransfersOk() ([]CallTransfer, bool) {
	if o == nil || IsNil(o.CallTransfers) {
		return nil, false
	}
	return o.CallTransfers, true
}

// HasCallTransfers returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasCallTransfers() bool {
	if o != nil && !IsNil(o.CallTransfers) {
		return true
	}

	return false
}

// SetCallTransfers gets a reference to the given []CallTransfer and assigns it to the CallTransfers field.
func (o *AdvancedVoiceMessage) SetCallTransfers(v []CallTransfer) {
	o.CallTransfers = v
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetCallbackData() string {
	if o == nil || IsNil(o.CallbackData) {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetCallbackDataOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackData) {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasCallbackData() bool {
	if o != nil && !IsNil(o.CallbackData) {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *AdvancedVoiceMessage) SetCallbackData(v string) {
	o.CallbackData = &v
}

// GetDeliveryTimeWindow returns the DeliveryTimeWindow field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetDeliveryTimeWindow() DeliveryTimeWindow {
	if o == nil || IsNil(o.DeliveryTimeWindow) {
		var ret DeliveryTimeWindow
		return ret
	}
	return *o.DeliveryTimeWindow
}

// GetDeliveryTimeWindowOk returns a tuple with the DeliveryTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetDeliveryTimeWindowOk() (*DeliveryTimeWindow, bool) {
	if o == nil || IsNil(o.DeliveryTimeWindow) {
		return nil, false
	}
	return o.DeliveryTimeWindow, true
}

// HasDeliveryTimeWindow returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasDeliveryTimeWindow() bool {
	if o != nil && !IsNil(o.DeliveryTimeWindow) {
		return true
	}

	return false
}

// SetDeliveryTimeWindow gets a reference to the given DeliveryTimeWindow and assigns it to the DeliveryTimeWindow field.
func (o *AdvancedVoiceMessage) SetDeliveryTimeWindow(v DeliveryTimeWindow) {
	o.DeliveryTimeWindow = &v
}

// GetDestinations returns the Destinations field value
func (o *AdvancedVoiceMessage) GetDestinations() []Destination {
	if o == nil {
		var ret []Destination
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetDestinationsOk() ([]Destination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *AdvancedVoiceMessage) SetDestinations(v []Destination) {
	o.Destinations = v
}

// GetDtmfTimeout returns the DtmfTimeout field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetDtmfTimeout() int32 {
	if o == nil || IsNil(o.DtmfTimeout) {
		var ret int32
		return ret
	}
	return *o.DtmfTimeout
}

// GetDtmfTimeoutOk returns a tuple with the DtmfTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetDtmfTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.DtmfTimeout) {
		return nil, false
	}
	return o.DtmfTimeout, true
}

// HasDtmfTimeout returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasDtmfTimeout() bool {
	if o != nil && !IsNil(o.DtmfTimeout) {
		return true
	}

	return false
}

// SetDtmfTimeout gets a reference to the given int32 and assigns it to the DtmfTimeout field.
func (o *AdvancedVoiceMessage) SetDtmfTimeout(v int32) {
	o.DtmfTimeout = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *AdvancedVoiceMessage) SetFrom(v string) {
	o.From = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AdvancedVoiceMessage) SetLanguage(v string) {
	o.Language = &v
}

// GetMachineDetection returns the MachineDetection field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetMachineDetection() string {
	if o == nil || IsNil(o.MachineDetection) {
		var ret string
		return ret
	}
	return *o.MachineDetection
}

// GetMachineDetectionOk returns a tuple with the MachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetMachineDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.MachineDetection) {
		return nil, false
	}
	return o.MachineDetection, true
}

// HasMachineDetection returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasMachineDetection() bool {
	if o != nil && !IsNil(o.MachineDetection) {
		return true
	}

	return false
}

// SetMachineDetection gets a reference to the given string and assigns it to the MachineDetection field.
func (o *AdvancedVoiceMessage) SetMachineDetection(v string) {
	o.MachineDetection = &v
}

// GetMaxDtmf returns the MaxDtmf field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetMaxDtmf() int32 {
	if o == nil || IsNil(o.MaxDtmf) {
		var ret int32
		return ret
	}
	return *o.MaxDtmf
}

// GetMaxDtmfOk returns a tuple with the MaxDtmf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetMaxDtmfOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDtmf) {
		return nil, false
	}
	return o.MaxDtmf, true
}

// HasMaxDtmf returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasMaxDtmf() bool {
	if o != nil && !IsNil(o.MaxDtmf) {
		return true
	}

	return false
}

// SetMaxDtmf gets a reference to the given int32 and assigns it to the MaxDtmf field.
func (o *AdvancedVoiceMessage) SetMaxDtmf(v int32) {
	o.MaxDtmf = &v
}

// GetNotifyContentType returns the NotifyContentType field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetNotifyContentType() string {
	if o == nil || IsNil(o.NotifyContentType) {
		var ret string
		return ret
	}
	return *o.NotifyContentType
}

// GetNotifyContentTypeOk returns a tuple with the NotifyContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetNotifyContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyContentType) {
		return nil, false
	}
	return o.NotifyContentType, true
}

// HasNotifyContentType returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasNotifyContentType() bool {
	if o != nil && !IsNil(o.NotifyContentType) {
		return true
	}

	return false
}

// SetNotifyContentType gets a reference to the given string and assigns it to the NotifyContentType field.
func (o *AdvancedVoiceMessage) SetNotifyContentType(v string) {
	o.NotifyContentType = &v
}

// GetNotifyContentVersion returns the NotifyContentVersion field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetNotifyContentVersion() int32 {
	if o == nil || IsNil(o.NotifyContentVersion) {
		var ret int32
		return ret
	}
	return *o.NotifyContentVersion
}

// GetNotifyContentVersionOk returns a tuple with the NotifyContentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetNotifyContentVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.NotifyContentVersion) {
		return nil, false
	}
	return o.NotifyContentVersion, true
}

// HasNotifyContentVersion returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasNotifyContentVersion() bool {
	if o != nil && !IsNil(o.NotifyContentVersion) {
		return true
	}

	return false
}

// SetNotifyContentVersion gets a reference to the given int32 and assigns it to the NotifyContentVersion field.
func (o *AdvancedVoiceMessage) SetNotifyContentVersion(v int32) {
	o.NotifyContentVersion = &v
}

// GetNotifyUrl returns the NotifyUrl field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetNotifyUrl() string {
	if o == nil || IsNil(o.NotifyUrl) {
		var ret string
		return ret
	}
	return *o.NotifyUrl
}

// GetNotifyUrlOk returns a tuple with the NotifyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetNotifyUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyUrl) {
		return nil, false
	}
	return o.NotifyUrl, true
}

// HasNotifyUrl returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasNotifyUrl() bool {
	if o != nil && !IsNil(o.NotifyUrl) {
		return true
	}

	return false
}

// SetNotifyUrl gets a reference to the given string and assigns it to the NotifyUrl field.
func (o *AdvancedVoiceMessage) SetNotifyUrl(v string) {
	o.NotifyUrl = &v
}

// GetPause returns the Pause field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetPause() int32 {
	if o == nil || IsNil(o.Pause) {
		var ret int32
		return ret
	}
	return *o.Pause
}

// GetPauseOk returns a tuple with the Pause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetPauseOk() (*int32, bool) {
	if o == nil || IsNil(o.Pause) {
		return nil, false
	}
	return o.Pause, true
}

// HasPause returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasPause() bool {
	if o != nil && !IsNil(o.Pause) {
		return true
	}

	return false
}

// SetPause gets a reference to the given int32 and assigns it to the Pause field.
func (o *AdvancedVoiceMessage) SetPause(v int32) {
	o.Pause = &v
}

// GetRepeatDtmf returns the RepeatDtmf field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetRepeatDtmf() string {
	if o == nil || IsNil(o.RepeatDtmf) {
		var ret string
		return ret
	}
	return *o.RepeatDtmf
}

// GetRepeatDtmfOk returns a tuple with the RepeatDtmf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetRepeatDtmfOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatDtmf) {
		return nil, false
	}
	return o.RepeatDtmf, true
}

// HasRepeatDtmf returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasRepeatDtmf() bool {
	if o != nil && !IsNil(o.RepeatDtmf) {
		return true
	}

	return false
}

// SetRepeatDtmf gets a reference to the given string and assigns it to the RepeatDtmf field.
func (o *AdvancedVoiceMessage) SetRepeatDtmf(v string) {
	o.RepeatDtmf = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetRetry() Retry {
	if o == nil || IsNil(o.Retry) {
		var ret Retry
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetRetryOk() (*Retry, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given Retry and assigns it to the Retry field.
func (o *AdvancedVoiceMessage) SetRetry(v Retry) {
	o.Retry = &v
}

// GetRingTimeout returns the RingTimeout field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetRingTimeout() int32 {
	if o == nil || IsNil(o.RingTimeout) {
		var ret int32
		return ret
	}
	return *o.RingTimeout
}

// GetRingTimeoutOk returns a tuple with the RingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetRingTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RingTimeout) {
		return nil, false
	}
	return o.RingTimeout, true
}

// HasRingTimeout returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasRingTimeout() bool {
	if o != nil && !IsNil(o.RingTimeout) {
		return true
	}

	return false
}

// SetRingTimeout gets a reference to the given int32 and assigns it to the RingTimeout field.
func (o *AdvancedVoiceMessage) SetRingTimeout(v int32) {
	o.RingTimeout = &v
}

// GetSendAt returns the SendAt field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetSendAt() Time {
	if o == nil || IsNil(o.SendAt) {
		var ret Time
		return ret
	}
	return *o.SendAt
}

// GetSendAtOk returns a tuple with the SendAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetSendAtOk() (*Time, bool) {
	if o == nil || IsNil(o.SendAt) {
		return nil, false
	}
	return o.SendAt, true
}

// HasSendAt returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasSendAt() bool {
	if o != nil && !IsNil(o.SendAt) {
		return true
	}

	return false
}

// SetSendAt gets a reference to the given Time and assigns it to the SendAt field.
func (o *AdvancedVoiceMessage) SetSendAt(v Time) {
	o.SendAt = &v
}

// GetSendingSpeed returns the SendingSpeed field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetSendingSpeed() SendingSpeed {
	if o == nil || IsNil(o.SendingSpeed) {
		var ret SendingSpeed
		return ret
	}
	return *o.SendingSpeed
}

// GetSendingSpeedOk returns a tuple with the SendingSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetSendingSpeedOk() (*SendingSpeed, bool) {
	if o == nil || IsNil(o.SendingSpeed) {
		return nil, false
	}
	return o.SendingSpeed, true
}

// HasSendingSpeed returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasSendingSpeed() bool {
	if o != nil && !IsNil(o.SendingSpeed) {
		return true
	}

	return false
}

// SetSendingSpeed gets a reference to the given SendingSpeed and assigns it to the SendingSpeed field.
func (o *AdvancedVoiceMessage) SetSendingSpeed(v SendingSpeed) {
	o.SendingSpeed = &v
}

// GetSpeechRate returns the SpeechRate field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetSpeechRate() float64 {
	if o == nil || IsNil(o.SpeechRate) {
		var ret float64
		return ret
	}
	return *o.SpeechRate
}

// GetSpeechRateOk returns a tuple with the SpeechRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetSpeechRateOk() (*float64, bool) {
	if o == nil || IsNil(o.SpeechRate) {
		return nil, false
	}
	return o.SpeechRate, true
}

// HasSpeechRate returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasSpeechRate() bool {
	if o != nil && !IsNil(o.SpeechRate) {
		return true
	}

	return false
}

// SetSpeechRate gets a reference to the given float64 and assigns it to the SpeechRate field.
func (o *AdvancedVoiceMessage) SetSpeechRate(v float64) {
	o.SpeechRate = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *AdvancedVoiceMessage) SetText(v string) {
	o.Text = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetValidityPeriod() int32 {
	if o == nil || IsNil(o.ValidityPeriod) {
		var ret int32
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetValidityPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasValidityPeriod() bool {
	if o != nil && !IsNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given int32 and assigns it to the ValidityPeriod field.
func (o *AdvancedVoiceMessage) SetValidityPeriod(v int32) {
	o.ValidityPeriod = &v
}

// GetVoice returns the Voice field value if set, zero value otherwise.
func (o *AdvancedVoiceMessage) GetVoice() Voice {
	if o == nil || IsNil(o.Voice) {
		var ret Voice
		return ret
	}
	return *o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedVoiceMessage) GetVoiceOk() (*Voice, bool) {
	if o == nil || IsNil(o.Voice) {
		return nil, false
	}
	return o.Voice, true
}

// HasVoice returns a boolean if a field has been set.
func (o *AdvancedVoiceMessage) HasVoice() bool {
	if o != nil && !IsNil(o.Voice) {
		return true
	}

	return false
}

// SetVoice gets a reference to the given Voice and assigns it to the Voice field.
func (o *AdvancedVoiceMessage) SetVoice(v Voice) {
	o.Voice = &v
}

func (o AdvancedVoiceMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedVoiceMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioFileUrl) {
		toSerialize["audioFileUrl"] = o.AudioFileUrl
	}
	if !IsNil(o.CallTimeout) {
		toSerialize["callTimeout"] = o.CallTimeout
	}
	if !IsNil(o.CallTransfers) {
		toSerialize["callTransfers"] = o.CallTransfers
	}
	if !IsNil(o.CallbackData) {
		toSerialize["callbackData"] = o.CallbackData
	}
	if !IsNil(o.DeliveryTimeWindow) {
		toSerialize["deliveryTimeWindow"] = o.DeliveryTimeWindow
	}
	toSerialize["destinations"] = o.Destinations
	if !IsNil(o.DtmfTimeout) {
		toSerialize["dtmfTimeout"] = o.DtmfTimeout
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MachineDetection) {
		toSerialize["machineDetection"] = o.MachineDetection
	}
	if !IsNil(o.MaxDtmf) {
		toSerialize["maxDtmf"] = o.MaxDtmf
	}
	if !IsNil(o.NotifyContentType) {
		toSerialize["notifyContentType"] = o.NotifyContentType
	}
	if !IsNil(o.NotifyContentVersion) {
		toSerialize["notifyContentVersion"] = o.NotifyContentVersion
	}
	if !IsNil(o.NotifyUrl) {
		toSerialize["notifyUrl"] = o.NotifyUrl
	}
	if !IsNil(o.Pause) {
		toSerialize["pause"] = o.Pause
	}
	if !IsNil(o.RepeatDtmf) {
		toSerialize["repeatDtmf"] = o.RepeatDtmf
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.RingTimeout) {
		toSerialize["ringTimeout"] = o.RingTimeout
	}
	if !IsNil(o.SendAt) {
		toSerialize["sendAt"] = o.SendAt
	}
	if !IsNil(o.SendingSpeed) {
		toSerialize["sendingSpeed"] = o.SendingSpeed
	}
	if !IsNil(o.SpeechRate) {
		toSerialize["speechRate"] = o.SpeechRate
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	if !IsNil(o.Voice) {
		toSerialize["voice"] = o.Voice
	}
	return toSerialize, nil
}

type NullableAdvancedVoiceMessage struct {
	value *AdvancedVoiceMessage
	isSet bool
}

func (v NullableAdvancedVoiceMessage) Get() *AdvancedVoiceMessage {
	return v.value
}

func (v *NullableAdvancedVoiceMessage) Set(val *AdvancedVoiceMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedVoiceMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedVoiceMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedVoiceMessage(val *AdvancedVoiceMessage) *NullableAdvancedVoiceMessage {
	return &NullableAdvancedVoiceMessage{value: val, isSet: true}
}

func (v NullableAdvancedVoiceMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedVoiceMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

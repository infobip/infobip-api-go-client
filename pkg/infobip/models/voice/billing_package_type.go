/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// BillingPackageType Billing package type.
type BillingPackageType string

// List of BillingPackageType
const (
	BILLINGPACKAGETYPE_METERED   BillingPackageType = "METERED"
	BILLINGPACKAGETYPE_UNLIMITED BillingPackageType = "UNLIMITED"
)

// All allowed values of BillingPackageType enum
var AllowedBillingPackageTypeEnumValues = []BillingPackageType{
	"METERED",
	"UNLIMITED",
}

func (v *BillingPackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingPackageType(value)
	for _, existing := range AllowedBillingPackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingPackageType", value)
}

// NewBillingPackageTypeFromValue returns a pointer to a valid BillingPackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingPackageTypeFromValue(v string) (*BillingPackageType, error) {
	ev := BillingPackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingPackageType: valid values are %v", v, AllowedBillingPackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingPackageType) IsValid() bool {
	for _, existing := range AllowedBillingPackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingPackageType value
func (v BillingPackageType) Ptr() *BillingPackageType {
	return &v
}

type NullableBillingPackageType struct {
	value *BillingPackageType
	isSet bool
}

func (v NullableBillingPackageType) Get() *BillingPackageType {
	return v.value
}

func (v *NullableBillingPackageType) Set(val *BillingPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPackageType(val *BillingPackageType) *NullableBillingPackageType {
	return &NullableBillingPackageType{value: val, isSet: true}
}

func (v NullableBillingPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallRoutingSipHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRoutingSipHeader{}

// CallRoutingSipHeader SIP headers. To meet the criteria, all of the provided headers must match.
type CallRoutingSipHeader struct {
	// SIP header name starting with `X-`. Example: `X-Identity`.
	HeaderName string
	// SIP header value or regular expression pattern representing the value. Examples: `john.doe`, `john(.+)`.
	HeaderValue *string
}

type _CallRoutingSipHeader CallRoutingSipHeader

// NewCallRoutingSipHeader instantiates a new CallRoutingSipHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallRoutingSipHeader(headerName string) *CallRoutingSipHeader {
	this := CallRoutingSipHeader{}
	this.HeaderName = headerName
	return &this
}

// NewCallRoutingSipHeaderWithDefaults instantiates a new CallRoutingSipHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRoutingSipHeaderWithDefaults() *CallRoutingSipHeader {
	this := CallRoutingSipHeader{}

	return &this
}

// GetHeaderName returns the HeaderName field value
func (o *CallRoutingSipHeader) GetHeaderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeaderName
}

// GetHeaderNameOk returns a tuple with the HeaderName field value
// and a boolean to check if the value has been set.
func (o *CallRoutingSipHeader) GetHeaderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeaderName, true
}

// SetHeaderName sets field value
func (o *CallRoutingSipHeader) SetHeaderName(v string) {
	o.HeaderName = v
}

// GetHeaderValue returns the HeaderValue field value if set, zero value otherwise.
func (o *CallRoutingSipHeader) GetHeaderValue() string {
	if o == nil || IsNil(o.HeaderValue) {
		var ret string
		return ret
	}
	return *o.HeaderValue
}

// GetHeaderValueOk returns a tuple with the HeaderValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRoutingSipHeader) GetHeaderValueOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderValue) {
		return nil, false
	}
	return o.HeaderValue, true
}

// HasHeaderValue returns a boolean if a field has been set.
func (o *CallRoutingSipHeader) HasHeaderValue() bool {
	if o != nil && !IsNil(o.HeaderValue) {
		return true
	}

	return false
}

// SetHeaderValue gets a reference to the given string and assigns it to the HeaderValue field.
func (o *CallRoutingSipHeader) SetHeaderValue(v string) {
	o.HeaderValue = &v
}

func (o CallRoutingSipHeader) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRoutingSipHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headerName"] = o.HeaderName
	if !IsNil(o.HeaderValue) {
		toSerialize["headerValue"] = o.HeaderValue
	}
	return toSerialize, nil
}

type NullableCallRoutingSipHeader struct {
	value *CallRoutingSipHeader
	isSet bool
}

func (v NullableCallRoutingSipHeader) Get() *CallRoutingSipHeader {
	return v.value
}

func (v *NullableCallRoutingSipHeader) Set(val *CallRoutingSipHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRoutingSipHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRoutingSipHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRoutingSipHeader(val *CallRoutingSipHeader) *NullableCallRoutingSipHeader {
	return &NullableCallRoutingSipHeader{value: val, isSet: true}
}

func (v NullableCallRoutingSipHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRoutingSipHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// TemplateButton List of buttons of a template message.
type TemplateButton struct {
	TemplateCatalogButton      *TemplateCatalogButton
	TemplateCopyCodeButton     *TemplateCopyCodeButton
	TemplateFlowButton         *TemplateFlowButton
	TemplateMultiProductButton *TemplateMultiProductButton
	TemplateOpenUrlButton      *TemplateOpenUrlButton
	TemplatePhoneNumberButton  *TemplatePhoneNumberButton
	TemplateQuickReplyButton   *TemplateQuickReplyButton
}

// TemplateCatalogButtonAsTemplateButton is a convenience function that returns TemplateCatalogButton wrapped in TemplateButton
func TemplateCatalogButtonAsTemplateButton(v *TemplateCatalogButton) TemplateButton {
	return TemplateButton{
		TemplateCatalogButton: v,
	}
}

// TemplateCopyCodeButtonAsTemplateButton is a convenience function that returns TemplateCopyCodeButton wrapped in TemplateButton
func TemplateCopyCodeButtonAsTemplateButton(v *TemplateCopyCodeButton) TemplateButton {
	return TemplateButton{
		TemplateCopyCodeButton: v,
	}
}

// TemplateFlowButtonAsTemplateButton is a convenience function that returns TemplateFlowButton wrapped in TemplateButton
func TemplateFlowButtonAsTemplateButton(v *TemplateFlowButton) TemplateButton {
	return TemplateButton{
		TemplateFlowButton: v,
	}
}

// TemplateMultiProductButtonAsTemplateButton is a convenience function that returns TemplateMultiProductButton wrapped in TemplateButton
func TemplateMultiProductButtonAsTemplateButton(v *TemplateMultiProductButton) TemplateButton {
	return TemplateButton{
		TemplateMultiProductButton: v,
	}
}

// TemplateOpenUrlButtonAsTemplateButton is a convenience function that returns TemplateOpenUrlButton wrapped in TemplateButton
func TemplateOpenUrlButtonAsTemplateButton(v *TemplateOpenUrlButton) TemplateButton {
	return TemplateButton{
		TemplateOpenUrlButton: v,
	}
}

// TemplatePhoneNumberButtonAsTemplateButton is a convenience function that returns TemplatePhoneNumberButton wrapped in TemplateButton
func TemplatePhoneNumberButtonAsTemplateButton(v *TemplatePhoneNumberButton) TemplateButton {
	return TemplateButton{
		TemplatePhoneNumberButton: v,
	}
}

// TemplateQuickReplyButtonAsTemplateButton is a convenience function that returns TemplateQuickReplyButton wrapped in TemplateButton
func TemplateQuickReplyButtonAsTemplateButton(v *TemplateQuickReplyButton) TemplateButton {
	return TemplateButton{
		TemplateQuickReplyButton: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TemplateButton) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'CATALOG'
	if jsonDict["type"] == "CATALOG" {
		// try to unmarshal JSON data into TemplateCatalogButton
		err = json.Unmarshal(data, &dst.TemplateCatalogButton)
		if err == nil {
			jsonTemplateCatalogButton, _ := json.Marshal(dst.TemplateCatalogButton)
			if string(jsonTemplateCatalogButton) == "{}" { // empty struct
				dst.TemplateCatalogButton = nil
			} else {
				return nil // data stored in dst.TemplateCatalogButton, return on the first match
			}
		} else {
			dst.TemplateCatalogButton = nil
		}
	}
	// check if the discriminator value is 'COPY_CODE'
	if jsonDict["type"] == "COPY_CODE" {
		// try to unmarshal JSON data into TemplateCopyCodeButton
		err = json.Unmarshal(data, &dst.TemplateCopyCodeButton)
		if err == nil {
			jsonTemplateCopyCodeButton, _ := json.Marshal(dst.TemplateCopyCodeButton)
			if string(jsonTemplateCopyCodeButton) == "{}" { // empty struct
				dst.TemplateCopyCodeButton = nil
			} else {
				return nil // data stored in dst.TemplateCopyCodeButton, return on the first match
			}
		} else {
			dst.TemplateCopyCodeButton = nil
		}
	}
	// check if the discriminator value is 'FLOW'
	if jsonDict["type"] == "FLOW" {
		// try to unmarshal JSON data into TemplateFlowButton
		err = json.Unmarshal(data, &dst.TemplateFlowButton)
		if err == nil {
			jsonTemplateFlowButton, _ := json.Marshal(dst.TemplateFlowButton)
			if string(jsonTemplateFlowButton) == "{}" { // empty struct
				dst.TemplateFlowButton = nil
			} else {
				return nil // data stored in dst.TemplateFlowButton, return on the first match
			}
		} else {
			dst.TemplateFlowButton = nil
		}
	}
	// check if the discriminator value is 'MULTI_PRODUCT'
	if jsonDict["type"] == "MULTI_PRODUCT" {
		// try to unmarshal JSON data into TemplateMultiProductButton
		err = json.Unmarshal(data, &dst.TemplateMultiProductButton)
		if err == nil {
			jsonTemplateMultiProductButton, _ := json.Marshal(dst.TemplateMultiProductButton)
			if string(jsonTemplateMultiProductButton) == "{}" { // empty struct
				dst.TemplateMultiProductButton = nil
			} else {
				return nil // data stored in dst.TemplateMultiProductButton, return on the first match
			}
		} else {
			dst.TemplateMultiProductButton = nil
		}
	}
	// check if the discriminator value is 'OPEN_URL'
	if jsonDict["type"] == "OPEN_URL" {
		// try to unmarshal JSON data into TemplateOpenUrlButton
		err = json.Unmarshal(data, &dst.TemplateOpenUrlButton)
		if err == nil {
			jsonTemplateOpenUrlButton, _ := json.Marshal(dst.TemplateOpenUrlButton)
			if string(jsonTemplateOpenUrlButton) == "{}" { // empty struct
				dst.TemplateOpenUrlButton = nil
			} else {
				return nil // data stored in dst.TemplateOpenUrlButton, return on the first match
			}
		} else {
			dst.TemplateOpenUrlButton = nil
		}
	}
	// check if the discriminator value is 'PHONE_NUMBER'
	if jsonDict["type"] == "PHONE_NUMBER" {
		// try to unmarshal JSON data into TemplatePhoneNumberButton
		err = json.Unmarshal(data, &dst.TemplatePhoneNumberButton)
		if err == nil {
			jsonTemplatePhoneNumberButton, _ := json.Marshal(dst.TemplatePhoneNumberButton)
			if string(jsonTemplatePhoneNumberButton) == "{}" { // empty struct
				dst.TemplatePhoneNumberButton = nil
			} else {
				return nil // data stored in dst.TemplatePhoneNumberButton, return on the first match
			}
		} else {
			dst.TemplatePhoneNumberButton = nil
		}
	}
	// check if the discriminator value is 'QUICK_REPLY'
	if jsonDict["type"] == "QUICK_REPLY" {
		// try to unmarshal JSON data into TemplateQuickReplyButton
		err = json.Unmarshal(data, &dst.TemplateQuickReplyButton)
		if err == nil {
			jsonTemplateQuickReplyButton, _ := json.Marshal(dst.TemplateQuickReplyButton)
			if string(jsonTemplateQuickReplyButton) == "{}" { // empty struct
				dst.TemplateQuickReplyButton = nil
			} else {
				return nil // data stored in dst.TemplateQuickReplyButton, return on the first match
			}
		} else {
			dst.TemplateQuickReplyButton = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(TemplateButton)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateButton) MarshalJSON() ([]byte, error) {
	if src.TemplateCatalogButton != nil {
		return json.Marshal(&src.TemplateCatalogButton)
	}
	if src.TemplateCopyCodeButton != nil {
		return json.Marshal(&src.TemplateCopyCodeButton)
	}
	if src.TemplateFlowButton != nil {
		return json.Marshal(&src.TemplateFlowButton)
	}
	if src.TemplateMultiProductButton != nil {
		return json.Marshal(&src.TemplateMultiProductButton)
	}
	if src.TemplateOpenUrlButton != nil {
		return json.Marshal(&src.TemplateOpenUrlButton)
	}
	if src.TemplatePhoneNumberButton != nil {
		return json.Marshal(&src.TemplatePhoneNumberButton)
	}
	if src.TemplateQuickReplyButton != nil {
		return json.Marshal(&src.TemplateQuickReplyButton)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *TemplateButton) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TemplateCatalogButton != nil {
		return obj.TemplateCatalogButton
	}
	if obj.TemplateCopyCodeButton != nil {
		return obj.TemplateCopyCodeButton
	}
	if obj.TemplateFlowButton != nil {
		return obj.TemplateFlowButton
	}
	if obj.TemplateMultiProductButton != nil {
		return obj.TemplateMultiProductButton
	}
	if obj.TemplateOpenUrlButton != nil {
		return obj.TemplateOpenUrlButton
	}
	if obj.TemplatePhoneNumberButton != nil {
		return obj.TemplatePhoneNumberButton
	}
	if obj.TemplateQuickReplyButton != nil {
		return obj.TemplateQuickReplyButton
	}
	// all schemas are nil
	return nil
}

type NullableTemplateButton struct {
	value *TemplateButton
	isSet bool
}

func (v NullableTemplateButton) Get() *TemplateButton {
	return v.value
}

func (v *NullableTemplateButton) Set(val *TemplateButton) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateButton) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateButton(val *TemplateButton) *NullableTemplateButton {
	return &NullableTemplateButton{value: val, isSet: true}
}

func (v NullableTemplateButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CollectOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectOptions{}

// CollectOptions struct for CollectOptions
type CollectOptions struct {
	// Maximum acceptable number of digits. Stops reading after maxdigits have been entered (without requiring the user to press '#' key). Max accepted value is 255. If set to 0 then max value is applied.
	MaxInputLength *int32
	// Timeout in seconds for user to press both first DTMF and all other inter-digit DTMFs. Default value is 5. Max value is 30.
	Timeout       *int32
	SendToReports *SendToReports
	// Map of expected collected DTMF values with some real meaning. (Example: if you have multilingual IVR, and option for users to press 1 to enter \"English\" menu, you can define {\"1\":\"English\"}, so the reporting and analysis will be easier). When this option is defined additional variable is present in the scenario. If you set your collect action variable name to myVar, then you will get additional variable myVar_Meaning containing the mapped value for a collected DTMF.
	MappedValues map[string]interface{}
}

// NewCollectOptions instantiates a new CollectOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCollectOptions() *CollectOptions {
	this := CollectOptions{}
	return &this
}

// NewCollectOptionsWithDefaults instantiates a new CollectOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectOptionsWithDefaults() *CollectOptions {
	this := CollectOptions{}

	return &this
}

// GetMaxInputLength returns the MaxInputLength field value if set, zero value otherwise.
func (o *CollectOptions) GetMaxInputLength() int32 {
	if o == nil || IsNil(o.MaxInputLength) {
		var ret int32
		return ret
	}
	return *o.MaxInputLength
}

// GetMaxInputLengthOk returns a tuple with the MaxInputLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectOptions) GetMaxInputLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxInputLength) {
		return nil, false
	}
	return o.MaxInputLength, true
}

// HasMaxInputLength returns a boolean if a field has been set.
func (o *CollectOptions) HasMaxInputLength() bool {
	if o != nil && !IsNil(o.MaxInputLength) {
		return true
	}

	return false
}

// SetMaxInputLength gets a reference to the given int32 and assigns it to the MaxInputLength field.
func (o *CollectOptions) SetMaxInputLength(v int32) {
	o.MaxInputLength = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *CollectOptions) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectOptions) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *CollectOptions) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *CollectOptions) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetSendToReports returns the SendToReports field value if set, zero value otherwise.
func (o *CollectOptions) GetSendToReports() SendToReports {
	if o == nil || IsNil(o.SendToReports) {
		var ret SendToReports
		return ret
	}
	return *o.SendToReports
}

// GetSendToReportsOk returns a tuple with the SendToReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectOptions) GetSendToReportsOk() (*SendToReports, bool) {
	if o == nil || IsNil(o.SendToReports) {
		return nil, false
	}
	return o.SendToReports, true
}

// HasSendToReports returns a boolean if a field has been set.
func (o *CollectOptions) HasSendToReports() bool {
	if o != nil && !IsNil(o.SendToReports) {
		return true
	}

	return false
}

// SetSendToReports gets a reference to the given SendToReports and assigns it to the SendToReports field.
func (o *CollectOptions) SetSendToReports(v SendToReports) {
	o.SendToReports = &v
}

// GetMappedValues returns the MappedValues field value if set, zero value otherwise.
func (o *CollectOptions) GetMappedValues() map[string]interface{} {
	if o == nil || IsNil(o.MappedValues) {
		var ret map[string]interface{}
		return ret
	}
	return o.MappedValues
}

// GetMappedValuesOk returns a tuple with the MappedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectOptions) GetMappedValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MappedValues) {
		return map[string]interface{}{}, false
	}
	return o.MappedValues, true
}

// HasMappedValues returns a boolean if a field has been set.
func (o *CollectOptions) HasMappedValues() bool {
	if o != nil && !IsNil(o.MappedValues) {
		return true
	}

	return false
}

// SetMappedValues gets a reference to the given map[string]interface{} and assigns it to the MappedValues field.
func (o *CollectOptions) SetMappedValues(v map[string]interface{}) {
	o.MappedValues = v
}

func (o CollectOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxInputLength) {
		toSerialize["maxInputLength"] = o.MaxInputLength
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.SendToReports) {
		toSerialize["sendToReports"] = o.SendToReports
	}
	if !IsNil(o.MappedValues) {
		toSerialize["mappedValues"] = o.MappedValues
	}
	return toSerialize, nil
}

type NullableCollectOptions struct {
	value *CollectOptions
	isSet bool
}

func (v NullableCollectOptions) Get() *CollectOptions {
	return v.value
}

func (v *NullableCollectOptions) Set(val *CollectOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectOptions(val *CollectOptions) *NullableCollectOptions {
	return &NullableCollectOptions{value: val, isSet: true}
}

func (v NullableCollectOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

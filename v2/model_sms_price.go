/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsPrice Sent SMS price.
type SmsPrice struct {
	// Price per one SMS.
	PricePerMessage *float64 `json:"pricePerMessage,omitempty"`
	// The currency in which the price is expressed.
	Currency *string `json:"currency,omitempty"`
}

// NewSmsPrice instantiates a new SmsPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsPrice() *SmsPrice {
	this := SmsPrice{}
	return &this
}

// NewSmsPriceWithDefaults instantiates a new SmsPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsPriceWithDefaults() *SmsPrice {
	this := SmsPrice{}
	return &this
}

// GetPricePerMessage returns the PricePerMessage field value if set, zero value otherwise.
func (o *SmsPrice) GetPricePerMessage() float64 {
	if o == nil || o.PricePerMessage == nil {
		var ret float64
		return ret
	}
	return *o.PricePerMessage
}

// GetPricePerMessageOk returns a tuple with the PricePerMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsPrice) GetPricePerMessageOk() (*float64, bool) {
	if o == nil || o.PricePerMessage == nil {
		return nil, false
	}
	return o.PricePerMessage, true
}

// HasPricePerMessage returns a boolean if a field has been set.
func (o *SmsPrice) HasPricePerMessage() bool {
	if o != nil && o.PricePerMessage != nil {
		return true
	}

	return false
}

// SetPricePerMessage gets a reference to the given float64 and assigns it to the PricePerMessage field.
func (o *SmsPrice) SetPricePerMessage(v float64) {
	o.PricePerMessage = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SmsPrice) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsPrice) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SmsPrice) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SmsPrice) SetCurrency(v string) {
	o.Currency = &v
}

func (o SmsPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PricePerMessage != nil {
		toSerialize["pricePerMessage"] = o.PricePerMessage
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableSmsPrice struct {
	value *SmsPrice
	isSet bool
}

func (v NullableSmsPrice) Get() *SmsPrice {
	return v.value
}

func (v *NullableSmsPrice) Set(val *SmsPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsPrice(val *SmsPrice) *NullableSmsPrice {
	return &NullableSmsPrice{value: val, isSet: true}
}

func (v NullableSmsPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

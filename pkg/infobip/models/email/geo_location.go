/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the GeoLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoLocation{}

// GeoLocation Geolocation data such as Country and  City. This data will be available only for opens, clicks and unsubscribes.
type GeoLocation struct {
	// Country where the user action is recorded.
	CountryName *string
	// City where the user action is recorded.
	City *string
}

// NewGeoLocation instantiates a new GeoLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewGeoLocation() *GeoLocation {
	this := GeoLocation{}
	return &this
}

// NewGeoLocationWithDefaults instantiates a new GeoLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoLocationWithDefaults() *GeoLocation {
	this := GeoLocation{}

	return &this
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *GeoLocation) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoLocation) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *GeoLocation) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *GeoLocation) SetCountryName(v string) {
	o.CountryName = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *GeoLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *GeoLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *GeoLocation) SetCity(v string) {
	o.City = &v
}

func (o GeoLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryName) {
		toSerialize["countryName"] = o.CountryName
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	return toSerialize, nil
}

type NullableGeoLocation struct {
	value *GeoLocation
	isSet bool
}

func (v NullableGeoLocation) Get() *GeoLocation {
	return v.value
}

func (v *NullableGeoLocation) Set(val *GeoLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoLocation(val *GeoLocation) *NullableGeoLocation {
	return &NullableGeoLocation{value: val, isSet: true}
}

func (v NullableGeoLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

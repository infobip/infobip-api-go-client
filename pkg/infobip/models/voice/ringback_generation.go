/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the RingbackGeneration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RingbackGeneration{}

// RingbackGeneration Option to generate a consistent local ringback tone, overriding remote ringing tones. If enabled, the ringback will be generated for the existing call, provided it joins the conference before the remote ringback of the new call starts.
type RingbackGeneration struct {
	// Flag indicating whether ringback generation is enabled. Cannot be `true` when `connectOnEarlyMedia` is `true`.
	Enabled *bool
}

// NewRingbackGeneration instantiates a new RingbackGeneration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewRingbackGeneration() *RingbackGeneration {
	this := RingbackGeneration{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewRingbackGenerationWithDefaults instantiates a new RingbackGeneration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRingbackGenerationWithDefaults() *RingbackGeneration {
	this := RingbackGeneration{}

	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RingbackGeneration) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RingbackGeneration) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RingbackGeneration) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RingbackGeneration) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o RingbackGeneration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RingbackGeneration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableRingbackGeneration struct {
	value *RingbackGeneration
	isSet bool
}

func (v NullableRingbackGeneration) Get() *RingbackGeneration {
	return v.value
}

func (v *NullableRingbackGeneration) Set(val *RingbackGeneration) {
	v.value = val
	v.isSet = true
}

func (v NullableRingbackGeneration) IsSet() bool {
	return v.isSet
}

func (v *NullableRingbackGeneration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRingbackGeneration(val *RingbackGeneration) *NullableRingbackGeneration {
	return &NullableRingbackGeneration{value: val, isSet: true}
}

func (v NullableRingbackGeneration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRingbackGeneration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

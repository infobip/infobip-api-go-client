/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the ApplicationConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationConfiguration{}

// ApplicationConfiguration Created 2FA application configuration.
type ApplicationConfiguration struct {
	// Indicates whether multiple PIN verification is allowed.
	AllowMultiplePinVerifications *bool
	// Number of possible PIN attempts.
	PinAttempts *int32
	// Validity period of PIN in specified time unit. Required format: `{timeLength}{timeUnit}`. `timeLength` is optional with a default value of 1. `timeUnit` can be set to: `ms`, `s`, `m`, `h` or `d` representing milliseconds, seconds, minutes, hours, and days respectively. Must not exceed one year, although much lower value is recommended.
	PinTimeToLive *string
	// Overall number of requests over a specififed time period for generating a PIN and sending an SMS using a single application. Required format: `{attempts}/{timeLength}{timeUnit}`. `attempts` and `timeunit` are mandatory and `timeLength` is optional with a default value of 1. `timeUnit` is one of: `ms`, `s`, `m`, `h` or `d` representing milliseconds, seconds, minutes, hours, and days respectively. Must not exceed one year, although much lower value is recommended.
	SendPinPerApplicationLimit *string
	// Number of requests over a specififed time period for generating a PIN and sending an SMS to one phone number (MSISDN). Required format: `{attempts}/{timeLength}{timeUnit}`. `attempts` and `timeunit` are mandatory and `timeLength` is optional with a default value of 1. `timeUnit` is one of: `ms`, `s`, `m`, `h` or `d` representing milliseconds, seconds, minutes, hours, and days respectively. Must not exceed one year, although much lower value is recommended.
	SendPinPerPhoneNumberLimit *string
	// The number of PIN verification requests over a specififed time period from one phone number (MSISDN). Required format: `{attempts}/{timeLength}{timeUnit}`. `attempts` and `timeunit` are mandatory and `timeLength` is optional with a default value of 1. `timeUnit` is one of: `ms`, `s`, `m`, `h` or `d` representing milliseconds, seconds, minutes, hours, and days respectively. Must not exceed one day, although much lower value is recommended.
	VerifyPinLimit *string
}

// NewApplicationConfiguration instantiates a new ApplicationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewApplicationConfiguration() *ApplicationConfiguration {
	this := ApplicationConfiguration{}
	var allowMultiplePinVerifications bool = true
	this.AllowMultiplePinVerifications = &allowMultiplePinVerifications
	var pinAttempts int32 = 10
	this.PinAttempts = &pinAttempts
	var pinTimeToLive string = "15m"
	this.PinTimeToLive = &pinTimeToLive
	var sendPinPerApplicationLimit string = "10000/1d"
	this.SendPinPerApplicationLimit = &sendPinPerApplicationLimit
	var sendPinPerPhoneNumberLimit string = "3/1d"
	this.SendPinPerPhoneNumberLimit = &sendPinPerPhoneNumberLimit
	var verifyPinLimit string = "1/3s"
	this.VerifyPinLimit = &verifyPinLimit
	return &this
}

// NewApplicationConfigurationWithDefaults instantiates a new ApplicationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationConfigurationWithDefaults() *ApplicationConfiguration {
	this := ApplicationConfiguration{}

	var allowMultiplePinVerifications bool = true
	this.AllowMultiplePinVerifications = &allowMultiplePinVerifications
	var pinAttempts int32 = 10
	this.PinAttempts = &pinAttempts
	var pinTimeToLive string = "15m"
	this.PinTimeToLive = &pinTimeToLive
	var sendPinPerApplicationLimit string = "10000/1d"
	this.SendPinPerApplicationLimit = &sendPinPerApplicationLimit
	var sendPinPerPhoneNumberLimit string = "3/1d"
	this.SendPinPerPhoneNumberLimit = &sendPinPerPhoneNumberLimit
	var verifyPinLimit string = "1/3s"
	this.VerifyPinLimit = &verifyPinLimit
	return &this
}

// GetAllowMultiplePinVerifications returns the AllowMultiplePinVerifications field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetAllowMultiplePinVerifications() bool {
	if o == nil || IsNil(o.AllowMultiplePinVerifications) {
		var ret bool
		return ret
	}
	return *o.AllowMultiplePinVerifications
}

// GetAllowMultiplePinVerificationsOk returns a tuple with the AllowMultiplePinVerifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetAllowMultiplePinVerificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultiplePinVerifications) {
		return nil, false
	}
	return o.AllowMultiplePinVerifications, true
}

// HasAllowMultiplePinVerifications returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasAllowMultiplePinVerifications() bool {
	if o != nil && !IsNil(o.AllowMultiplePinVerifications) {
		return true
	}

	return false
}

// SetAllowMultiplePinVerifications gets a reference to the given bool and assigns it to the AllowMultiplePinVerifications field.
func (o *ApplicationConfiguration) SetAllowMultiplePinVerifications(v bool) {
	o.AllowMultiplePinVerifications = &v
}

// GetPinAttempts returns the PinAttempts field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetPinAttempts() int32 {
	if o == nil || IsNil(o.PinAttempts) {
		var ret int32
		return ret
	}
	return *o.PinAttempts
}

// GetPinAttemptsOk returns a tuple with the PinAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetPinAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.PinAttempts) {
		return nil, false
	}
	return o.PinAttempts, true
}

// HasPinAttempts returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasPinAttempts() bool {
	if o != nil && !IsNil(o.PinAttempts) {
		return true
	}

	return false
}

// SetPinAttempts gets a reference to the given int32 and assigns it to the PinAttempts field.
func (o *ApplicationConfiguration) SetPinAttempts(v int32) {
	o.PinAttempts = &v
}

// GetPinTimeToLive returns the PinTimeToLive field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetPinTimeToLive() string {
	if o == nil || IsNil(o.PinTimeToLive) {
		var ret string
		return ret
	}
	return *o.PinTimeToLive
}

// GetPinTimeToLiveOk returns a tuple with the PinTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetPinTimeToLiveOk() (*string, bool) {
	if o == nil || IsNil(o.PinTimeToLive) {
		return nil, false
	}
	return o.PinTimeToLive, true
}

// HasPinTimeToLive returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasPinTimeToLive() bool {
	if o != nil && !IsNil(o.PinTimeToLive) {
		return true
	}

	return false
}

// SetPinTimeToLive gets a reference to the given string and assigns it to the PinTimeToLive field.
func (o *ApplicationConfiguration) SetPinTimeToLive(v string) {
	o.PinTimeToLive = &v
}

// GetSendPinPerApplicationLimit returns the SendPinPerApplicationLimit field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetSendPinPerApplicationLimit() string {
	if o == nil || IsNil(o.SendPinPerApplicationLimit) {
		var ret string
		return ret
	}
	return *o.SendPinPerApplicationLimit
}

// GetSendPinPerApplicationLimitOk returns a tuple with the SendPinPerApplicationLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetSendPinPerApplicationLimitOk() (*string, bool) {
	if o == nil || IsNil(o.SendPinPerApplicationLimit) {
		return nil, false
	}
	return o.SendPinPerApplicationLimit, true
}

// HasSendPinPerApplicationLimit returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasSendPinPerApplicationLimit() bool {
	if o != nil && !IsNil(o.SendPinPerApplicationLimit) {
		return true
	}

	return false
}

// SetSendPinPerApplicationLimit gets a reference to the given string and assigns it to the SendPinPerApplicationLimit field.
func (o *ApplicationConfiguration) SetSendPinPerApplicationLimit(v string) {
	o.SendPinPerApplicationLimit = &v
}

// GetSendPinPerPhoneNumberLimit returns the SendPinPerPhoneNumberLimit field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetSendPinPerPhoneNumberLimit() string {
	if o == nil || IsNil(o.SendPinPerPhoneNumberLimit) {
		var ret string
		return ret
	}
	return *o.SendPinPerPhoneNumberLimit
}

// GetSendPinPerPhoneNumberLimitOk returns a tuple with the SendPinPerPhoneNumberLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetSendPinPerPhoneNumberLimitOk() (*string, bool) {
	if o == nil || IsNil(o.SendPinPerPhoneNumberLimit) {
		return nil, false
	}
	return o.SendPinPerPhoneNumberLimit, true
}

// HasSendPinPerPhoneNumberLimit returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasSendPinPerPhoneNumberLimit() bool {
	if o != nil && !IsNil(o.SendPinPerPhoneNumberLimit) {
		return true
	}

	return false
}

// SetSendPinPerPhoneNumberLimit gets a reference to the given string and assigns it to the SendPinPerPhoneNumberLimit field.
func (o *ApplicationConfiguration) SetSendPinPerPhoneNumberLimit(v string) {
	o.SendPinPerPhoneNumberLimit = &v
}

// GetVerifyPinLimit returns the VerifyPinLimit field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetVerifyPinLimit() string {
	if o == nil || IsNil(o.VerifyPinLimit) {
		var ret string
		return ret
	}
	return *o.VerifyPinLimit
}

// GetVerifyPinLimitOk returns a tuple with the VerifyPinLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetVerifyPinLimitOk() (*string, bool) {
	if o == nil || IsNil(o.VerifyPinLimit) {
		return nil, false
	}
	return o.VerifyPinLimit, true
}

// HasVerifyPinLimit returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasVerifyPinLimit() bool {
	if o != nil && !IsNil(o.VerifyPinLimit) {
		return true
	}

	return false
}

// SetVerifyPinLimit gets a reference to the given string and assigns it to the VerifyPinLimit field.
func (o *ApplicationConfiguration) SetVerifyPinLimit(v string) {
	o.VerifyPinLimit = &v
}

func (o ApplicationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMultiplePinVerifications) {
		toSerialize["allowMultiplePinVerifications"] = o.AllowMultiplePinVerifications
	}
	if !IsNil(o.PinAttempts) {
		toSerialize["pinAttempts"] = o.PinAttempts
	}
	if !IsNil(o.PinTimeToLive) {
		toSerialize["pinTimeToLive"] = o.PinTimeToLive
	}
	if !IsNil(o.SendPinPerApplicationLimit) {
		toSerialize["sendPinPerApplicationLimit"] = o.SendPinPerApplicationLimit
	}
	if !IsNil(o.SendPinPerPhoneNumberLimit) {
		toSerialize["sendPinPerPhoneNumberLimit"] = o.SendPinPerPhoneNumberLimit
	}
	if !IsNil(o.VerifyPinLimit) {
		toSerialize["verifyPinLimit"] = o.VerifyPinLimit
	}
	return toSerialize, nil
}

type NullableApplicationConfiguration struct {
	value *ApplicationConfiguration
	isSet bool
}

func (v NullableApplicationConfiguration) Get() *ApplicationConfiguration {
	return v.value
}

func (v *NullableApplicationConfiguration) Set(val *ApplicationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationConfiguration(val *ApplicationConfiguration) *NullableApplicationConfiguration {
	return &NullableApplicationConfiguration{value: val, isSet: true}
}

func (v NullableApplicationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

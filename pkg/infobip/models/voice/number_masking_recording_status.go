/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// NumberMaskingRecordingStatus Recording status provided if recording was attempted.
type NumberMaskingRecordingStatus string

// List of NumberMaskingRecordingStatus
const (
	NUMBERMASKINGRECORDINGSTATUS_HOSTED NumberMaskingRecordingStatus = "HOSTED"
	NUMBERMASKINGRECORDINGSTATUS_SFTP   NumberMaskingRecordingStatus = "SFTP"
	NUMBERMASKINGRECORDINGSTATUS_FAILED NumberMaskingRecordingStatus = "FAILED"
)

// All allowed values of NumberMaskingRecordingStatus enum
var AllowedNumberMaskingRecordingStatusEnumValues = []NumberMaskingRecordingStatus{
	"HOSTED",
	"SFTP",
	"FAILED",
}

func (v *NumberMaskingRecordingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberMaskingRecordingStatus(value)
	for _, existing := range AllowedNumberMaskingRecordingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberMaskingRecordingStatus", value)
}

// NewNumberMaskingRecordingStatusFromValue returns a pointer to a valid NumberMaskingRecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberMaskingRecordingStatusFromValue(v string) (*NumberMaskingRecordingStatus, error) {
	ev := NumberMaskingRecordingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberMaskingRecordingStatus: valid values are %v", v, AllowedNumberMaskingRecordingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberMaskingRecordingStatus) IsValid() bool {
	for _, existing := range AllowedNumberMaskingRecordingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberMaskingRecordingStatus value
func (v NumberMaskingRecordingStatus) Ptr() *NumberMaskingRecordingStatus {
	return &v
}

type NullableNumberMaskingRecordingStatus struct {
	value *NumberMaskingRecordingStatus
	isSet bool
}

func (v NullableNumberMaskingRecordingStatus) Get() *NumberMaskingRecordingStatus {
	return v.value
}

func (v *NullableNumberMaskingRecordingStatus) Set(val *NumberMaskingRecordingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberMaskingRecordingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberMaskingRecordingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberMaskingRecordingStatus(val *NumberMaskingRecordingStatus) *NullableNumberMaskingRecordingStatus {
	return &NullableNumberMaskingRecordingStatus{value: val, isSet: true}
}

func (v NullableNumberMaskingRecordingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberMaskingRecordingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SipTrunkResponse struct for SipTrunkResponse
type SipTrunkResponse struct {
	ProviderSipTrunkResponse   *ProviderSipTrunkResponse
	RegisteredSipTrunkResponse *RegisteredSipTrunkResponse
	StaticSipTrunkResponse     *StaticSipTrunkResponse
}

// ProviderSipTrunkResponseAsSipTrunkResponse is a convenience function that returns ProviderSipTrunkResponse wrapped in SipTrunkResponse
func ProviderSipTrunkResponseAsSipTrunkResponse(v *ProviderSipTrunkResponse) SipTrunkResponse {
	return SipTrunkResponse{
		ProviderSipTrunkResponse: v,
	}
}

// RegisteredSipTrunkResponseAsSipTrunkResponse is a convenience function that returns RegisteredSipTrunkResponse wrapped in SipTrunkResponse
func RegisteredSipTrunkResponseAsSipTrunkResponse(v *RegisteredSipTrunkResponse) SipTrunkResponse {
	return SipTrunkResponse{
		RegisteredSipTrunkResponse: v,
	}
}

// StaticSipTrunkResponseAsSipTrunkResponse is a convenience function that returns StaticSipTrunkResponse wrapped in SipTrunkResponse
func StaticSipTrunkResponseAsSipTrunkResponse(v *StaticSipTrunkResponse) SipTrunkResponse {
	return SipTrunkResponse{
		StaticSipTrunkResponse: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SipTrunkResponse) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'PROVIDER'
	if jsonDict["type"] == "PROVIDER" {
		// try to unmarshal JSON data into ProviderSipTrunkResponse
		err = json.Unmarshal(data, &dst.ProviderSipTrunkResponse)
		if err == nil {
			jsonProviderSipTrunkResponse, _ := json.Marshal(dst.ProviderSipTrunkResponse)
			if string(jsonProviderSipTrunkResponse) == "{}" { // empty struct
				dst.ProviderSipTrunkResponse = nil
			} else {
				return nil // data stored in dst.ProviderSipTrunkResponse, return on the first match
			}
		} else {
			dst.ProviderSipTrunkResponse = nil
		}
	}
	// check if the discriminator value is 'REGISTERED'
	if jsonDict["type"] == "REGISTERED" {
		// try to unmarshal JSON data into RegisteredSipTrunkResponse
		err = json.Unmarshal(data, &dst.RegisteredSipTrunkResponse)
		if err == nil {
			jsonRegisteredSipTrunkResponse, _ := json.Marshal(dst.RegisteredSipTrunkResponse)
			if string(jsonRegisteredSipTrunkResponse) == "{}" { // empty struct
				dst.RegisteredSipTrunkResponse = nil
			} else {
				return nil // data stored in dst.RegisteredSipTrunkResponse, return on the first match
			}
		} else {
			dst.RegisteredSipTrunkResponse = nil
		}
	}
	// check if the discriminator value is 'STATIC'
	if jsonDict["type"] == "STATIC" {
		// try to unmarshal JSON data into StaticSipTrunkResponse
		err = json.Unmarshal(data, &dst.StaticSipTrunkResponse)
		if err == nil {
			jsonStaticSipTrunkResponse, _ := json.Marshal(dst.StaticSipTrunkResponse)
			if string(jsonStaticSipTrunkResponse) == "{}" { // empty struct
				dst.StaticSipTrunkResponse = nil
			} else {
				return nil // data stored in dst.StaticSipTrunkResponse, return on the first match
			}
		} else {
			dst.StaticSipTrunkResponse = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(SipTrunkResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SipTrunkResponse) MarshalJSON() ([]byte, error) {
	if src.ProviderSipTrunkResponse != nil {
		return json.Marshal(&src.ProviderSipTrunkResponse)
	}
	if src.RegisteredSipTrunkResponse != nil {
		return json.Marshal(&src.RegisteredSipTrunkResponse)
	}
	if src.StaticSipTrunkResponse != nil {
		return json.Marshal(&src.StaticSipTrunkResponse)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *SipTrunkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ProviderSipTrunkResponse != nil {
		return obj.ProviderSipTrunkResponse
	}
	if obj.RegisteredSipTrunkResponse != nil {
		return obj.RegisteredSipTrunkResponse
	}
	if obj.StaticSipTrunkResponse != nil {
		return obj.StaticSipTrunkResponse
	}
	// all schemas are nil
	return nil
}

type NullableSipTrunkResponse struct {
	value *SipTrunkResponse
	isSet bool
}

func (v NullableSipTrunkResponse) Get() *SipTrunkResponse {
	return v.value
}

func (v *NullableSipTrunkResponse) Set(val *SipTrunkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSipTrunkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSipTrunkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipTrunkResponse(val *SipTrunkResponse) *NullableSipTrunkResponse {
	return &NullableSipTrunkResponse{value: val, isSet: true}
}

func (v NullableSipTrunkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipTrunkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

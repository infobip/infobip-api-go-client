/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsTurkeyIysOptions IYS regulations specific parameters required for sending promotional SMS to phone numbers registered in Turkey.
type SmsTurkeyIysOptions struct {
	// Brand code is an ID of the company based on a company VAT number. If not provided in request, default value is used from your Infobip account.
	BrandCode *int32 `json:"brandCode,omitempty"`
	// Recipient Type must be `TACIR` or `BIREYSEL`.
	RecipientType string `json:"recipientType"`
}

// NewSmsTurkeyIysOptions instantiates a new SmsTurkeyIysOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsTurkeyIysOptions(recipientType string) *SmsTurkeyIysOptions {
	this := SmsTurkeyIysOptions{}
	this.RecipientType = recipientType
	return &this
}

// NewSmsTurkeyIysOptionsWithDefaults instantiates a new SmsTurkeyIysOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsTurkeyIysOptionsWithDefaults() *SmsTurkeyIysOptions {
	this := SmsTurkeyIysOptions{}
	return &this
}

// GetBrandCode returns the BrandCode field value if set, zero value otherwise.
func (o *SmsTurkeyIysOptions) GetBrandCode() int32 {
	if o == nil || o.BrandCode == nil {
		var ret int32
		return ret
	}
	return *o.BrandCode
}

// GetBrandCodeOk returns a tuple with the BrandCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTurkeyIysOptions) GetBrandCodeOk() (*int32, bool) {
	if o == nil || o.BrandCode == nil {
		return nil, false
	}
	return o.BrandCode, true
}

// HasBrandCode returns a boolean if a field has been set.
func (o *SmsTurkeyIysOptions) HasBrandCode() bool {
	if o != nil && o.BrandCode != nil {
		return true
	}

	return false
}

// SetBrandCode gets a reference to the given int32 and assigns it to the BrandCode field.
func (o *SmsTurkeyIysOptions) SetBrandCode(v int32) {
	o.BrandCode = &v
}

// GetRecipientType returns the RecipientType field value
func (o *SmsTurkeyIysOptions) GetRecipientType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientType
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value
// and a boolean to check if the value has been set.
func (o *SmsTurkeyIysOptions) GetRecipientTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientType, true
}

// SetRecipientType sets field value
func (o *SmsTurkeyIysOptions) SetRecipientType(v string) {
	o.RecipientType = v
}

func (o SmsTurkeyIysOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BrandCode != nil {
		toSerialize["brandCode"] = o.BrandCode
	}
	if true {
		toSerialize["recipientType"] = o.RecipientType
	}
	return json.Marshal(toSerialize)
}

type NullableSmsTurkeyIysOptions struct {
	value *SmsTurkeyIysOptions
	isSet bool
}

func (v NullableSmsTurkeyIysOptions) Get() *SmsTurkeyIysOptions {
	return v.value
}

func (v *NullableSmsTurkeyIysOptions) Set(val *SmsTurkeyIysOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTurkeyIysOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTurkeyIysOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTurkeyIysOptions(val *SmsTurkeyIysOptions) *NullableSmsTurkeyIysOptions {
	return &NullableSmsTurkeyIysOptions{value: val, isSet: true}
}

func (v NullableSmsTurkeyIysOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTurkeyIysOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

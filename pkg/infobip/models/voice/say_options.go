/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SayOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SayOptions{}

// SayOptions struct for SayOptions
type SayOptions struct {
	// Must be defined for correct pronunciation.
	Language *string
	Voice    *VoiceOptions
	// Must be within [0.5 - 2.0] range, default value is 1.
	SpeechRate *float64
}

// NewSayOptions instantiates a new SayOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSayOptions() *SayOptions {
	this := SayOptions{}
	return &this
}

// NewSayOptionsWithDefaults instantiates a new SayOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSayOptionsWithDefaults() *SayOptions {
	this := SayOptions{}

	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SayOptions) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SayOptions) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SayOptions) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SayOptions) SetLanguage(v string) {
	o.Language = &v
}

// GetVoice returns the Voice field value if set, zero value otherwise.
func (o *SayOptions) GetVoice() VoiceOptions {
	if o == nil || IsNil(o.Voice) {
		var ret VoiceOptions
		return ret
	}
	return *o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SayOptions) GetVoiceOk() (*VoiceOptions, bool) {
	if o == nil || IsNil(o.Voice) {
		return nil, false
	}
	return o.Voice, true
}

// HasVoice returns a boolean if a field has been set.
func (o *SayOptions) HasVoice() bool {
	if o != nil && !IsNil(o.Voice) {
		return true
	}

	return false
}

// SetVoice gets a reference to the given VoiceOptions and assigns it to the Voice field.
func (o *SayOptions) SetVoice(v VoiceOptions) {
	o.Voice = &v
}

// GetSpeechRate returns the SpeechRate field value if set, zero value otherwise.
func (o *SayOptions) GetSpeechRate() float64 {
	if o == nil || IsNil(o.SpeechRate) {
		var ret float64
		return ret
	}
	return *o.SpeechRate
}

// GetSpeechRateOk returns a tuple with the SpeechRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SayOptions) GetSpeechRateOk() (*float64, bool) {
	if o == nil || IsNil(o.SpeechRate) {
		return nil, false
	}
	return o.SpeechRate, true
}

// HasSpeechRate returns a boolean if a field has been set.
func (o *SayOptions) HasSpeechRate() bool {
	if o != nil && !IsNil(o.SpeechRate) {
		return true
	}

	return false
}

// SetSpeechRate gets a reference to the given float64 and assigns it to the SpeechRate field.
func (o *SayOptions) SetSpeechRate(v float64) {
	o.SpeechRate = &v
}

func (o SayOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SayOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Voice) {
		toSerialize["voice"] = o.Voice
	}
	if !IsNil(o.SpeechRate) {
		toSerialize["speechRate"] = o.SpeechRate
	}
	return toSerialize, nil
}

type NullableSayOptions struct {
	value *SayOptions
	isSet bool
}

func (v NullableSayOptions) Get() *SayOptions {
	return v.value
}

func (v *NullableSayOptions) Set(val *SayOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSayOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSayOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSayOptions(val *SayOptions) *NullableSayOptions {
	return &NullableSayOptions{value: val, isSet: true}
}

func (v NullableSayOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSayOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

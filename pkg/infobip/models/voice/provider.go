/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// Provider struct for Provider
type Provider struct {
	CiscoWebexProvider   *CiscoWebexProvider
	FreshworksProvider   *FreshworksProvider
	GenesysCloudProvider *GenesysCloudProvider
}

// CiscoWebexProviderAsProvider is a convenience function that returns CiscoWebexProvider wrapped in Provider
func CiscoWebexProviderAsProvider(v *CiscoWebexProvider) Provider {
	return Provider{
		CiscoWebexProvider: v,
	}
}

// FreshworksProviderAsProvider is a convenience function that returns FreshworksProvider wrapped in Provider
func FreshworksProviderAsProvider(v *FreshworksProvider) Provider {
	return Provider{
		FreshworksProvider: v,
	}
}

// GenesysCloudProviderAsProvider is a convenience function that returns GenesysCloudProvider wrapped in Provider
func GenesysCloudProviderAsProvider(v *GenesysCloudProvider) Provider {
	return Provider{
		GenesysCloudProvider: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Provider) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'CISCO_WEBEX'
	if jsonDict["type"] == "CISCO_WEBEX" {
		// try to unmarshal JSON data into CiscoWebexProvider
		err = json.Unmarshal(data, &dst.CiscoWebexProvider)
		if err == nil {
			jsonCiscoWebexProvider, _ := json.Marshal(dst.CiscoWebexProvider)
			if string(jsonCiscoWebexProvider) == "{}" { // empty struct
				dst.CiscoWebexProvider = nil
			} else {
				return nil // data stored in dst.CiscoWebexProvider, return on the first match
			}
		} else {
			dst.CiscoWebexProvider = nil
		}
	}
	// check if the discriminator value is 'FRESHWORKS'
	if jsonDict["type"] == "FRESHWORKS" {
		// try to unmarshal JSON data into FreshworksProvider
		err = json.Unmarshal(data, &dst.FreshworksProvider)
		if err == nil {
			jsonFreshworksProvider, _ := json.Marshal(dst.FreshworksProvider)
			if string(jsonFreshworksProvider) == "{}" { // empty struct
				dst.FreshworksProvider = nil
			} else {
				return nil // data stored in dst.FreshworksProvider, return on the first match
			}
		} else {
			dst.FreshworksProvider = nil
		}
	}
	// check if the discriminator value is 'GENESYS_CLOUD'
	if jsonDict["type"] == "GENESYS_CLOUD" {
		// try to unmarshal JSON data into GenesysCloudProvider
		err = json.Unmarshal(data, &dst.GenesysCloudProvider)
		if err == nil {
			jsonGenesysCloudProvider, _ := json.Marshal(dst.GenesysCloudProvider)
			if string(jsonGenesysCloudProvider) == "{}" { // empty struct
				dst.GenesysCloudProvider = nil
			} else {
				return nil // data stored in dst.GenesysCloudProvider, return on the first match
			}
		} else {
			dst.GenesysCloudProvider = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(Provider)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Provider) MarshalJSON() ([]byte, error) {
	if src.CiscoWebexProvider != nil {
		return json.Marshal(&src.CiscoWebexProvider)
	}
	if src.FreshworksProvider != nil {
		return json.Marshal(&src.FreshworksProvider)
	}
	if src.GenesysCloudProvider != nil {
		return json.Marshal(&src.GenesysCloudProvider)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *Provider) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CiscoWebexProvider != nil {
		return obj.CiscoWebexProvider
	}
	if obj.FreshworksProvider != nil {
		return obj.FreshworksProvider
	}
	if obj.GenesysCloudProvider != nil {
		return obj.GenesysCloudProvider
	}
	// all schemas are nil
	return nil
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the File type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &File{}

// File struct for File
type File struct {
	// File ID.
	Id *string
	// File name.
	Name       string
	FileFormat FileFormat
	// File size in bytes.
	Size           *int64
	CreationMethod *CreationMethod
	// File creation time.
	CreationTime *Time
	// File expiration time.
	ExpirationTime *Time
	// File duration in seconds.
	Duration *int64
}

type _File File

// NewFile instantiates a new File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewFile(name string, fileFormat FileFormat) *File {
	this := File{}
	this.Name = name
	this.FileFormat = fileFormat
	return &this
}

// NewFileWithDefaults instantiates a new File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileWithDefaults() *File {
	this := File{}

	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *File) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *File) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *File) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *File) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *File) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *File) SetName(v string) {
	o.Name = v
}

// GetFileFormat returns the FileFormat field value
func (o *File) GetFileFormat() FileFormat {
	if o == nil {
		var ret FileFormat
		return ret
	}

	return o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value
// and a boolean to check if the value has been set.
func (o *File) GetFileFormatOk() (*FileFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileFormat, true
}

// SetFileFormat sets field value
func (o *File) SetFileFormat(v FileFormat) {
	o.FileFormat = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *File) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *File) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *File) SetSize(v int64) {
	o.Size = &v
}

// GetCreationMethod returns the CreationMethod field value if set, zero value otherwise.
func (o *File) GetCreationMethod() CreationMethod {
	if o == nil || IsNil(o.CreationMethod) {
		var ret CreationMethod
		return ret
	}
	return *o.CreationMethod
}

// GetCreationMethodOk returns a tuple with the CreationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetCreationMethodOk() (*CreationMethod, bool) {
	if o == nil || IsNil(o.CreationMethod) {
		return nil, false
	}
	return o.CreationMethod, true
}

// HasCreationMethod returns a boolean if a field has been set.
func (o *File) HasCreationMethod() bool {
	if o != nil && !IsNil(o.CreationMethod) {
		return true
	}

	return false
}

// SetCreationMethod gets a reference to the given CreationMethod and assigns it to the CreationMethod field.
func (o *File) SetCreationMethod(v CreationMethod) {
	o.CreationMethod = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *File) GetCreationTime() Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetCreationTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *File) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given Time and assigns it to the CreationTime field.
func (o *File) SetCreationTime(v Time) {
	o.CreationTime = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *File) GetExpirationTime() Time {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret Time
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetExpirationTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *File) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given Time and assigns it to the ExpirationTime field.
func (o *File) SetExpirationTime(v Time) {
	o.ExpirationTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *File) GetDuration() int64 {
	if o == nil || IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *File) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *File) SetDuration(v int64) {
	o.Duration = &v
}

func (o File) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o File) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["fileFormat"] = o.FileFormat
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.CreationMethod) {
		toSerialize["creationMethod"] = o.CreationMethod
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expirationTime"] = o.ExpirationTime
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return toSerialize, nil
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

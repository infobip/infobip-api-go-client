/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"
	"fmt"
)

// ApiSuppressionType Type of suppression.
type ApiSuppressionType string

// List of ApiSuppressionType
const (
	APISUPPRESSIONTYPE_BOUNCE     ApiSuppressionType = "BOUNCE"
	APISUPPRESSIONTYPE_COMPLAINT  ApiSuppressionType = "COMPLAINT"
	APISUPPRESSIONTYPE_OVER_QUOTA ApiSuppressionType = "OVER_QUOTA"
)

// All allowed values of ApiSuppressionType enum
var AllowedApiSuppressionTypeEnumValues = []ApiSuppressionType{
	"BOUNCE",
	"COMPLAINT",
	"OVER_QUOTA",
}

func (v *ApiSuppressionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiSuppressionType(value)
	for _, existing := range AllowedApiSuppressionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiSuppressionType", value)
}

// NewApiSuppressionTypeFromValue returns a pointer to a valid ApiSuppressionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiSuppressionTypeFromValue(v string) (*ApiSuppressionType, error) {
	ev := ApiSuppressionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiSuppressionType: valid values are %v", v, AllowedApiSuppressionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiSuppressionType) IsValid() bool {
	for _, existing := range AllowedApiSuppressionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiSuppressionType value
func (v ApiSuppressionType) Ptr() *ApiSuppressionType {
	return &v
}

type NullableApiSuppressionType struct {
	value *ApiSuppressionType
	isSet bool
}

func (v NullableApiSuppressionType) Get() *ApiSuppressionType {
	return v.value
}

func (v *NullableApiSuppressionType) Set(val *ApiSuppressionType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiSuppressionType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiSuppressionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiSuppressionType(val *ApiSuppressionType) *NullableApiSuppressionType {
	return &NullableApiSuppressionType{value: val, isSet: true}
}

func (v NullableApiSuppressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiSuppressionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

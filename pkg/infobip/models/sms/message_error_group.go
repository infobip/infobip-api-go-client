/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// MessageErrorGroup Error group name that describes which category the error code belongs to.
type MessageErrorGroup string

// List of MessageErrorGroup
const (
	MESSAGEERRORGROUP_OK              MessageErrorGroup = "OK"
	MESSAGEERRORGROUP_HANDSET_ERRORS  MessageErrorGroup = "HANDSET_ERRORS"
	MESSAGEERRORGROUP_USER_ERRORS     MessageErrorGroup = "USER_ERRORS"
	MESSAGEERRORGROUP_OPERATOR_ERRORS MessageErrorGroup = "OPERATOR_ERRORS"
)

// All allowed values of MessageErrorGroup enum
var AllowedMessageErrorGroupEnumValues = []MessageErrorGroup{
	"OK",
	"HANDSET_ERRORS",
	"USER_ERRORS",
	"OPERATOR_ERRORS",
}

func (v *MessageErrorGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageErrorGroup(value)
	for _, existing := range AllowedMessageErrorGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageErrorGroup", value)
}

// NewMessageErrorGroupFromValue returns a pointer to a valid MessageErrorGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageErrorGroupFromValue(v string) (*MessageErrorGroup, error) {
	ev := MessageErrorGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageErrorGroup: valid values are %v", v, AllowedMessageErrorGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageErrorGroup) IsValid() bool {
	for _, existing := range AllowedMessageErrorGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageErrorGroup value
func (v MessageErrorGroup) Ptr() *MessageErrorGroup {
	return &v
}

type NullableMessageErrorGroup struct {
	value *MessageErrorGroup
	isSet bool
}

func (v NullableMessageErrorGroup) Get() *MessageErrorGroup {
	return v.value
}

func (v *NullableMessageErrorGroup) Set(val *MessageErrorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageErrorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageErrorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageErrorGroup(val *MessageErrorGroup) *NullableMessageErrorGroup {
	return &NullableMessageErrorGroup{value: val, isSet: true}
}

func (v NullableMessageErrorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageErrorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

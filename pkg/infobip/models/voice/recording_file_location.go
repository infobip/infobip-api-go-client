/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// RecordingFileLocation Location of recording file after processing.
type RecordingFileLocation string

// List of RecordingFileLocation
const (
	RECORDINGFILELOCATION_SFTP   RecordingFileLocation = "SFTP"
	RECORDINGFILELOCATION_HOSTED RecordingFileLocation = "HOSTED"
)

// All allowed values of RecordingFileLocation enum
var AllowedRecordingFileLocationEnumValues = []RecordingFileLocation{
	"SFTP",
	"HOSTED",
}

func (v *RecordingFileLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordingFileLocation(value)
	for _, existing := range AllowedRecordingFileLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordingFileLocation", value)
}

// NewRecordingFileLocationFromValue returns a pointer to a valid RecordingFileLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordingFileLocationFromValue(v string) (*RecordingFileLocation, error) {
	ev := RecordingFileLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordingFileLocation: valid values are %v", v, AllowedRecordingFileLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordingFileLocation) IsValid() bool {
	for _, existing := range AllowedRecordingFileLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordingFileLocation value
func (v RecordingFileLocation) Ptr() *RecordingFileLocation {
	return &v
}

type NullableRecordingFileLocation struct {
	value *RecordingFileLocation
	isSet bool
}

func (v NullableRecordingFileLocation) Get() *RecordingFileLocation {
	return v.value
}

func (v *NullableRecordingFileLocation) Set(val *RecordingFileLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingFileLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingFileLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingFileLocation(val *RecordingFileLocation) *NullableRecordingFileLocation {
	return &NullableRecordingFileLocation{value: val, isSet: true}
}

func (v NullableRecordingFileLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingFileLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallRoutingEndpoint Endpoint for a given destination.
type CallRoutingEndpoint struct {
	CallRoutingPhoneEndpoint  *CallRoutingPhoneEndpoint
	CallRoutingSipEndpoint    *CallRoutingSipEndpoint
	CallRoutingViberEndpoint  *CallRoutingViberEndpoint
	CallRoutingWebRtcEndpoint *CallRoutingWebRtcEndpoint
}

// CallRoutingPhoneEndpointAsCallRoutingEndpoint is a convenience function that returns CallRoutingPhoneEndpoint wrapped in CallRoutingEndpoint
func CallRoutingPhoneEndpointAsCallRoutingEndpoint(v *CallRoutingPhoneEndpoint) CallRoutingEndpoint {
	return CallRoutingEndpoint{
		CallRoutingPhoneEndpoint: v,
	}
}

// CallRoutingSipEndpointAsCallRoutingEndpoint is a convenience function that returns CallRoutingSipEndpoint wrapped in CallRoutingEndpoint
func CallRoutingSipEndpointAsCallRoutingEndpoint(v *CallRoutingSipEndpoint) CallRoutingEndpoint {
	return CallRoutingEndpoint{
		CallRoutingSipEndpoint: v,
	}
}

// CallRoutingViberEndpointAsCallRoutingEndpoint is a convenience function that returns CallRoutingViberEndpoint wrapped in CallRoutingEndpoint
func CallRoutingViberEndpointAsCallRoutingEndpoint(v *CallRoutingViberEndpoint) CallRoutingEndpoint {
	return CallRoutingEndpoint{
		CallRoutingViberEndpoint: v,
	}
}

// CallRoutingWebRtcEndpointAsCallRoutingEndpoint is a convenience function that returns CallRoutingWebRtcEndpoint wrapped in CallRoutingEndpoint
func CallRoutingWebRtcEndpointAsCallRoutingEndpoint(v *CallRoutingWebRtcEndpoint) CallRoutingEndpoint {
	return CallRoutingEndpoint{
		CallRoutingWebRtcEndpoint: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CallRoutingEndpoint) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'PHONE'
	if jsonDict["type"] == "PHONE" {
		// try to unmarshal JSON data into CallRoutingPhoneEndpoint
		err = json.Unmarshal(data, &dst.CallRoutingPhoneEndpoint)
		if err == nil {
			jsonCallRoutingPhoneEndpoint, _ := json.Marshal(dst.CallRoutingPhoneEndpoint)
			if string(jsonCallRoutingPhoneEndpoint) == "{}" { // empty struct
				dst.CallRoutingPhoneEndpoint = nil
			} else {
				return nil // data stored in dst.CallRoutingPhoneEndpoint, return on the first match
			}
		} else {
			dst.CallRoutingPhoneEndpoint = nil
		}
	}
	// check if the discriminator value is 'SIP'
	if jsonDict["type"] == "SIP" {
		// try to unmarshal JSON data into CallRoutingSipEndpoint
		err = json.Unmarshal(data, &dst.CallRoutingSipEndpoint)
		if err == nil {
			jsonCallRoutingSipEndpoint, _ := json.Marshal(dst.CallRoutingSipEndpoint)
			if string(jsonCallRoutingSipEndpoint) == "{}" { // empty struct
				dst.CallRoutingSipEndpoint = nil
			} else {
				return nil // data stored in dst.CallRoutingSipEndpoint, return on the first match
			}
		} else {
			dst.CallRoutingSipEndpoint = nil
		}
	}
	// check if the discriminator value is 'VIBER'
	if jsonDict["type"] == "VIBER" {
		// try to unmarshal JSON data into CallRoutingViberEndpoint
		err = json.Unmarshal(data, &dst.CallRoutingViberEndpoint)
		if err == nil {
			jsonCallRoutingViberEndpoint, _ := json.Marshal(dst.CallRoutingViberEndpoint)
			if string(jsonCallRoutingViberEndpoint) == "{}" { // empty struct
				dst.CallRoutingViberEndpoint = nil
			} else {
				return nil // data stored in dst.CallRoutingViberEndpoint, return on the first match
			}
		} else {
			dst.CallRoutingViberEndpoint = nil
		}
	}
	// check if the discriminator value is 'WEBRTC'
	if jsonDict["type"] == "WEBRTC" {
		// try to unmarshal JSON data into CallRoutingWebRtcEndpoint
		err = json.Unmarshal(data, &dst.CallRoutingWebRtcEndpoint)
		if err == nil {
			jsonCallRoutingWebRtcEndpoint, _ := json.Marshal(dst.CallRoutingWebRtcEndpoint)
			if string(jsonCallRoutingWebRtcEndpoint) == "{}" { // empty struct
				dst.CallRoutingWebRtcEndpoint = nil
			} else {
				return nil // data stored in dst.CallRoutingWebRtcEndpoint, return on the first match
			}
		} else {
			dst.CallRoutingWebRtcEndpoint = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(CallRoutingEndpoint)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallRoutingEndpoint) MarshalJSON() ([]byte, error) {
	if src.CallRoutingPhoneEndpoint != nil {
		return json.Marshal(&src.CallRoutingPhoneEndpoint)
	}
	if src.CallRoutingSipEndpoint != nil {
		return json.Marshal(&src.CallRoutingSipEndpoint)
	}
	if src.CallRoutingViberEndpoint != nil {
		return json.Marshal(&src.CallRoutingViberEndpoint)
	}
	if src.CallRoutingWebRtcEndpoint != nil {
		return json.Marshal(&src.CallRoutingWebRtcEndpoint)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *CallRoutingEndpoint) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CallRoutingPhoneEndpoint != nil {
		return obj.CallRoutingPhoneEndpoint
	}
	if obj.CallRoutingSipEndpoint != nil {
		return obj.CallRoutingSipEndpoint
	}
	if obj.CallRoutingViberEndpoint != nil {
		return obj.CallRoutingViberEndpoint
	}
	if obj.CallRoutingWebRtcEndpoint != nil {
		return obj.CallRoutingWebRtcEndpoint
	}
	// all schemas are nil
	return nil
}

type NullableCallRoutingEndpoint struct {
	value *CallRoutingEndpoint
	isSet bool
}

func (v NullableCallRoutingEndpoint) Get() *CallRoutingEndpoint {
	return v.value
}

func (v *NullableCallRoutingEndpoint) Set(val *CallRoutingEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRoutingEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRoutingEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRoutingEndpoint(val *CallRoutingEndpoint) *NullableCallRoutingEndpoint {
	return &NullableCallRoutingEndpoint{value: val, isSet: true}
}

func (v NullableCallRoutingEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRoutingEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

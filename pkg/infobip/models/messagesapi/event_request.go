/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the EventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRequest{}

// EventRequest struct for EventRequest
type EventRequest struct {
	// Array of event objects of a single event or multiple events sent
	Events []OutboundEvent
}

type _EventRequest EventRequest

// NewEventRequest instantiates a new EventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRequest(events []OutboundEvent) *EventRequest {
	this := EventRequest{}
	this.Events = events
	return &this
}

// NewEventRequestWithDefaults instantiates a new EventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRequestWithDefaults() *EventRequest {
	this := EventRequest{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventRequest) GetEvents() []OutboundEvent {
	if o == nil {
		var ret []OutboundEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventRequest) GetEventsOk() ([]OutboundEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventRequest) SetEvents(v []OutboundEvent) {
	o.Events = v
}

func (o EventRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

type NullableEventRequest struct {
	value *EventRequest
	isSet bool
}

func (v NullableEventRequest) Get() *EventRequest {
	return v.value
}

func (v *NullableEventRequest) Set(val *EventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRequest(val *EventRequest) *NullableEventRequest {
	return &NullableEventRequest{value: val, isSet: true}
}

func (v NullableEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

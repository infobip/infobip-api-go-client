/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// OutboundEvent Array of event objects of a single event or multiple events sent
type OutboundEvent struct {
	OutboundTypingStartedEvent *OutboundTypingStartedEvent
	OutboundTypingStoppedEvent *OutboundTypingStoppedEvent
}

// OutboundTypingStartedEventAsOutboundEvent is a convenience function that returns OutboundTypingStartedEvent wrapped in OutboundEvent
func OutboundTypingStartedEventAsOutboundEvent(v *OutboundTypingStartedEvent) OutboundEvent {
	return OutboundEvent{
		OutboundTypingStartedEvent: v,
	}
}

// OutboundTypingStoppedEventAsOutboundEvent is a convenience function that returns OutboundTypingStoppedEvent wrapped in OutboundEvent
func OutboundTypingStoppedEventAsOutboundEvent(v *OutboundTypingStoppedEvent) OutboundEvent {
	return OutboundEvent{
		OutboundTypingStoppedEvent: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OutboundEvent) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'TYPING_STARTED'
	if jsonDict["event"] == "TYPING_STARTED" {
		// try to unmarshal JSON data into OutboundTypingStartedEvent
		err = json.Unmarshal(data, &dst.OutboundTypingStartedEvent)
		if err == nil {
			jsonOutboundTypingStartedEvent, _ := json.Marshal(dst.OutboundTypingStartedEvent)
			if string(jsonOutboundTypingStartedEvent) == "{}" { // empty struct
				dst.OutboundTypingStartedEvent = nil
			} else {
				return nil // data stored in dst.OutboundTypingStartedEvent, return on the first match
			}
		} else {
			dst.OutboundTypingStartedEvent = nil
		}
	}
	// check if the discriminator value is 'TYPING_STOPPED'
	if jsonDict["event"] == "TYPING_STOPPED" {
		// try to unmarshal JSON data into OutboundTypingStoppedEvent
		err = json.Unmarshal(data, &dst.OutboundTypingStoppedEvent)
		if err == nil {
			jsonOutboundTypingStoppedEvent, _ := json.Marshal(dst.OutboundTypingStoppedEvent)
			if string(jsonOutboundTypingStoppedEvent) == "{}" { // empty struct
				dst.OutboundTypingStoppedEvent = nil
			} else {
				return nil // data stored in dst.OutboundTypingStoppedEvent, return on the first match
			}
		} else {
			dst.OutboundTypingStoppedEvent = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(OutboundEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OutboundEvent) MarshalJSON() ([]byte, error) {
	if src.OutboundTypingStartedEvent != nil {
		return json.Marshal(&src.OutboundTypingStartedEvent)
	}
	if src.OutboundTypingStoppedEvent != nil {
		return json.Marshal(&src.OutboundTypingStoppedEvent)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *OutboundEvent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OutboundTypingStartedEvent != nil {
		return obj.OutboundTypingStartedEvent
	}
	if obj.OutboundTypingStoppedEvent != nil {
		return obj.OutboundTypingStoppedEvent
	}
	// all schemas are nil
	return nil
}

type NullableOutboundEvent struct {
	value *OutboundEvent
	isSet bool
}

func (v NullableOutboundEvent) Get() *OutboundEvent {
	return v.value
}

func (v *NullableOutboundEvent) Set(val *OutboundEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundEvent(val *OutboundEvent) *NullableOutboundEvent {
	return &NullableOutboundEvent{value: val, isSet: true}
}

func (v NullableOutboundEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

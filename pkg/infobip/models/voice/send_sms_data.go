/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SendSmsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendSmsData{}

// SendSmsData struct for SendSmsData
type SendSmsData struct {
	// The text of the message that will be sent.
	Text string
	// Represents sender ID and it can be alphanumeric or numeric; alphanumeric sender ID length should be between 3 and 11 characters; numeric sender ID length should be between 3 and 14 characters; the parameter can be constructed using variables
	From *string
	// Must be a valid E164 MSISDN; the parameter can be constructed using variables
	To string
}

type _SendSmsData SendSmsData

// NewSendSmsData instantiates a new SendSmsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSendSmsData(text string, to string) *SendSmsData {
	this := SendSmsData{}
	this.Text = text
	this.To = to
	return &this
}

// NewSendSmsDataWithDefaults instantiates a new SendSmsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendSmsDataWithDefaults() *SendSmsData {
	this := SendSmsData{}

	return &this
}

// GetText returns the Text field value
func (o *SendSmsData) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SendSmsData) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SendSmsData) SetText(v string) {
	o.Text = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SendSmsData) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsData) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SendSmsData) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SendSmsData) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value
func (o *SendSmsData) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SendSmsData) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SendSmsData) SetTo(v string) {
	o.To = v
}

func (o SendSmsData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendSmsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	toSerialize["to"] = o.To
	return toSerialize, nil
}

type NullableSendSmsData struct {
	value *SendSmsData
	isSet bool
}

func (v NullableSendSmsData) Get() *SendSmsData {
	return v.value
}

func (v *NullableSendSmsData) Set(val *SendSmsData) {
	v.value = val
	v.isSet = true
}

func (v NullableSendSmsData) IsSet() bool {
	return v.isSet
}

func (v *NullableSendSmsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendSmsData(val *SendSmsData) *NullableSendSmsData {
	return &NullableSendSmsData{value: val, isSet: true}
}

func (v NullableSendSmsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendSmsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallRoutingDestination List of destinations. First destination in the list is the first one to be executed. Subsequent destinations are executed only if the previous one fails.
type CallRoutingDestination struct {
	CallRoutingEndpointDestination *CallRoutingEndpointDestination
	CallRoutingUrlDestination      *CallRoutingUrlDestination
}

// CallRoutingEndpointDestinationAsCallRoutingDestination is a convenience function that returns CallRoutingEndpointDestination wrapped in CallRoutingDestination
func CallRoutingEndpointDestinationAsCallRoutingDestination(v *CallRoutingEndpointDestination) CallRoutingDestination {
	return CallRoutingDestination{
		CallRoutingEndpointDestination: v,
	}
}

// CallRoutingUrlDestinationAsCallRoutingDestination is a convenience function that returns CallRoutingUrlDestination wrapped in CallRoutingDestination
func CallRoutingUrlDestinationAsCallRoutingDestination(v *CallRoutingUrlDestination) CallRoutingDestination {
	return CallRoutingDestination{
		CallRoutingUrlDestination: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CallRoutingDestination) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'ENDPOINT'
	if jsonDict["type"] == "ENDPOINT" {
		// try to unmarshal JSON data into CallRoutingEndpointDestination
		err = json.Unmarshal(data, &dst.CallRoutingEndpointDestination)
		if err == nil {
			jsonCallRoutingEndpointDestination, _ := json.Marshal(dst.CallRoutingEndpointDestination)
			if string(jsonCallRoutingEndpointDestination) == "{}" { // empty struct
				dst.CallRoutingEndpointDestination = nil
			} else {
				return nil // data stored in dst.CallRoutingEndpointDestination, return on the first match
			}
		} else {
			dst.CallRoutingEndpointDestination = nil
		}
	}
	// check if the discriminator value is 'URL'
	if jsonDict["type"] == "URL" {
		// try to unmarshal JSON data into CallRoutingUrlDestination
		err = json.Unmarshal(data, &dst.CallRoutingUrlDestination)
		if err == nil {
			jsonCallRoutingUrlDestination, _ := json.Marshal(dst.CallRoutingUrlDestination)
			if string(jsonCallRoutingUrlDestination) == "{}" { // empty struct
				dst.CallRoutingUrlDestination = nil
			} else {
				return nil // data stored in dst.CallRoutingUrlDestination, return on the first match
			}
		} else {
			dst.CallRoutingUrlDestination = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(CallRoutingDestination)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallRoutingDestination) MarshalJSON() ([]byte, error) {
	if src.CallRoutingEndpointDestination != nil {
		return json.Marshal(&src.CallRoutingEndpointDestination)
	}
	if src.CallRoutingUrlDestination != nil {
		return json.Marshal(&src.CallRoutingUrlDestination)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *CallRoutingDestination) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CallRoutingEndpointDestination != nil {
		return obj.CallRoutingEndpointDestination
	}
	if obj.CallRoutingUrlDestination != nil {
		return obj.CallRoutingUrlDestination
	}
	// all schemas are nil
	return nil
}

type NullableCallRoutingDestination struct {
	value *CallRoutingDestination
	isSet bool
}

func (v NullableCallRoutingDestination) Get() *CallRoutingDestination {
	return v.value
}

func (v *NullableCallRoutingDestination) Set(val *CallRoutingDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRoutingDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRoutingDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRoutingDestination(val *CallRoutingDestination) *NullableCallRoutingDestination {
	return &NullableCallRoutingDestination{value: val, isSet: true}
}

func (v NullableCallRoutingDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRoutingDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

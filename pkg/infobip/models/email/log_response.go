/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the LogResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogResponse{}

// LogResponse struct for LogResponse
type LogResponse struct {
	// Array of email logs, one object per each email request.
	Results []Log
}

// NewLogResponse instantiates a new LogResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewLogResponse() *LogResponse {
	this := LogResponse{}
	return &this
}

// NewLogResponseWithDefaults instantiates a new LogResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogResponseWithDefaults() *LogResponse {
	this := LogResponse{}

	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *LogResponse) GetResults() []Log {
	if o == nil || IsNil(o.Results) {
		var ret []Log
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogResponse) GetResultsOk() ([]Log, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *LogResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Log and assigns it to the Results field.
func (o *LogResponse) SetResults(v []Log) {
	o.Results = v
}

func (o LogResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableLogResponse struct {
	value *LogResponse
	isSet bool
}

func (v NullableLogResponse) Get() *LogResponse {
	return v.value
}

func (v *NullableLogResponse) Set(val *LogResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogResponse(val *LogResponse) *NullableLogResponse {
	return &NullableLogResponse{value: val, isSet: true}
}

func (v NullableLogResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

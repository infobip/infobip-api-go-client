/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the SpeechOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpeechOptions{}

// SpeechOptions struct for SpeechOptions
type SpeechOptions struct {
	// Language used in speech that needs to be captured. For full list of supported languages see [LINK](https://www.infobip.com/docs/voice-and-video/interactive-voice-response-ivr#speech-recognition-supported-languages-ivr-over-api).
	Language string
	// Array of keyphrases used for matching capturing speech. If full captured text contains one of the specified phrases, that phrase will be set in variable specified in capture parameter. If keyphrases are not set or no matching is done, variable will be set to empty string. Every keyphrase can contain up to 5 words and number of keyphrases is not limited.
	KeyPhrases []string
	// If used, this parameter defines the number of seconds of silence that will stop capturing. For example value of 3 defines that capturing stops as soon as 3 seconds of silence is detected or when timeout expires, whichever happens first. Minimum value is 1 and maximum value is 5.
	MaxSilence *int32
}

type _SpeechOptions SpeechOptions

// NewSpeechOptions instantiates a new SpeechOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewSpeechOptions(language string) *SpeechOptions {
	this := SpeechOptions{}
	this.Language = language
	return &this
}

// NewSpeechOptionsWithDefaults instantiates a new SpeechOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpeechOptionsWithDefaults() *SpeechOptions {
	this := SpeechOptions{}

	return &this
}

// GetLanguage returns the Language field value
func (o *SpeechOptions) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *SpeechOptions) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *SpeechOptions) SetLanguage(v string) {
	o.Language = v
}

// GetKeyPhrases returns the KeyPhrases field value if set, zero value otherwise.
func (o *SpeechOptions) GetKeyPhrases() []string {
	if o == nil || IsNil(o.KeyPhrases) {
		var ret []string
		return ret
	}
	return o.KeyPhrases
}

// GetKeyPhrasesOk returns a tuple with the KeyPhrases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpeechOptions) GetKeyPhrasesOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyPhrases) {
		return nil, false
	}
	return o.KeyPhrases, true
}

// HasKeyPhrases returns a boolean if a field has been set.
func (o *SpeechOptions) HasKeyPhrases() bool {
	if o != nil && !IsNil(o.KeyPhrases) {
		return true
	}

	return false
}

// SetKeyPhrases gets a reference to the given []string and assigns it to the KeyPhrases field.
func (o *SpeechOptions) SetKeyPhrases(v []string) {
	o.KeyPhrases = v
}

// GetMaxSilence returns the MaxSilence field value if set, zero value otherwise.
func (o *SpeechOptions) GetMaxSilence() int32 {
	if o == nil || IsNil(o.MaxSilence) {
		var ret int32
		return ret
	}
	return *o.MaxSilence
}

// GetMaxSilenceOk returns a tuple with the MaxSilence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpeechOptions) GetMaxSilenceOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSilence) {
		return nil, false
	}
	return o.MaxSilence, true
}

// HasMaxSilence returns a boolean if a field has been set.
func (o *SpeechOptions) HasMaxSilence() bool {
	if o != nil && !IsNil(o.MaxSilence) {
		return true
	}

	return false
}

// SetMaxSilence gets a reference to the given int32 and assigns it to the MaxSilence field.
func (o *SpeechOptions) SetMaxSilence(v int32) {
	o.MaxSilence = &v
}

func (o SpeechOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpeechOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	if !IsNil(o.KeyPhrases) {
		toSerialize["keyPhrases"] = o.KeyPhrases
	}
	if !IsNil(o.MaxSilence) {
		toSerialize["maxSilence"] = o.MaxSilence
	}
	return toSerialize, nil
}

type NullableSpeechOptions struct {
	value *SpeechOptions
	isSet bool
}

func (v NullableSpeechOptions) Get() *SpeechOptions {
	return v.value
}

func (v *NullableSpeechOptions) Set(val *SpeechOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeechOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeechOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeechOptions(val *SpeechOptions) *NullableSpeechOptions {
	return &NullableSpeechOptions{value: val, isSet: true}
}

func (v NullableSpeechOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeechOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

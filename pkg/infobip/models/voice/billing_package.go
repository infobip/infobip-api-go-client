/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the BillingPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPackage{}

// BillingPackage Billing package.
type BillingPackage struct {
	PackageType BillingPackageType
	// Country code. Currently, only `USA` is supported and required for the `UNLIMITED` package type.
	CountryCode *string
	// ID of SIP trunk address.
	AddressId *string
}

type _BillingPackage BillingPackage

// NewBillingPackage instantiates a new BillingPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewBillingPackage(packageType BillingPackageType) *BillingPackage {
	this := BillingPackage{}
	this.PackageType = packageType
	return &this
}

// NewBillingPackageWithDefaults instantiates a new BillingPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPackageWithDefaults() *BillingPackage {
	this := BillingPackage{}

	return &this
}

// GetPackageType returns the PackageType field value
func (o *BillingPackage) GetPackageType() BillingPackageType {
	if o == nil {
		var ret BillingPackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *BillingPackage) GetPackageTypeOk() (*BillingPackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *BillingPackage) SetPackageType(v BillingPackageType) {
	o.PackageType = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *BillingPackage) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPackage) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *BillingPackage) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *BillingPackage) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *BillingPackage) GetAddressId() string {
	if o == nil || IsNil(o.AddressId) {
		var ret string
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPackage) GetAddressIdOk() (*string, bool) {
	if o == nil || IsNil(o.AddressId) {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *BillingPackage) HasAddressId() bool {
	if o != nil && !IsNil(o.AddressId) {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given string and assigns it to the AddressId field.
func (o *BillingPackage) SetAddressId(v string) {
	o.AddressId = &v
}

func (o BillingPackage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packageType"] = o.PackageType
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.AddressId) {
		toSerialize["addressId"] = o.AddressId
	}
	return toSerialize, nil
}

type NullableBillingPackage struct {
	value *BillingPackage
	isSet bool
}

func (v NullableBillingPackage) Get() *BillingPackage {
	return v.value
}

func (v *NullableBillingPackage) Set(val *BillingPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPackage(val *BillingPackage) *NullableBillingPackage {
	return &NullableBillingPackage{value: val, isSet: true}
}

func (v NullableBillingPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

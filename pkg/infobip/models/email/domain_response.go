/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DomainResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainResponse{}

// DomainResponse Detailed domain information.
type DomainResponse struct {
	// Id of the domain.
	DomainId *int64
	// Name of the domain.
	DomainName *string
	// Activation status of the domain.
	Active   *bool
	Tracking *TrackingResponse
	// DNS records for the domain.
	DnsRecords []DnsRecordResponse
	// Status if the domain is blocked.
	Blocked *bool
	// Date the domain was created. Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	CreatedAt *Time
	// Mailbox for return path.
	ReturnPathAddress *string
}

// NewDomainResponse instantiates a new DomainResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDomainResponse() *DomainResponse {
	this := DomainResponse{}
	return &this
}

// NewDomainResponseWithDefaults instantiates a new DomainResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainResponseWithDefaults() *DomainResponse {
	this := DomainResponse{}

	return &this
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *DomainResponse) GetDomainId() int64 {
	if o == nil || IsNil(o.DomainId) {
		var ret int64
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetDomainIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *DomainResponse) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given int64 and assigns it to the DomainId field.
func (o *DomainResponse) SetDomainId(v int64) {
	o.DomainId = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *DomainResponse) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *DomainResponse) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *DomainResponse) SetDomainName(v string) {
	o.DomainName = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DomainResponse) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DomainResponse) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DomainResponse) SetActive(v bool) {
	o.Active = &v
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *DomainResponse) GetTracking() TrackingResponse {
	if o == nil || IsNil(o.Tracking) {
		var ret TrackingResponse
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetTrackingOk() (*TrackingResponse, bool) {
	if o == nil || IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *DomainResponse) HasTracking() bool {
	if o != nil && !IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given TrackingResponse and assigns it to the Tracking field.
func (o *DomainResponse) SetTracking(v TrackingResponse) {
	o.Tracking = &v
}

// GetDnsRecords returns the DnsRecords field value if set, zero value otherwise.
func (o *DomainResponse) GetDnsRecords() []DnsRecordResponse {
	if o == nil || IsNil(o.DnsRecords) {
		var ret []DnsRecordResponse
		return ret
	}
	return o.DnsRecords
}

// GetDnsRecordsOk returns a tuple with the DnsRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetDnsRecordsOk() ([]DnsRecordResponse, bool) {
	if o == nil || IsNil(o.DnsRecords) {
		return nil, false
	}
	return o.DnsRecords, true
}

// HasDnsRecords returns a boolean if a field has been set.
func (o *DomainResponse) HasDnsRecords() bool {
	if o != nil && !IsNil(o.DnsRecords) {
		return true
	}

	return false
}

// SetDnsRecords gets a reference to the given []DnsRecordResponse and assigns it to the DnsRecords field.
func (o *DomainResponse) SetDnsRecords(v []DnsRecordResponse) {
	o.DnsRecords = v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *DomainResponse) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *DomainResponse) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *DomainResponse) SetBlocked(v bool) {
	o.Blocked = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DomainResponse) GetCreatedAt() Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetCreatedAtOk() (*Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DomainResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given Time and assigns it to the CreatedAt field.
func (o *DomainResponse) SetCreatedAt(v Time) {
	o.CreatedAt = &v
}

// GetReturnPathAddress returns the ReturnPathAddress field value if set, zero value otherwise.
func (o *DomainResponse) GetReturnPathAddress() string {
	if o == nil || IsNil(o.ReturnPathAddress) {
		var ret string
		return ret
	}
	return *o.ReturnPathAddress
}

// GetReturnPathAddressOk returns a tuple with the ReturnPathAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResponse) GetReturnPathAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnPathAddress) {
		return nil, false
	}
	return o.ReturnPathAddress, true
}

// HasReturnPathAddress returns a boolean if a field has been set.
func (o *DomainResponse) HasReturnPathAddress() bool {
	if o != nil && !IsNil(o.ReturnPathAddress) {
		return true
	}

	return false
}

// SetReturnPathAddress gets a reference to the given string and assigns it to the ReturnPathAddress field.
func (o *DomainResponse) SetReturnPathAddress(v string) {
	o.ReturnPathAddress = &v
}

func (o DomainResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainId) {
		toSerialize["domainId"] = o.DomainId
	}
	if !IsNil(o.DomainName) {
		toSerialize["domainName"] = o.DomainName
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !IsNil(o.DnsRecords) {
		toSerialize["dnsRecords"] = o.DnsRecords
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ReturnPathAddress) {
		toSerialize["returnPathAddress"] = o.ReturnPathAddress
	}
	return toSerialize, nil
}

type NullableDomainResponse struct {
	value *DomainResponse
	isSet bool
}

func (v NullableDomainResponse) Get() *DomainResponse {
	return v.value
}

func (v *NullableDomainResponse) Set(val *DomainResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainResponse(val *DomainResponse) *NullableDomainResponse {
	return &NullableDomainResponse{value: val, isSet: true}
}

func (v NullableDomainResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

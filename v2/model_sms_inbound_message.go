/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsInboundMessage struct for SmsInboundMessage
type SmsInboundMessage struct {
	// Custom callback data sent over the notifyUrl.
	CallbackData *string `json:"callbackData,omitempty"`
	// Content of the message without a keyword (if a keyword was sent).
	CleanText *string `json:"cleanText,omitempty"`
	// Sender ID that can be alphanumeric or numeric.
	From *string `json:"from,omitempty"`
	// Keyword extracted from the message content.
	Keyword *string `json:"keyword,omitempty"`
	// Unique message ID.
	MessageId *string   `json:"messageId,omitempty"`
	Price     *SmsPrice `json:"price,omitempty"`
	// Indicates when the Infobip platform received the message. Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	ReceivedAt *Time `json:"receivedAt,omitempty"`
	// The number of characters within a message
	SmsCount *int32 `json:"smsCount,omitempty"`
	// Full content of the message.
	Text *string `json:"text,omitempty"`
	// The destination address of the message.
	To *string `json:"to,omitempty"`
}

// NewSmsInboundMessage instantiates a new SmsInboundMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsInboundMessage() *SmsInboundMessage {
	this := SmsInboundMessage{}
	return &this
}

// NewSmsInboundMessageWithDefaults instantiates a new SmsInboundMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsInboundMessageWithDefaults() *SmsInboundMessage {
	this := SmsInboundMessage{}
	return &this
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetCallbackData() string {
	if o == nil || o.CallbackData == nil {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetCallbackDataOk() (*string, bool) {
	if o == nil || o.CallbackData == nil {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasCallbackData() bool {
	if o != nil && o.CallbackData != nil {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *SmsInboundMessage) SetCallbackData(v string) {
	o.CallbackData = &v
}

// GetCleanText returns the CleanText field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetCleanText() string {
	if o == nil || o.CleanText == nil {
		var ret string
		return ret
	}
	return *o.CleanText
}

// GetCleanTextOk returns a tuple with the CleanText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetCleanTextOk() (*string, bool) {
	if o == nil || o.CleanText == nil {
		return nil, false
	}
	return o.CleanText, true
}

// HasCleanText returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasCleanText() bool {
	if o != nil && o.CleanText != nil {
		return true
	}

	return false
}

// SetCleanText gets a reference to the given string and assigns it to the CleanText field.
func (o *SmsInboundMessage) SetCleanText(v string) {
	o.CleanText = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SmsInboundMessage) SetFrom(v string) {
	o.From = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetKeyword() string {
	if o == nil || o.Keyword == nil {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetKeywordOk() (*string, bool) {
	if o == nil || o.Keyword == nil {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasKeyword() bool {
	if o != nil && o.Keyword != nil {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *SmsInboundMessage) SetKeyword(v string) {
	o.Keyword = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetMessageId() string {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetMessageIdOk() (*string, bool) {
	if o == nil || o.MessageId == nil {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasMessageId() bool {
	if o != nil && o.MessageId != nil {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *SmsInboundMessage) SetMessageId(v string) {
	o.MessageId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetPrice() SmsPrice {
	if o == nil || o.Price == nil {
		var ret SmsPrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetPriceOk() (*SmsPrice, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given SmsPrice and assigns it to the Price field.
func (o *SmsInboundMessage) SetPrice(v SmsPrice) {
	o.Price = &v
}

// GetReceivedAt returns the ReceivedAt field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetReceivedAt() Time {
	if o == nil || o.ReceivedAt == nil {
		var ret Time
		return ret
	}
	return *o.ReceivedAt
}

// GetReceivedAtOk returns a tuple with the ReceivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetReceivedAtOk() (*Time, bool) {
	if o == nil || o.ReceivedAt == nil {
		return nil, false
	}
	return o.ReceivedAt, true
}

// HasReceivedAt returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasReceivedAt() bool {
	if o != nil && o.ReceivedAt != nil {
		return true
	}

	return false
}

// SetReceivedAt gets a reference to the given Time and assigns it to the ReceivedAt field.
func (o *SmsInboundMessage) SetReceivedAt(v Time) {
	o.ReceivedAt = &v
}

// GetSmsCount returns the SmsCount field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetSmsCount() int32 {
	if o == nil || o.SmsCount == nil {
		var ret int32
		return ret
	}
	return *o.SmsCount
}

// GetSmsCountOk returns a tuple with the SmsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetSmsCountOk() (*int32, bool) {
	if o == nil || o.SmsCount == nil {
		return nil, false
	}
	return o.SmsCount, true
}

// HasSmsCount returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasSmsCount() bool {
	if o != nil && o.SmsCount != nil {
		return true
	}

	return false
}

// SetSmsCount gets a reference to the given int32 and assigns it to the SmsCount field.
func (o *SmsInboundMessage) SetSmsCount(v int32) {
	o.SmsCount = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *SmsInboundMessage) SetText(v string) {
	o.Text = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SmsInboundMessage) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsInboundMessage) GetToOk() (*string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SmsInboundMessage) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *SmsInboundMessage) SetTo(v string) {
	o.To = &v
}

func (o SmsInboundMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CallbackData != nil {
		toSerialize["callbackData"] = o.CallbackData
	}
	if o.CleanText != nil {
		toSerialize["cleanText"] = o.CleanText
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Keyword != nil {
		toSerialize["keyword"] = o.Keyword
	}
	if o.MessageId != nil {
		toSerialize["messageId"] = o.MessageId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.ReceivedAt != nil {
		toSerialize["receivedAt"] = o.ReceivedAt
	}
	if o.SmsCount != nil {
		toSerialize["smsCount"] = o.SmsCount
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableSmsInboundMessage struct {
	value *SmsInboundMessage
	isSet bool
}

func (v NullableSmsInboundMessage) Get() *SmsInboundMessage {
	return v.value
}

func (v *NullableSmsInboundMessage) Set(val *SmsInboundMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsInboundMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsInboundMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsInboundMessage(val *SmsInboundMessage) *NullableSmsInboundMessage {
	return &NullableSmsInboundMessage{value: val, isSet: true}
}

func (v NullableSmsInboundMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsInboundMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

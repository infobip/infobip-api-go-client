/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SftpUploadStatus Indicates current status of the recording file being uploaded via SFTP.
type SftpUploadStatus string

// List of SftpUploadStatus
const (
	SFTPUPLOADSTATUS_UPLOADING SftpUploadStatus = "UPLOADING"
	SFTPUPLOADSTATUS_UPLOADED  SftpUploadStatus = "UPLOADED"
	SFTPUPLOADSTATUS_FAILED    SftpUploadStatus = "FAILED"
)

// All allowed values of SftpUploadStatus enum
var AllowedSftpUploadStatusEnumValues = []SftpUploadStatus{
	"UPLOADING",
	"UPLOADED",
	"FAILED",
}

func (v *SftpUploadStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SftpUploadStatus(value)
	for _, existing := range AllowedSftpUploadStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SftpUploadStatus", value)
}

// NewSftpUploadStatusFromValue returns a pointer to a valid SftpUploadStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSftpUploadStatusFromValue(v string) (*SftpUploadStatus, error) {
	ev := SftpUploadStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SftpUploadStatus: valid values are %v", v, AllowedSftpUploadStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SftpUploadStatus) IsValid() bool {
	for _, existing := range AllowedSftpUploadStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SftpUploadStatus value
func (v SftpUploadStatus) Ptr() *SftpUploadStatus {
	return &v
}

type NullableSftpUploadStatus struct {
	value *SftpUploadStatus
	isSet bool
}

func (v NullableSftpUploadStatus) Get() *SftpUploadStatus {
	return v.value
}

func (v *NullableSftpUploadStatus) Set(val *SftpUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSftpUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSftpUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSftpUploadStatus(val *SftpUploadStatus) *NullableSftpUploadStatus {
	return &NullableSftpUploadStatus{value: val, isSet: true}
}

func (v NullableSftpUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSftpUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

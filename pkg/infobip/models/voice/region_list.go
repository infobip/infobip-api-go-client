/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the RegionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionList{}

// RegionList struct for RegionList
type RegionList struct {
	// List of regions.
	Regions []Region
}

// NewRegionList instantiates a new RegionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewRegionList() *RegionList {
	this := RegionList{}
	return &this
}

// NewRegionListWithDefaults instantiates a new RegionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionListWithDefaults() *RegionList {
	this := RegionList{}

	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *RegionList) GetRegions() []Region {
	if o == nil || IsNil(o.Regions) {
		var ret []Region
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionList) GetRegionsOk() ([]Region, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *RegionList) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *RegionList) SetRegions(v []Region) {
	o.Regions = v
}

func (o RegionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableRegionList struct {
	value *RegionList
	isSet bool
}

func (v NullableRegionList) Get() *RegionList {
	return v.value
}

func (v *NullableRegionList) Set(val *RegionList) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionList) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionList(val *RegionList) *NullableRegionList {
	return &NullableRegionList{value: val, isSet: true}
}

func (v NullableRegionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

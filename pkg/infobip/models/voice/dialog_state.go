/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// DialogState Dialog state.
type DialogState string

// List of DialogState
const (
	DIALOGSTATE_CREATED         DialogState = "CREATED"
	DIALOGSTATE_PRE_ESTABLISHED DialogState = "PRE_ESTABLISHED"
	DIALOGSTATE_ESTABLISHED     DialogState = "ESTABLISHED"
	DIALOGSTATE_FINISHED        DialogState = "FINISHED"
	DIALOGSTATE_FAILED          DialogState = "FAILED"
)

// All allowed values of DialogState enum
var AllowedDialogStateEnumValues = []DialogState{
	"CREATED",
	"PRE_ESTABLISHED",
	"ESTABLISHED",
	"FINISHED",
	"FAILED",
}

func (v *DialogState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DialogState(value)
	for _, existing := range AllowedDialogStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DialogState", value)
}

// NewDialogStateFromValue returns a pointer to a valid DialogState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDialogStateFromValue(v string) (*DialogState, error) {
	ev := DialogState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DialogState: valid values are %v", v, AllowedDialogStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DialogState) IsValid() bool {
	for _, existing := range AllowedDialogStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DialogState value
func (v DialogState) Ptr() *DialogState {
	return &v
}

type NullableDialogState struct {
	value *DialogState
	isSet bool
}

func (v NullableDialogState) Get() *DialogState {
	return v.value
}

func (v *NullableDialogState) Set(val *DialogState) {
	v.value = val
	v.isSet = true
}

func (v NullableDialogState) IsSet() bool {
	return v.isSet
}

func (v *NullableDialogState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialogState(val *DialogState) *NullableDialogState {
	return &NullableDialogState{value: val, isSet: true}
}

func (v NullableDialogState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialogState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

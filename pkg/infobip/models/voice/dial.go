/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Dial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dial{}

// Dial Dial action performs a call redirection, joining the user's call with another destination. After Dial action the following actions are forbidden: Say, Collect, Dial, Dial to Many, Dial to WebRTC, Dial to SIP trunk, Dial to Conversations, Play, Record and Play from Recording.
type Dial struct {
	// must be a valid E164 MSISDN; the parameter can be constructed using variables
	Dial    string
	Options *DialOptions
	// User-defined ID of an action that can be used with go-to action.
	ActionId *int32
}

type _Dial Dial

// NewDial instantiates a new Dial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDial(dial string) *Dial {
	this := Dial{}
	this.Dial = dial
	return &this
}

// NewDialWithDefaults instantiates a new Dial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialWithDefaults() *Dial {
	this := Dial{}

	return &this
}

// GetDial returns the Dial field value
func (o *Dial) GetDial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dial
}

// GetDialOk returns a tuple with the Dial field value
// and a boolean to check if the value has been set.
func (o *Dial) GetDialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dial, true
}

// SetDial sets field value
func (o *Dial) SetDial(v string) {
	o.Dial = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Dial) GetOptions() DialOptions {
	if o == nil || IsNil(o.Options) {
		var ret DialOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dial) GetOptionsOk() (*DialOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Dial) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given DialOptions and assigns it to the Options field.
func (o *Dial) SetOptions(v DialOptions) {
	o.Options = &v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *Dial) GetActionId() int32 {
	if o == nil || IsNil(o.ActionId) {
		var ret int32
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dial) GetActionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *Dial) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given int32 and assigns it to the ActionId field.
func (o *Dial) SetActionId(v int32) {
	o.ActionId = &v
}

func (o Dial) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dial"] = o.Dial
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	return toSerialize, nil
}

type NullableDial struct {
	value *Dial
	isSet bool
}

func (v NullableDial) Get() *Dial {
	return v.value
}

func (v *NullableDial) Set(val *Dial) {
	v.value = val
	v.isSet = true
}

func (v NullableDial) IsSet() bool {
	return v.isSet
}

func (v *NullableDial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDial(val *Dial) *NullableDial {
	return &NullableDial{value: val, isSet: true}
}

func (v NullableDial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

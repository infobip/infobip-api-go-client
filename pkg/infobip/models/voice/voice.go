/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Voice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Voice{}

// Voice Used to define voice in which text would be synthesized. It has two parameters: _name_ and _gender_. When only _name_ is provided, then that exact voice with that name will be used to synthesize text. If only _gender_ is provided, then text is synthesized with first voice in given gender. If voice is not set, then default voice is used.
type Voice struct {
	// Gender of the voice. Can be `male` or `female`.
	Gender *string
	// Name of the voice. Example: `Joanna`
	Name *string
}

// NewVoice instantiates a new Voice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewVoice() *Voice {
	this := Voice{}
	return &this
}

// NewVoiceWithDefaults instantiates a new Voice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoiceWithDefaults() *Voice {
	this := Voice{}

	return &this
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *Voice) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voice) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Voice) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *Voice) SetGender(v string) {
	o.Gender = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Voice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Voice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Voice) SetName(v string) {
	o.Name = &v
}

func (o Voice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Voice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableVoice struct {
	value *Voice
	isSet bool
}

func (v NullableVoice) Get() *Voice {
	return v.value
}

func (v *NullableVoice) Set(val *Voice) {
	v.value = val
	v.isSet = true
}

func (v NullableVoice) IsSet() bool {
	return v.isSet
}

func (v *NullableVoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoice(val *Voice) *NullableVoice {
	return &NullableVoice{value: val, isSet: true}
}

func (v NullableVoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

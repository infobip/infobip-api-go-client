/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Numbers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Numbers{}

// Numbers struct for Numbers
type Numbers struct {
	// must be a valid E164 MSISDN; the parameter can be constructed using variables
	Number *string
	// must be a comma-separated list of valid E164 MSISDN numbers; the parameter can be constructed using variables
	Numbers *string
}

// NewNumbers instantiates a new Numbers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewNumbers() *Numbers {
	this := Numbers{}
	return &this
}

// NewNumbersWithDefaults instantiates a new Numbers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumbersWithDefaults() *Numbers {
	this := Numbers{}

	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Numbers) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Numbers) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Numbers) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *Numbers) SetNumber(v string) {
	o.Number = &v
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *Numbers) GetNumbers() string {
	if o == nil || IsNil(o.Numbers) {
		var ret string
		return ret
	}
	return *o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Numbers) GetNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.Numbers) {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *Numbers) HasNumbers() bool {
	if o != nil && !IsNil(o.Numbers) {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given string and assigns it to the Numbers field.
func (o *Numbers) SetNumbers(v string) {
	o.Numbers = &v
}

func (o Numbers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Numbers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Numbers) {
		toSerialize["numbers"] = o.Numbers
	}
	return toSerialize, nil
}

type NullableNumbers struct {
	value *Numbers
	isSet bool
}

func (v NullableNumbers) Get() *Numbers {
	return v.value
}

func (v *NullableNumbers) Set(val *Numbers) {
	v.value = val
	v.isSet = true
}

func (v NullableNumbers) IsSet() bool {
	return v.isSet
}

func (v *NullableNumbers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumbers(val *Numbers) *NullableNumbers {
	return &NullableNumbers{value: val, isSet: true}
}

func (v NullableNumbers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumbers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

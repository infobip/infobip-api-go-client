/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the FilePlayContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePlayContent{}

// FilePlayContent struct for FilePlayContent
type FilePlayContent struct {
	Type   PlayContentType
	FileId string
}

type _FilePlayContent FilePlayContent

// NewFilePlayContent instantiates a new FilePlayContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePlayContent(fileId string) *FilePlayContent {
	this := FilePlayContent{}
	this.Type = "FILE"
	this.FileId = fileId
	return &this
}

// NewFilePlayContentWithDefaults instantiates a new FilePlayContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePlayContentWithDefaults() *FilePlayContent {
	this := FilePlayContent{}
	this.Type = "FILE"
	return &this
}

// GetFileId returns the FileId field value
func (o *FilePlayContent) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *FilePlayContent) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *FilePlayContent) SetFileId(v string) {
	o.FileId = v
}

func (o FilePlayContent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePlayContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["fileId"] = o.FileId
	return toSerialize, nil
}

type NullableFilePlayContent struct {
	value *FilePlayContent
	isSet bool
}

func (v NullableFilePlayContent) Get() *FilePlayContent {
	return v.value
}

func (v *NullableFilePlayContent) Set(val *FilePlayContent) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePlayContent) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePlayContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePlayContent(val *FilePlayContent) *NullableFilePlayContent {
	return &NullableFilePlayContent{value: val, isSet: true}
}

func (v NullableFilePlayContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePlayContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

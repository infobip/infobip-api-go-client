/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// OutboundEventType Event type.
type OutboundEventType string

// List of OutboundEventType
const (
	OUTBOUNDEVENTTYPE_STARTED OutboundEventType = "TYPING_STARTED"
	OUTBOUNDEVENTTYPE_STOPPED OutboundEventType = "TYPING_STOPPED"
)

// All allowed values of OutboundEventType enum
var AllowedOutboundEventTypeEnumValues = []OutboundEventType{
	"TYPING_STARTED",
	"TYPING_STOPPED",
}

func (v *OutboundEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboundEventType(value)
	for _, existing := range AllowedOutboundEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboundEventType", value)
}

// NewOutboundEventTypeFromValue returns a pointer to a valid OutboundEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboundEventTypeFromValue(v string) (*OutboundEventType, error) {
	ev := OutboundEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboundEventType: valid values are %v", v, AllowedOutboundEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboundEventType) IsValid() bool {
	for _, existing := range AllowedOutboundEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboundEventType value
func (v OutboundEventType) Ptr() *OutboundEventType {
	return &v
}

type NullableOutboundEventType struct {
	value *OutboundEventType
	isSet bool
}

func (v NullableOutboundEventType) Get() *OutboundEventType {
	return v.value
}

func (v *NullableOutboundEventType) Set(val *OutboundEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundEventType(val *OutboundEventType) *NullableOutboundEventType {
	return &NullableOutboundEventType{value: val, isSet: true}
}

func (v NullableOutboundEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

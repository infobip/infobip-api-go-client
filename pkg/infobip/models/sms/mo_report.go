/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MoReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoReport{}

// MoReport struct for MoReport
type MoReport struct {
	// Unique SMS ID.
	MessageId *string
	// Sender ID that can be alphanumeric or numeric.
	From *string
	// The recipient number.
	To *string
	// Received message content.
	Text *string
	// Text of received message without a keyword (if a keyword was sent).
	CleanText *string
	// Keyword extracted from the message text.
	Keyword *string
	// Date and time when Infobip received the message.
	ReceivedAt *Time
	// Long SMS messages have a character limit on how much can be sent over one message.  Longer messages will be split up into multiple messages and sent separately.  This is the total count of messages one SMS was sent over.
	SmsCount *int32
	Price    *Price
	// The callback data sent through the callbackData field in your fully featured SMS message.
	CallbackData *string
}

// NewMoReport instantiates a new MoReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewMoReport() *MoReport {
	this := MoReport{}
	return &this
}

// NewMoReportWithDefaults instantiates a new MoReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoReportWithDefaults() *MoReport {
	this := MoReport{}

	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *MoReport) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *MoReport) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *MoReport) SetMessageId(v string) {
	o.MessageId = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *MoReport) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *MoReport) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *MoReport) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *MoReport) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *MoReport) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *MoReport) SetTo(v string) {
	o.To = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MoReport) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MoReport) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MoReport) SetText(v string) {
	o.Text = &v
}

// GetCleanText returns the CleanText field value if set, zero value otherwise.
func (o *MoReport) GetCleanText() string {
	if o == nil || IsNil(o.CleanText) {
		var ret string
		return ret
	}
	return *o.CleanText
}

// GetCleanTextOk returns a tuple with the CleanText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetCleanTextOk() (*string, bool) {
	if o == nil || IsNil(o.CleanText) {
		return nil, false
	}
	return o.CleanText, true
}

// HasCleanText returns a boolean if a field has been set.
func (o *MoReport) HasCleanText() bool {
	if o != nil && !IsNil(o.CleanText) {
		return true
	}

	return false
}

// SetCleanText gets a reference to the given string and assigns it to the CleanText field.
func (o *MoReport) SetCleanText(v string) {
	o.CleanText = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *MoReport) GetKeyword() string {
	if o == nil || IsNil(o.Keyword) {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetKeywordOk() (*string, bool) {
	if o == nil || IsNil(o.Keyword) {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *MoReport) HasKeyword() bool {
	if o != nil && !IsNil(o.Keyword) {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *MoReport) SetKeyword(v string) {
	o.Keyword = &v
}

// GetReceivedAt returns the ReceivedAt field value if set, zero value otherwise.
func (o *MoReport) GetReceivedAt() Time {
	if o == nil || IsNil(o.ReceivedAt) {
		var ret Time
		return ret
	}
	return *o.ReceivedAt
}

// GetReceivedAtOk returns a tuple with the ReceivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetReceivedAtOk() (*Time, bool) {
	if o == nil || IsNil(o.ReceivedAt) {
		return nil, false
	}
	return o.ReceivedAt, true
}

// HasReceivedAt returns a boolean if a field has been set.
func (o *MoReport) HasReceivedAt() bool {
	if o != nil && !IsNil(o.ReceivedAt) {
		return true
	}

	return false
}

// SetReceivedAt gets a reference to the given Time and assigns it to the ReceivedAt field.
func (o *MoReport) SetReceivedAt(v Time) {
	o.ReceivedAt = &v
}

// GetSmsCount returns the SmsCount field value if set, zero value otherwise.
func (o *MoReport) GetSmsCount() int32 {
	if o == nil || IsNil(o.SmsCount) {
		var ret int32
		return ret
	}
	return *o.SmsCount
}

// GetSmsCountOk returns a tuple with the SmsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetSmsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SmsCount) {
		return nil, false
	}
	return o.SmsCount, true
}

// HasSmsCount returns a boolean if a field has been set.
func (o *MoReport) HasSmsCount() bool {
	if o != nil && !IsNil(o.SmsCount) {
		return true
	}

	return false
}

// SetSmsCount gets a reference to the given int32 and assigns it to the SmsCount field.
func (o *MoReport) SetSmsCount(v int32) {
	o.SmsCount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *MoReport) GetPrice() Price {
	if o == nil || IsNil(o.Price) {
		var ret Price
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetPriceOk() (*Price, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *MoReport) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given Price and assigns it to the Price field.
func (o *MoReport) SetPrice(v Price) {
	o.Price = &v
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *MoReport) GetCallbackData() string {
	if o == nil || IsNil(o.CallbackData) {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoReport) GetCallbackDataOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackData) {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *MoReport) HasCallbackData() bool {
	if o != nil && !IsNil(o.CallbackData) {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *MoReport) SetCallbackData(v string) {
	o.CallbackData = &v
}

func (o MoReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.CleanText) {
		toSerialize["cleanText"] = o.CleanText
	}
	if !IsNil(o.Keyword) {
		toSerialize["keyword"] = o.Keyword
	}
	if !IsNil(o.ReceivedAt) {
		toSerialize["receivedAt"] = o.ReceivedAt
	}
	if !IsNil(o.SmsCount) {
		toSerialize["smsCount"] = o.SmsCount
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CallbackData) {
		toSerialize["callbackData"] = o.CallbackData
	}
	return toSerialize, nil
}

type NullableMoReport struct {
	value *MoReport
	isSet bool
}

func (v NullableMoReport) Get() *MoReport {
	return v.value
}

func (v *NullableMoReport) Set(val *MoReport) {
	v.value = val
	v.isSet = true
}

func (v NullableMoReport) IsSet() bool {
	return v.isSet
}

func (v *NullableMoReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoReport(val *MoReport) *NullableMoReport {
	return &NullableMoReport{value: val, isSet: true}
}

func (v NullableMoReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

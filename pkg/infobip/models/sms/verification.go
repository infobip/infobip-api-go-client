/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the Verification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Verification{}

// Verification struct for Verification
type Verification struct {
	// Phone number (MSISDN) for which verification status is checked.
	Msisdn *string
	// Sent UNIX timestamp (in millis), if the phone number (MSISDN) is verified.
	SentAt *int64
	// Indicates if the phone number (MSISDN) is already verified for 2FA application with given ID.
	Verified *bool
	// Verification UNIX timestamp (in millis), if the phone number (MSISDN) is verified.
	VerifiedAt *int64
}

// NewVerification instantiates a new Verification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerification() *Verification {
	this := Verification{}
	return &this
}

// NewVerificationWithDefaults instantiates a new Verification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationWithDefaults() *Verification {
	this := Verification{}
	return &this
}

// GetMsisdn returns the Msisdn field value if set, zero value otherwise.
func (o *Verification) GetMsisdn() string {
	if o == nil || IsNil(o.Msisdn) {
		var ret string
		return ret
	}
	return *o.Msisdn
}

// GetMsisdnOk returns a tuple with the Msisdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetMsisdnOk() (*string, bool) {
	if o == nil || IsNil(o.Msisdn) {
		return nil, false
	}
	return o.Msisdn, true
}

// HasMsisdn returns a boolean if a field has been set.
func (o *Verification) HasMsisdn() bool {
	if o != nil && !IsNil(o.Msisdn) {
		return true
	}

	return false
}

// SetMsisdn gets a reference to the given string and assigns it to the Msisdn field.
func (o *Verification) SetMsisdn(v string) {
	o.Msisdn = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *Verification) GetSentAt() int64 {
	if o == nil || IsNil(o.SentAt) {
		var ret int64
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetSentAtOk() (*int64, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *Verification) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given int64 and assigns it to the SentAt field.
func (o *Verification) SetSentAt(v int64) {
	o.SentAt = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *Verification) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *Verification) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *Verification) SetVerified(v bool) {
	o.Verified = &v
}

// GetVerifiedAt returns the VerifiedAt field value if set, zero value otherwise.
func (o *Verification) GetVerifiedAt() int64 {
	if o == nil || IsNil(o.VerifiedAt) {
		var ret int64
		return ret
	}
	return *o.VerifiedAt
}

// GetVerifiedAtOk returns a tuple with the VerifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetVerifiedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.VerifiedAt) {
		return nil, false
	}
	return o.VerifiedAt, true
}

// HasVerifiedAt returns a boolean if a field has been set.
func (o *Verification) HasVerifiedAt() bool {
	if o != nil && !IsNil(o.VerifiedAt) {
		return true
	}

	return false
}

// SetVerifiedAt gets a reference to the given int64 and assigns it to the VerifiedAt field.
func (o *Verification) SetVerifiedAt(v int64) {
	o.VerifiedAt = &v
}

func (o Verification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Verification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Msisdn) {
		toSerialize["msisdn"] = o.Msisdn
	}
	if !IsNil(o.SentAt) {
		toSerialize["sentAt"] = o.SentAt
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.VerifiedAt) {
		toSerialize["verifiedAt"] = o.VerifiedAt
	}
	return toSerialize, nil
}

type NullableVerification struct {
	value *Verification
	isSet bool
}

func (v NullableVerification) Get() *Verification {
	return v.value
}

func (v *NullableVerification) Set(val *Verification) {
	v.value = val
	v.isSet = true
}

func (v NullableVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerification(val *Verification) *NullableVerification {
	return &NullableVerification{value: val, isSet: true}
}

func (v NullableVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

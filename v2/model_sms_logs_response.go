/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsLogsResponse struct for SmsLogsResponse
type SmsLogsResponse struct {
	// Collection of logs.
	Results *[]SmsLog `json:"results,omitempty"`
}

// NewSmsLogsResponse instantiates a new SmsLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsLogsResponse() *SmsLogsResponse {
	this := SmsLogsResponse{}
	return &this
}

// NewSmsLogsResponseWithDefaults instantiates a new SmsLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsLogsResponseWithDefaults() *SmsLogsResponse {
	this := SmsLogsResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *SmsLogsResponse) GetResults() []SmsLog {
	if o == nil || o.Results == nil {
		var ret []SmsLog
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLogsResponse) GetResultsOk() (*[]SmsLog, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SmsLogsResponse) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []SmsLog and assigns it to the Results field.
func (o *SmsLogsResponse) SetResults(v []SmsLog) {
	o.Results = &v
}

func (o SmsLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableSmsLogsResponse struct {
	value *SmsLogsResponse
	isSet bool
}

func (v NullableSmsLogsResponse) Get() *SmsLogsResponse {
	return v.value
}

func (v *NullableSmsLogsResponse) Set(val *SmsLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsLogsResponse(val *SmsLogsResponse) *NullableSmsLogsResponse {
	return &NullableSmsLogsResponse{value: val, isSet: true}
}

func (v NullableSmsLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

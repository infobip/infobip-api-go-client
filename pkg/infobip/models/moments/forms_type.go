/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FormsType Form type
type FormsType string

// List of FormsType
const (
	FORMSTYPE_OPT_IN   FormsType = "OPT_IN"
	FORMSTYPE_OPT_OUT  FormsType = "OPT_OUT"
	FORMSTYPE_FACEBOOK FormsType = "FACEBOOK"
	FORMSTYPE_LIVECHAT FormsType = "LIVECHAT"
	FORMSTYPE_APPLE    FormsType = "APPLE"
	FORMSTYPE_CSAT     FormsType = "CSAT"
	FORMSTYPE_WA_FLOW  FormsType = "WA_FLOW"
)

// All allowed values of FormsType enum
var AllowedFormsTypeEnumValues = []FormsType{
	"OPT_IN",
	"OPT_OUT",
	"FACEBOOK",
	"LIVECHAT",
	"APPLE",
	"CSAT",
	"WA_FLOW",
}

func (v *FormsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormsType(value)
	for _, existing := range AllowedFormsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormsType", value)
}

// NewFormsTypeFromValue returns a pointer to a valid FormsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormsTypeFromValue(v string) (*FormsType, error) {
	ev := FormsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormsType: valid values are %v", v, AllowedFormsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormsType) IsValid() bool {
	for _, existing := range AllowedFormsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormsType value
func (v FormsType) Ptr() *FormsType {
	return &v
}

type NullableFormsType struct {
	value *FormsType
	isSet bool
}

func (v NullableFormsType) Get() *FormsType {
	return v.value
}

func (v *NullableFormsType) Set(val *FormsType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormsType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormsType(val *FormsType) *NullableFormsType {
	return &NullableFormsType{value: val, isSet: true}
}

func (v NullableFormsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

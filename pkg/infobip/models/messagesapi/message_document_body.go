/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MessageDocumentBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDocumentBody{}

// MessageDocumentBody struct for MessageDocumentBody
type MessageDocumentBody struct {
	Type MessageBodyType
	// URL of the document.
	Url string
	// Document caption.
	Text *string
	// Document filename.
	Filename *string
}

type _MessageDocumentBody MessageDocumentBody

// NewMessageDocumentBody instantiates a new MessageDocumentBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDocumentBody(url string) *MessageDocumentBody {
	this := MessageDocumentBody{}
	this.Type = "DOCUMENT"
	this.Url = url
	return &this
}

// NewMessageDocumentBodyWithDefaults instantiates a new MessageDocumentBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDocumentBodyWithDefaults() *MessageDocumentBody {
	this := MessageDocumentBody{}
	this.Type = "DOCUMENT"
	return &this
}

// GetUrl returns the Url field value
func (o *MessageDocumentBody) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MessageDocumentBody) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MessageDocumentBody) SetUrl(v string) {
	o.Url = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MessageDocumentBody) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDocumentBody) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MessageDocumentBody) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MessageDocumentBody) SetText(v string) {
	o.Text = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *MessageDocumentBody) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDocumentBody) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *MessageDocumentBody) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *MessageDocumentBody) SetFilename(v string) {
	o.Filename = &v
}

func (o MessageDocumentBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDocumentBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	return toSerialize, nil
}

type NullableMessageDocumentBody struct {
	value *MessageDocumentBody
	isSet bool
}

func (v NullableMessageDocumentBody) Get() *MessageDocumentBody {
	return v.value
}

func (v *NullableMessageDocumentBody) Set(val *MessageDocumentBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDocumentBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDocumentBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDocumentBody(val *MessageDocumentBody) *NullableMessageDocumentBody {
	return &NullableMessageDocumentBody{value: val, isSet: true}
}

func (v NullableMessageDocumentBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDocumentBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

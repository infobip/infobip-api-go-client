/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the IpDomainResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpDomainResponse{}

// IpDomainResponse struct for IpDomainResponse
type IpDomainResponse struct {
	// Domain identifier.
	Id int64
	// Domain name.
	Name  string
	Pools []DomainIpPool
}

type _IpDomainResponse IpDomainResponse

// NewIpDomainResponse instantiates a new IpDomainResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewIpDomainResponse(id int64, name string, pools []DomainIpPool) *IpDomainResponse {
	this := IpDomainResponse{}
	this.Id = id
	this.Name = name
	this.Pools = pools
	return &this
}

// NewIpDomainResponseWithDefaults instantiates a new IpDomainResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpDomainResponseWithDefaults() *IpDomainResponse {
	this := IpDomainResponse{}

	return &this
}

// GetId returns the Id field value
func (o *IpDomainResponse) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IpDomainResponse) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IpDomainResponse) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IpDomainResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IpDomainResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IpDomainResponse) SetName(v string) {
	o.Name = v
}

// GetPools returns the Pools field value
func (o *IpDomainResponse) GetPools() []DomainIpPool {
	if o == nil {
		var ret []DomainIpPool
		return ret
	}

	return o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value
// and a boolean to check if the value has been set.
func (o *IpDomainResponse) GetPoolsOk() ([]DomainIpPool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pools, true
}

// SetPools sets field value
func (o *IpDomainResponse) SetPools(v []DomainIpPool) {
	o.Pools = v
}

func (o IpDomainResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpDomainResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["pools"] = o.Pools
	return toSerialize, nil
}

type NullableIpDomainResponse struct {
	value *IpDomainResponse
	isSet bool
}

func (v NullableIpDomainResponse) Get() *IpDomainResponse {
	return v.value
}

func (v *NullableIpDomainResponse) Set(val *IpDomainResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIpDomainResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIpDomainResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpDomainResponse(val *IpDomainResponse) *NullableIpDomainResponse {
	return &NullableIpDomainResponse{value: val, isSet: true}
}

func (v NullableIpDomainResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpDomainResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

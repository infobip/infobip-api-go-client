/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// MessageBodyType the model 'MessageBodyType'
type MessageBodyType string

// List of MessageBodyType
const (
	MESSAGEBODYTYPE_TEXT                   MessageBodyType = "TEXT"
	MESSAGEBODYTYPE_IMAGE                  MessageBodyType = "IMAGE"
	MESSAGEBODYTYPE_VIDEO                  MessageBodyType = "VIDEO"
	MESSAGEBODYTYPE_DOCUMENT               MessageBodyType = "DOCUMENT"
	MESSAGEBODYTYPE_RICH_LINK              MessageBodyType = "RICH_LINK"
	MESSAGEBODYTYPE_AUTHENTICATION_REQUEST MessageBodyType = "AUTHENTICATION_REQUEST"
	MESSAGEBODYTYPE_LIST                   MessageBodyType = "LIST"
	MESSAGEBODYTYPE_CAROUSEL               MessageBodyType = "CAROUSEL"
)

// All allowed values of MessageBodyType enum
var AllowedMessageBodyTypeEnumValues = []MessageBodyType{
	"TEXT",
	"IMAGE",
	"VIDEO",
	"DOCUMENT",
	"RICH_LINK",
	"AUTHENTICATION_REQUEST",
	"LIST",
	"CAROUSEL",
}

func (v *MessageBodyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageBodyType(value)
	for _, existing := range AllowedMessageBodyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageBodyType", value)
}

// NewMessageBodyTypeFromValue returns a pointer to a valid MessageBodyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageBodyTypeFromValue(v string) (*MessageBodyType, error) {
	ev := MessageBodyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageBodyType: valid values are %v", v, AllowedMessageBodyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageBodyType) IsValid() bool {
	for _, existing := range AllowedMessageBodyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageBodyType value
func (v MessageBodyType) Ptr() *MessageBodyType {
	return &v
}

type NullableMessageBodyType struct {
	value *MessageBodyType
	isSet bool
}

func (v NullableMessageBodyType) Get() *MessageBodyType {
	return v.value
}

func (v *NullableMessageBodyType) Set(val *MessageBodyType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageBodyType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageBodyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageBodyType(val *MessageBodyType) *NullableMessageBodyType {
	return &NullableMessageBodyType{value: val, isSet: true}
}

func (v NullableMessageBodyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageBodyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

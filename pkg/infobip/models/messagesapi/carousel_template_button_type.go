/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// CarouselTemplateButtonType the model 'CarouselTemplateButtonType'
type CarouselTemplateButtonType string

// List of CarouselTemplateButtonType
const (
	CAROUSELTEMPLATEBUTTONTYPE_QUICK_REPLY  CarouselTemplateButtonType = "QUICK_REPLY"
	CAROUSELTEMPLATEBUTTONTYPE_OPEN_URL     CarouselTemplateButtonType = "OPEN_URL"
	CAROUSELTEMPLATEBUTTONTYPE_PHONE_NUMBER CarouselTemplateButtonType = "PHONE_NUMBER"
)

// All allowed values of CarouselTemplateButtonType enum
var AllowedCarouselTemplateButtonTypeEnumValues = []CarouselTemplateButtonType{
	"QUICK_REPLY",
	"OPEN_URL",
	"PHONE_NUMBER",
}

func (v *CarouselTemplateButtonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CarouselTemplateButtonType(value)
	for _, existing := range AllowedCarouselTemplateButtonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CarouselTemplateButtonType", value)
}

// NewCarouselTemplateButtonTypeFromValue returns a pointer to a valid CarouselTemplateButtonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCarouselTemplateButtonTypeFromValue(v string) (*CarouselTemplateButtonType, error) {
	ev := CarouselTemplateButtonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CarouselTemplateButtonType: valid values are %v", v, AllowedCarouselTemplateButtonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CarouselTemplateButtonType) IsValid() bool {
	for _, existing := range AllowedCarouselTemplateButtonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CarouselTemplateButtonType value
func (v CarouselTemplateButtonType) Ptr() *CarouselTemplateButtonType {
	return &v
}

type NullableCarouselTemplateButtonType struct {
	value *CarouselTemplateButtonType
	isSet bool
}

func (v NullableCarouselTemplateButtonType) Get() *CarouselTemplateButtonType {
	return v.value
}

func (v *NullableCarouselTemplateButtonType) Set(val *CarouselTemplateButtonType) {
	v.value = val
	v.isSet = true
}

func (v NullableCarouselTemplateButtonType) IsSet() bool {
	return v.isSet
}

func (v *NullableCarouselTemplateButtonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarouselTemplateButtonType(val *CarouselTemplateButtonType) *NullableCarouselTemplateButtonType {
	return &NullableCarouselTemplateButtonType{value: val, isSet: true}
}

func (v NullableCarouselTemplateButtonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarouselTemplateButtonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRecordingRequest{}

// CallRecordingRequest struct for CallRecordingRequest
type CallRecordingRequest struct {
	RecordingType RecordingType
	CustomData    *map[string]string
	FilePrefix    *string
}

type _CallRecordingRequest CallRecordingRequest

// NewCallRecordingRequest instantiates a new CallRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallRecordingRequest(recordingType RecordingType) *CallRecordingRequest {
	this := CallRecordingRequest{}
	this.RecordingType = recordingType
	return &this
}

// NewCallRecordingRequestWithDefaults instantiates a new CallRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingRequestWithDefaults() *CallRecordingRequest {
	this := CallRecordingRequest{}

	return &this
}

// GetRecordingType returns the RecordingType field value
func (o *CallRecordingRequest) GetRecordingType() RecordingType {
	if o == nil {
		var ret RecordingType
		return ret
	}

	return o.RecordingType
}

// GetRecordingTypeOk returns a tuple with the RecordingType field value
// and a boolean to check if the value has been set.
func (o *CallRecordingRequest) GetRecordingTypeOk() (*RecordingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordingType, true
}

// SetRecordingType sets field value
func (o *CallRecordingRequest) SetRecordingType(v RecordingType) {
	o.RecordingType = v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *CallRecordingRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *CallRecordingRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *CallRecordingRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

// GetFilePrefix returns the FilePrefix field value if set, zero value otherwise.
func (o *CallRecordingRequest) GetFilePrefix() string {
	if o == nil || IsNil(o.FilePrefix) {
		var ret string
		return ret
	}
	return *o.FilePrefix
}

// GetFilePrefixOk returns a tuple with the FilePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingRequest) GetFilePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.FilePrefix) {
		return nil, false
	}
	return o.FilePrefix, true
}

// HasFilePrefix returns a boolean if a field has been set.
func (o *CallRecordingRequest) HasFilePrefix() bool {
	if o != nil && !IsNil(o.FilePrefix) {
		return true
	}

	return false
}

// SetFilePrefix gets a reference to the given string and assigns it to the FilePrefix field.
func (o *CallRecordingRequest) SetFilePrefix(v string) {
	o.FilePrefix = &v
}

func (o CallRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordingType"] = o.RecordingType
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.FilePrefix) {
		toSerialize["filePrefix"] = o.FilePrefix
	}
	return toSerialize, nil
}

type NullableCallRecordingRequest struct {
	value *CallRecordingRequest
	isSet bool
}

func (v NullableCallRecordingRequest) Get() *CallRecordingRequest {
	return v.value
}

func (v *NullableCallRecordingRequest) Set(val *CallRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecordingRequest(val *CallRecordingRequest) *NullableCallRecordingRequest {
	return &NullableCallRecordingRequest{value: val, isSet: true}
}

func (v NullableCallRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infobip

import (
	"encoding/json"
)

// SmsLanguageConfiguration Sets up additional configuration that changes the original message content you can preview with this call.
type SmsLanguageConfiguration struct {
	Language *SmsLanguage `json:"language,omitempty"`
	// Conversion of a message text from one script to another. Possible values: `TURKISH`, `GREEK`, `CYRILLIC`, `SERBIAN_CYRILLIC`, `BULGARIAN_CYRILLIC`, `CENTRAL_EUROPEAN`, `BALTIC` and `NON_UNICODE`.
	Transliteration *string `json:"transliteration,omitempty"`
}

// NewSmsLanguageConfiguration instantiates a new SmsLanguageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsLanguageConfiguration() *SmsLanguageConfiguration {
	this := SmsLanguageConfiguration{}
	return &this
}

// NewSmsLanguageConfigurationWithDefaults instantiates a new SmsLanguageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsLanguageConfigurationWithDefaults() *SmsLanguageConfiguration {
	this := SmsLanguageConfiguration{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SmsLanguageConfiguration) GetLanguage() SmsLanguage {
	if o == nil || o.Language == nil {
		var ret SmsLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLanguageConfiguration) GetLanguageOk() (*SmsLanguage, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SmsLanguageConfiguration) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given SmsLanguage and assigns it to the Language field.
func (o *SmsLanguageConfiguration) SetLanguage(v SmsLanguage) {
	o.Language = &v
}

// GetTransliteration returns the Transliteration field value if set, zero value otherwise.
func (o *SmsLanguageConfiguration) GetTransliteration() string {
	if o == nil || o.Transliteration == nil {
		var ret string
		return ret
	}
	return *o.Transliteration
}

// GetTransliterationOk returns a tuple with the Transliteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLanguageConfiguration) GetTransliterationOk() (*string, bool) {
	if o == nil || o.Transliteration == nil {
		return nil, false
	}
	return o.Transliteration, true
}

// HasTransliteration returns a boolean if a field has been set.
func (o *SmsLanguageConfiguration) HasTransliteration() bool {
	if o != nil && o.Transliteration != nil {
		return true
	}

	return false
}

// SetTransliteration gets a reference to the given string and assigns it to the Transliteration field.
func (o *SmsLanguageConfiguration) SetTransliteration(v string) {
	o.Transliteration = &v
}

func (o SmsLanguageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.Transliteration != nil {
		toSerialize["transliteration"] = o.Transliteration
	}
	return json.Marshal(toSerialize)
}

type NullableSmsLanguageConfiguration struct {
	value *SmsLanguageConfiguration
	isSet bool
}

func (v NullableSmsLanguageConfiguration) Get() *SmsLanguageConfiguration {
	return v.value
}

func (v *NullableSmsLanguageConfiguration) Set(val *SmsLanguageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsLanguageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsLanguageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsLanguageConfiguration(val *SmsLanguageConfiguration) *NullableSmsLanguageConfiguration {
	return &NullableSmsLanguageConfiguration{value: val, isSet: true}
}

func (v NullableSmsLanguageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsLanguageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

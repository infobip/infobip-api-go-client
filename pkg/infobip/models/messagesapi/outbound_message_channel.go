/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package messagesapi

import (
	"encoding/json"
	"fmt"
)

// OutboundMessageChannel Messaging channel used for sending a message.
type OutboundMessageChannel string

// List of OutboundMessageChannel
const (
	OUTBOUNDMESSAGECHANNEL_SMS          OutboundMessageChannel = "SMS"
	OUTBOUNDMESSAGECHANNEL_MMS          OutboundMessageChannel = "MMS"
	OUTBOUNDMESSAGECHANNEL_WHATSAPP     OutboundMessageChannel = "WHATSAPP"
	OUTBOUNDMESSAGECHANNEL_VIBER_BM     OutboundMessageChannel = "VIBER_BM"
	OUTBOUNDMESSAGECHANNEL_VIBER_BOT    OutboundMessageChannel = "VIBER_BOT"
	OUTBOUNDMESSAGECHANNEL_RCS          OutboundMessageChannel = "RCS"
	OUTBOUNDMESSAGECHANNEL_APPLE_MB     OutboundMessageChannel = "APPLE_MB"
	OUTBOUNDMESSAGECHANNEL_INSTAGRAM_DM OutboundMessageChannel = "INSTAGRAM_DM"
	OUTBOUNDMESSAGECHANNEL_LINE_ON      OutboundMessageChannel = "LINE_ON"
	OUTBOUNDMESSAGECHANNEL_MESSENGER    OutboundMessageChannel = "MESSENGER"
)

// All allowed values of OutboundMessageChannel enum
var AllowedOutboundMessageChannelEnumValues = []OutboundMessageChannel{
	"SMS",
	"MMS",
	"WHATSAPP",
	"VIBER_BM",
	"VIBER_BOT",
	"RCS",
	"APPLE_MB",
	"INSTAGRAM_DM",
	"LINE_ON",
	"MESSENGER",
}

func (v *OutboundMessageChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboundMessageChannel(value)
	for _, existing := range AllowedOutboundMessageChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboundMessageChannel", value)
}

// NewOutboundMessageChannelFromValue returns a pointer to a valid OutboundMessageChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboundMessageChannelFromValue(v string) (*OutboundMessageChannel, error) {
	ev := OutboundMessageChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboundMessageChannel: valid values are %v", v, AllowedOutboundMessageChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboundMessageChannel) IsValid() bool {
	for _, existing := range AllowedOutboundMessageChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboundMessageChannel value
func (v OutboundMessageChannel) Ptr() *OutboundMessageChannel {
	return &v
}

type NullableOutboundMessageChannel struct {
	value *OutboundMessageChannel
	isSet bool
}

func (v NullableOutboundMessageChannel) Get() *OutboundMessageChannel {
	return v.value
}

func (v *NullableOutboundMessageChannel) Set(val *OutboundMessageChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundMessageChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundMessageChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundMessageChannel(val *OutboundMessageChannel) *NullableOutboundMessageChannel {
	return &NullableOutboundMessageChannel{value: val, isSet: true}
}

func (v NullableOutboundMessageChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundMessageChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

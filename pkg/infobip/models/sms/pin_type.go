/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sms

import (
	"encoding/json"
	"fmt"
)

// PinType Type of PIN code that will be generated and sent as part of 2FA message.
type PinType string

// List of PinType
const (
	PINTYPE_NUMERIC      PinType = "NUMERIC"
	PINTYPE_ALPHA        PinType = "ALPHA"
	PINTYPE_HEX          PinType = "HEX"
	PINTYPE_ALPHANUMERIC PinType = "ALPHANUMERIC"
)

// All allowed values of PinType enum
var AllowedPinTypeEnumValues = []PinType{
	"NUMERIC",
	"ALPHA",
	"HEX",
	"ALPHANUMERIC",
}

func (v *PinType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PinType(value)
	for _, existing := range AllowedPinTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PinType", value)
}

// NewPinTypeFromValue returns a pointer to a valid PinType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPinTypeFromValue(v string) (*PinType, error) {
	ev := PinType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PinType: valid values are %v", v, AllowedPinTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PinType) IsValid() bool {
	for _, existing := range AllowedPinTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PinType value
func (v PinType) Ptr() *PinType {
	return &v
}

type NullablePinType struct {
	value *PinType
	isSet bool
}

func (v NullablePinType) Get() *PinType {
	return v.value
}

func (v *NullablePinType) Set(val *PinType) {
	v.value = val
	v.isSet = true
}

func (v NullablePinType) IsSet() bool {
	return v.isSet
}

func (v *NullablePinType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinType(val *PinType) *NullablePinType {
	return &NullablePinType{value: val, isSet: true}
}

func (v NullablePinType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

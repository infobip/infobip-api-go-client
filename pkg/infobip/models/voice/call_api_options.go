/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallApiOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallApiOptions{}

// CallApiOptions struct for CallApiOptions
type CallApiOptions struct {
	Method HttpMethod
	// HTTP headers
	Headers map[string]interface{}
	// HTTP body
	Body *string
	// If this field is set, the system will parse the response and save all its fields as variables inside scenario. Note: Parser ignores non-primitive fields and does not go deeper than the first level. For example, if the response is {\"letters\": \"abcd\", \"numbers\": 12345}, the system will store variables letters and numbers, with values abcd and 12345 respectively. Check the example Say action with Call Api Responses. Response that is parsed can only be in JSON or XML.
	CollectResponse *bool
}

type _CallApiOptions CallApiOptions

// NewCallApiOptions instantiates a new CallApiOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallApiOptions(method HttpMethod) *CallApiOptions {
	this := CallApiOptions{}
	this.Method = method
	return &this
}

// NewCallApiOptionsWithDefaults instantiates a new CallApiOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallApiOptionsWithDefaults() *CallApiOptions {
	this := CallApiOptions{}

	return &this
}

// GetMethod returns the Method field value
func (o *CallApiOptions) GetMethod() HttpMethod {
	if o == nil {
		var ret HttpMethod
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *CallApiOptions) GetMethodOk() (*HttpMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *CallApiOptions) SetMethod(v HttpMethod) {
	o.Method = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *CallApiOptions) GetHeaders() map[string]interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallApiOptions) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *CallApiOptions) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *CallApiOptions) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *CallApiOptions) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallApiOptions) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *CallApiOptions) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *CallApiOptions) SetBody(v string) {
	o.Body = &v
}

// GetCollectResponse returns the CollectResponse field value if set, zero value otherwise.
func (o *CallApiOptions) GetCollectResponse() bool {
	if o == nil || IsNil(o.CollectResponse) {
		var ret bool
		return ret
	}
	return *o.CollectResponse
}

// GetCollectResponseOk returns a tuple with the CollectResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallApiOptions) GetCollectResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.CollectResponse) {
		return nil, false
	}
	return o.CollectResponse, true
}

// HasCollectResponse returns a boolean if a field has been set.
func (o *CallApiOptions) HasCollectResponse() bool {
	if o != nil && !IsNil(o.CollectResponse) {
		return true
	}

	return false
}

// SetCollectResponse gets a reference to the given bool and assigns it to the CollectResponse field.
func (o *CallApiOptions) SetCollectResponse(v bool) {
	o.CollectResponse = &v
}

func (o CallApiOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallApiOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.CollectResponse) {
		toSerialize["collectResponse"] = o.CollectResponse
	}
	return toSerialize, nil
}

type NullableCallApiOptions struct {
	value *CallApiOptions
	isSet bool
}

func (v NullableCallApiOptions) Get() *CallApiOptions {
	return v.value
}

func (v *NullableCallApiOptions) Set(val *CallApiOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCallApiOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCallApiOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallApiOptions(val *CallApiOptions) *NullableCallApiOptions {
	return &NullableCallApiOptions{value: val, isSet: true}
}

func (v NullableCallApiOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallApiOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

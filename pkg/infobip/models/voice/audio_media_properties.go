/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the AudioMediaProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioMediaProperties{}

// AudioMediaProperties Audio media properties.
type AudioMediaProperties struct {
	// Indicates whether the end user can speak.
	Muted *bool
	// Indicates whether the end user muted himself.
	UserMuted *bool
	// Indicates whether the end user can hear.
	Deaf *bool
}

// NewAudioMediaProperties instantiates a new AudioMediaProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewAudioMediaProperties() *AudioMediaProperties {
	this := AudioMediaProperties{}
	return &this
}

// NewAudioMediaPropertiesWithDefaults instantiates a new AudioMediaProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioMediaPropertiesWithDefaults() *AudioMediaProperties {
	this := AudioMediaProperties{}

	return &this
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *AudioMediaProperties) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioMediaProperties) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *AudioMediaProperties) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *AudioMediaProperties) SetMuted(v bool) {
	o.Muted = &v
}

// GetUserMuted returns the UserMuted field value if set, zero value otherwise.
func (o *AudioMediaProperties) GetUserMuted() bool {
	if o == nil || IsNil(o.UserMuted) {
		var ret bool
		return ret
	}
	return *o.UserMuted
}

// GetUserMutedOk returns a tuple with the UserMuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioMediaProperties) GetUserMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.UserMuted) {
		return nil, false
	}
	return o.UserMuted, true
}

// HasUserMuted returns a boolean if a field has been set.
func (o *AudioMediaProperties) HasUserMuted() bool {
	if o != nil && !IsNil(o.UserMuted) {
		return true
	}

	return false
}

// SetUserMuted gets a reference to the given bool and assigns it to the UserMuted field.
func (o *AudioMediaProperties) SetUserMuted(v bool) {
	o.UserMuted = &v
}

// GetDeaf returns the Deaf field value if set, zero value otherwise.
func (o *AudioMediaProperties) GetDeaf() bool {
	if o == nil || IsNil(o.Deaf) {
		var ret bool
		return ret
	}
	return *o.Deaf
}

// GetDeafOk returns a tuple with the Deaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioMediaProperties) GetDeafOk() (*bool, bool) {
	if o == nil || IsNil(o.Deaf) {
		return nil, false
	}
	return o.Deaf, true
}

// HasDeaf returns a boolean if a field has been set.
func (o *AudioMediaProperties) HasDeaf() bool {
	if o != nil && !IsNil(o.Deaf) {
		return true
	}

	return false
}

// SetDeaf gets a reference to the given bool and assigns it to the Deaf field.
func (o *AudioMediaProperties) SetDeaf(v bool) {
	o.Deaf = &v
}

func (o AudioMediaProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioMediaProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.UserMuted) {
		toSerialize["userMuted"] = o.UserMuted
	}
	if !IsNil(o.Deaf) {
		toSerialize["deaf"] = o.Deaf
	}
	return toSerialize, nil
}

type NullableAudioMediaProperties struct {
	value *AudioMediaProperties
	isSet bool
}

func (v NullableAudioMediaProperties) Get() *AudioMediaProperties {
	return v.value
}

func (v *NullableAudioMediaProperties) Set(val *AudioMediaProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioMediaProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioMediaProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioMediaProperties(val *AudioMediaProperties) *NullableAudioMediaProperties {
	return &NullableAudioMediaProperties{value: val, isSet: true}
}

func (v NullableAudioMediaProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioMediaProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the MultiChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiChannel{}

// MultiChannel Multi-channel configuration. If enabled, audio of each participant will be in a separate channel in the composed file. Otherwise, audio of all participants will be mixed into a single channel in the composed file.
type MultiChannel struct {
	Enabled bool
}

type _MultiChannel MultiChannel

// NewMultiChannel instantiates a new MultiChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewMultiChannel(enabled bool) *MultiChannel {
	this := MultiChannel{}
	this.Enabled = enabled
	return &this
}

// NewMultiChannelWithDefaults instantiates a new MultiChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiChannelWithDefaults() *MultiChannel {
	this := MultiChannel{}

	return &this
}

// GetEnabled returns the Enabled field value
func (o *MultiChannel) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MultiChannel) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MultiChannel) SetEnabled(v bool) {
	o.Enabled = v
}

func (o MultiChannel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableMultiChannel struct {
	value *MultiChannel
	isSet bool
}

func (v NullableMultiChannel) Get() *MultiChannel {
	return v.value
}

func (v *NullableMultiChannel) Set(val *MultiChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiChannel(val *MultiChannel) *NullableMultiChannel {
	return &NullableMultiChannel{value: val, isSet: true}
}

func (v NullableMultiChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

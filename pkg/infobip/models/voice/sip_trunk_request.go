/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// SipTrunkRequest struct for SipTrunkRequest
type SipTrunkRequest struct {
	ProviderSipTrunkRequest   *ProviderSipTrunkRequest
	RegisteredSipTrunkRequest *RegisteredSipTrunkRequest
	StaticSipTrunkRequest     *StaticSipTrunkRequest
}

// ProviderSipTrunkRequestAsSipTrunkRequest is a convenience function that returns ProviderSipTrunkRequest wrapped in SipTrunkRequest
func ProviderSipTrunkRequestAsSipTrunkRequest(v *ProviderSipTrunkRequest) SipTrunkRequest {
	return SipTrunkRequest{
		ProviderSipTrunkRequest: v,
	}
}

// RegisteredSipTrunkRequestAsSipTrunkRequest is a convenience function that returns RegisteredSipTrunkRequest wrapped in SipTrunkRequest
func RegisteredSipTrunkRequestAsSipTrunkRequest(v *RegisteredSipTrunkRequest) SipTrunkRequest {
	return SipTrunkRequest{
		RegisteredSipTrunkRequest: v,
	}
}

// StaticSipTrunkRequestAsSipTrunkRequest is a convenience function that returns StaticSipTrunkRequest wrapped in SipTrunkRequest
func StaticSipTrunkRequestAsSipTrunkRequest(v *StaticSipTrunkRequest) SipTrunkRequest {
	return SipTrunkRequest{
		StaticSipTrunkRequest: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SipTrunkRequest) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'PROVIDER'
	if jsonDict["type"] == "PROVIDER" {
		// try to unmarshal JSON data into ProviderSipTrunkRequest
		err = json.Unmarshal(data, &dst.ProviderSipTrunkRequest)
		if err == nil {
			jsonProviderSipTrunkRequest, _ := json.Marshal(dst.ProviderSipTrunkRequest)
			if string(jsonProviderSipTrunkRequest) == "{}" { // empty struct
				dst.ProviderSipTrunkRequest = nil
			} else {
				return nil // data stored in dst.ProviderSipTrunkRequest, return on the first match
			}
		} else {
			dst.ProviderSipTrunkRequest = nil
		}
	}
	// check if the discriminator value is 'REGISTERED'
	if jsonDict["type"] == "REGISTERED" {
		// try to unmarshal JSON data into RegisteredSipTrunkRequest
		err = json.Unmarshal(data, &dst.RegisteredSipTrunkRequest)
		if err == nil {
			jsonRegisteredSipTrunkRequest, _ := json.Marshal(dst.RegisteredSipTrunkRequest)
			if string(jsonRegisteredSipTrunkRequest) == "{}" { // empty struct
				dst.RegisteredSipTrunkRequest = nil
			} else {
				return nil // data stored in dst.RegisteredSipTrunkRequest, return on the first match
			}
		} else {
			dst.RegisteredSipTrunkRequest = nil
		}
	}
	// check if the discriminator value is 'STATIC'
	if jsonDict["type"] == "STATIC" {
		// try to unmarshal JSON data into StaticSipTrunkRequest
		err = json.Unmarshal(data, &dst.StaticSipTrunkRequest)
		if err == nil {
			jsonStaticSipTrunkRequest, _ := json.Marshal(dst.StaticSipTrunkRequest)
			if string(jsonStaticSipTrunkRequest) == "{}" { // empty struct
				dst.StaticSipTrunkRequest = nil
			} else {
				return nil // data stored in dst.StaticSipTrunkRequest, return on the first match
			}
		} else {
			dst.StaticSipTrunkRequest = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(SipTrunkRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SipTrunkRequest) MarshalJSON() ([]byte, error) {
	if src.ProviderSipTrunkRequest != nil {
		return json.Marshal(&src.ProviderSipTrunkRequest)
	}
	if src.RegisteredSipTrunkRequest != nil {
		return json.Marshal(&src.RegisteredSipTrunkRequest)
	}
	if src.StaticSipTrunkRequest != nil {
		return json.Marshal(&src.StaticSipTrunkRequest)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *SipTrunkRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ProviderSipTrunkRequest != nil {
		return obj.ProviderSipTrunkRequest
	}
	if obj.RegisteredSipTrunkRequest != nil {
		return obj.RegisteredSipTrunkRequest
	}
	if obj.StaticSipTrunkRequest != nil {
		return obj.StaticSipTrunkRequest
	}
	// all schemas are nil
	return nil
}

type NullableSipTrunkRequest struct {
	value *SipTrunkRequest
	isSet bool
}

func (v NullableSipTrunkRequest) Get() *SipTrunkRequest {
	return v.value
}

func (v *NullableSipTrunkRequest) Set(val *SipTrunkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSipTrunkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSipTrunkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipTrunkRequest(val *SipTrunkRequest) *NullableSipTrunkRequest {
	return &NullableSipTrunkRequest{value: val, isSet: true}
}

func (v NullableSipTrunkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipTrunkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

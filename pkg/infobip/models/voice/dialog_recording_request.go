/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the DialogRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DialogRecordingRequest{}

// DialogRecordingRequest struct for DialogRecordingRequest
type DialogRecordingRequest struct {
	RecordingType     RecordingType
	DialogComposition *DialogRecordingComposition
	// Custom data.
	CustomData *map[string]string
	// Custom name for the recording's zip file. Applicable only when SFTP server is enabled on [Voice settings page](https://portal.infobip.com/apps/voice/recording/settings). Using the same filePrefix will override the files on the SFTP server. For recordings without composition, `callId` and `fileId` will be appended to the `filePrefix` value.
	FilePrefix *string
}

type _DialogRecordingRequest DialogRecordingRequest

// NewDialogRecordingRequest instantiates a new DialogRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewDialogRecordingRequest(recordingType RecordingType) *DialogRecordingRequest {
	this := DialogRecordingRequest{}
	this.RecordingType = recordingType
	return &this
}

// NewDialogRecordingRequestWithDefaults instantiates a new DialogRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDialogRecordingRequestWithDefaults() *DialogRecordingRequest {
	this := DialogRecordingRequest{}

	return &this
}

// GetRecordingType returns the RecordingType field value
func (o *DialogRecordingRequest) GetRecordingType() RecordingType {
	if o == nil {
		var ret RecordingType
		return ret
	}

	return o.RecordingType
}

// GetRecordingTypeOk returns a tuple with the RecordingType field value
// and a boolean to check if the value has been set.
func (o *DialogRecordingRequest) GetRecordingTypeOk() (*RecordingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordingType, true
}

// SetRecordingType sets field value
func (o *DialogRecordingRequest) SetRecordingType(v RecordingType) {
	o.RecordingType = v
}

// GetDialogComposition returns the DialogComposition field value if set, zero value otherwise.
func (o *DialogRecordingRequest) GetDialogComposition() DialogRecordingComposition {
	if o == nil || IsNil(o.DialogComposition) {
		var ret DialogRecordingComposition
		return ret
	}
	return *o.DialogComposition
}

// GetDialogCompositionOk returns a tuple with the DialogComposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingRequest) GetDialogCompositionOk() (*DialogRecordingComposition, bool) {
	if o == nil || IsNil(o.DialogComposition) {
		return nil, false
	}
	return o.DialogComposition, true
}

// HasDialogComposition returns a boolean if a field has been set.
func (o *DialogRecordingRequest) HasDialogComposition() bool {
	if o != nil && !IsNil(o.DialogComposition) {
		return true
	}

	return false
}

// SetDialogComposition gets a reference to the given DialogRecordingComposition and assigns it to the DialogComposition field.
func (o *DialogRecordingRequest) SetDialogComposition(v DialogRecordingComposition) {
	o.DialogComposition = &v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *DialogRecordingRequest) GetCustomData() map[string]string {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]string
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingRequest) GetCustomDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *DialogRecordingRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]string and assigns it to the CustomData field.
func (o *DialogRecordingRequest) SetCustomData(v map[string]string) {
	o.CustomData = &v
}

// GetFilePrefix returns the FilePrefix field value if set, zero value otherwise.
func (o *DialogRecordingRequest) GetFilePrefix() string {
	if o == nil || IsNil(o.FilePrefix) {
		var ret string
		return ret
	}
	return *o.FilePrefix
}

// GetFilePrefixOk returns a tuple with the FilePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DialogRecordingRequest) GetFilePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.FilePrefix) {
		return nil, false
	}
	return o.FilePrefix, true
}

// HasFilePrefix returns a boolean if a field has been set.
func (o *DialogRecordingRequest) HasFilePrefix() bool {
	if o != nil && !IsNil(o.FilePrefix) {
		return true
	}

	return false
}

// SetFilePrefix gets a reference to the given string and assigns it to the FilePrefix field.
func (o *DialogRecordingRequest) SetFilePrefix(v string) {
	o.FilePrefix = &v
}

func (o DialogRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DialogRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordingType"] = o.RecordingType
	if !IsNil(o.DialogComposition) {
		toSerialize["dialogComposition"] = o.DialogComposition
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.FilePrefix) {
		toSerialize["filePrefix"] = o.FilePrefix
	}
	return toSerialize, nil
}

type NullableDialogRecordingRequest struct {
	value *DialogRecordingRequest
	isSet bool
}

func (v NullableDialogRecordingRequest) Get() *DialogRecordingRequest {
	return v.value
}

func (v *NullableDialogRecordingRequest) Set(val *DialogRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDialogRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDialogRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDialogRecordingRequest(val *DialogRecordingRequest) *NullableDialogRecordingRequest {
	return &NullableDialogRecordingRequest{value: val, isSet: true}
}

func (v NullableDialogRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDialogRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

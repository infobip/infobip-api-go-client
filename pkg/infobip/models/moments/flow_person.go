/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the FlowPerson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowPerson{}

// FlowPerson Person attributes. In case a person with either the specified <code>externalId</code> or <code>contactInformation</code> already exists in the People, the persons will be automatically merged. See <a href=\"https://www.infobip.com/docs/api/customer-engagement/moments/add-flow-participants\" target=\"_blank\">endpoint description</a> for more info.
type FlowPerson struct {
	// Date and time of creation. Has the following format: yyyy-MM-dd'T'HH:mm:ss.
	CreatedAt *string
	// Date and time of last modification. Has the following format: yyyy-MM-dd'T'HH:mm:ss.
	ModifiedAt *string
	// Unique id of the entity.
	Id *int64
	// Unique ID for a person from your or another external system, 256 characters max.
	ExternalId *string
	// Person's first name, 255 characters max.
	FirstName *string
	// Person's last name, 255 characters max.
	LastName *string
	Type     *FlowType
	// Person's title, 50 characters max.
	Address *string
	// Person's city, 50 characters max.
	City *string
	// Person's country, 50 characters max.
	Country *string
	Gender  *FlowGender
	// Person's date of birth, format `YYYY-MM-DD`.
	BirthDate *string
	// Person's middle name, 50 characters max.
	MiddleName *string
	// Person's preferred language. Must be in two letter ISO (xx) or language-region BCP-47 (xx-YY) format.
	PreferredLanguage *string
	// URL for the person's profile picture, 2083 characters max.
	ProfilePicture *string
	Origin         *FlowOrigin
	ModifiedFrom   *FlowOrigin
	// List of tags that this person has.
	Tags []string
	// List of custom attributes for the person, 4096 characters max per value.
	CustomAttributes   map[string]interface{}
	ContactInformation *FlowPersonContacts
	Integrations       *FlowIntegrations
	// Person's computed attributes grouped by type.
	ComputedAttributes map[string]interface{}
}

// NewFlowPerson instantiates a new FlowPerson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewFlowPerson() *FlowPerson {
	this := FlowPerson{}
	return &this
}

// NewFlowPersonWithDefaults instantiates a new FlowPerson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowPersonWithDefaults() *FlowPerson {
	this := FlowPerson{}

	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FlowPerson) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FlowPerson) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FlowPerson) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *FlowPerson) GetModifiedAt() string {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *FlowPerson) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *FlowPerson) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlowPerson) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlowPerson) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FlowPerson) SetId(v int64) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *FlowPerson) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *FlowPerson) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *FlowPerson) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *FlowPerson) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *FlowPerson) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *FlowPerson) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *FlowPerson) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *FlowPerson) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *FlowPerson) SetLastName(v string) {
	o.LastName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FlowPerson) GetType() FlowType {
	if o == nil || IsNil(o.Type) {
		var ret FlowType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetTypeOk() (*FlowType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FlowPerson) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given FlowType and assigns it to the Type field.
func (o *FlowPerson) SetType(v FlowType) {
	o.Type = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *FlowPerson) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *FlowPerson) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *FlowPerson) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *FlowPerson) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *FlowPerson) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *FlowPerson) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FlowPerson) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FlowPerson) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *FlowPerson) SetCountry(v string) {
	o.Country = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *FlowPerson) GetGender() FlowGender {
	if o == nil || IsNil(o.Gender) {
		var ret FlowGender
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetGenderOk() (*FlowGender, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *FlowPerson) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given FlowGender and assigns it to the Gender field.
func (o *FlowPerson) SetGender(v FlowGender) {
	o.Gender = &v
}

// GetBirthDate returns the BirthDate field value if set, zero value otherwise.
func (o *FlowPerson) GetBirthDate() string {
	if o == nil || IsNil(o.BirthDate) {
		var ret string
		return ret
	}
	return *o.BirthDate
}

// GetBirthDateOk returns a tuple with the BirthDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetBirthDateOk() (*string, bool) {
	if o == nil || IsNil(o.BirthDate) {
		return nil, false
	}
	return o.BirthDate, true
}

// HasBirthDate returns a boolean if a field has been set.
func (o *FlowPerson) HasBirthDate() bool {
	if o != nil && !IsNil(o.BirthDate) {
		return true
	}

	return false
}

// SetBirthDate gets a reference to the given string and assigns it to the BirthDate field.
func (o *FlowPerson) SetBirthDate(v string) {
	o.BirthDate = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *FlowPerson) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *FlowPerson) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *FlowPerson) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetPreferredLanguage returns the PreferredLanguage field value if set, zero value otherwise.
func (o *FlowPerson) GetPreferredLanguage() string {
	if o == nil || IsNil(o.PreferredLanguage) {
		var ret string
		return ret
	}
	return *o.PreferredLanguage
}

// GetPreferredLanguageOk returns a tuple with the PreferredLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetPreferredLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredLanguage) {
		return nil, false
	}
	return o.PreferredLanguage, true
}

// HasPreferredLanguage returns a boolean if a field has been set.
func (o *FlowPerson) HasPreferredLanguage() bool {
	if o != nil && !IsNil(o.PreferredLanguage) {
		return true
	}

	return false
}

// SetPreferredLanguage gets a reference to the given string and assigns it to the PreferredLanguage field.
func (o *FlowPerson) SetPreferredLanguage(v string) {
	o.PreferredLanguage = &v
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise.
func (o *FlowPerson) GetProfilePicture() string {
	if o == nil || IsNil(o.ProfilePicture) {
		var ret string
		return ret
	}
	return *o.ProfilePicture
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetProfilePictureOk() (*string, bool) {
	if o == nil || IsNil(o.ProfilePicture) {
		return nil, false
	}
	return o.ProfilePicture, true
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *FlowPerson) HasProfilePicture() bool {
	if o != nil && !IsNil(o.ProfilePicture) {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given string and assigns it to the ProfilePicture field.
func (o *FlowPerson) SetProfilePicture(v string) {
	o.ProfilePicture = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *FlowPerson) GetOrigin() FlowOrigin {
	if o == nil || IsNil(o.Origin) {
		var ret FlowOrigin
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetOriginOk() (*FlowOrigin, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *FlowPerson) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given FlowOrigin and assigns it to the Origin field.
func (o *FlowPerson) SetOrigin(v FlowOrigin) {
	o.Origin = &v
}

// GetModifiedFrom returns the ModifiedFrom field value if set, zero value otherwise.
func (o *FlowPerson) GetModifiedFrom() FlowOrigin {
	if o == nil || IsNil(o.ModifiedFrom) {
		var ret FlowOrigin
		return ret
	}
	return *o.ModifiedFrom
}

// GetModifiedFromOk returns a tuple with the ModifiedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetModifiedFromOk() (*FlowOrigin, bool) {
	if o == nil || IsNil(o.ModifiedFrom) {
		return nil, false
	}
	return o.ModifiedFrom, true
}

// HasModifiedFrom returns a boolean if a field has been set.
func (o *FlowPerson) HasModifiedFrom() bool {
	if o != nil && !IsNil(o.ModifiedFrom) {
		return true
	}

	return false
}

// SetModifiedFrom gets a reference to the given FlowOrigin and assigns it to the ModifiedFrom field.
func (o *FlowPerson) SetModifiedFrom(v FlowOrigin) {
	o.ModifiedFrom = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FlowPerson) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FlowPerson) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FlowPerson) SetTags(v []string) {
	o.Tags = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *FlowPerson) GetCustomAttributes() map[string]interface{} {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetCustomAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return map[string]interface{}{}, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *FlowPerson) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given map[string]interface{} and assigns it to the CustomAttributes field.
func (o *FlowPerson) SetCustomAttributes(v map[string]interface{}) {
	o.CustomAttributes = v
}

// GetContactInformation returns the ContactInformation field value if set, zero value otherwise.
func (o *FlowPerson) GetContactInformation() FlowPersonContacts {
	if o == nil || IsNil(o.ContactInformation) {
		var ret FlowPersonContacts
		return ret
	}
	return *o.ContactInformation
}

// GetContactInformationOk returns a tuple with the ContactInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetContactInformationOk() (*FlowPersonContacts, bool) {
	if o == nil || IsNil(o.ContactInformation) {
		return nil, false
	}
	return o.ContactInformation, true
}

// HasContactInformation returns a boolean if a field has been set.
func (o *FlowPerson) HasContactInformation() bool {
	if o != nil && !IsNil(o.ContactInformation) {
		return true
	}

	return false
}

// SetContactInformation gets a reference to the given FlowPersonContacts and assigns it to the ContactInformation field.
func (o *FlowPerson) SetContactInformation(v FlowPersonContacts) {
	o.ContactInformation = &v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *FlowPerson) GetIntegrations() FlowIntegrations {
	if o == nil || IsNil(o.Integrations) {
		var ret FlowIntegrations
		return ret
	}
	return *o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetIntegrationsOk() (*FlowIntegrations, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *FlowPerson) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given FlowIntegrations and assigns it to the Integrations field.
func (o *FlowPerson) SetIntegrations(v FlowIntegrations) {
	o.Integrations = &v
}

// GetComputedAttributes returns the ComputedAttributes field value if set, zero value otherwise.
func (o *FlowPerson) GetComputedAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ComputedAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedAttributes
}

// GetComputedAttributesOk returns a tuple with the ComputedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPerson) GetComputedAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ComputedAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ComputedAttributes, true
}

// HasComputedAttributes returns a boolean if a field has been set.
func (o *FlowPerson) HasComputedAttributes() bool {
	if o != nil && !IsNil(o.ComputedAttributes) {
		return true
	}

	return false
}

// SetComputedAttributes gets a reference to the given map[string]interface{} and assigns it to the ComputedAttributes field.
func (o *FlowPerson) SetComputedAttributes(v map[string]interface{}) {
	o.ComputedAttributes = v
}

func (o FlowPerson) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowPerson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.BirthDate) {
		toSerialize["birthDate"] = o.BirthDate
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !IsNil(o.PreferredLanguage) {
		toSerialize["preferredLanguage"] = o.PreferredLanguage
	}
	if !IsNil(o.ProfilePicture) {
		toSerialize["profilePicture"] = o.ProfilePicture
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.ModifiedFrom) {
		toSerialize["modifiedFrom"] = o.ModifiedFrom
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.ContactInformation) {
		toSerialize["contactInformation"] = o.ContactInformation
	}
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.ComputedAttributes) {
		toSerialize["computedAttributes"] = o.ComputedAttributes
	}
	return toSerialize, nil
}

type NullableFlowPerson struct {
	value *FlowPerson
	isSet bool
}

func (v NullableFlowPerson) Get() *FlowPerson {
	return v.value
}

func (v *NullableFlowPerson) Set(val *FlowPerson) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowPerson) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowPerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowPerson(val *FlowPerson) *NullableFlowPerson {
	return &NullableFlowPerson{value: val, isSet: true}
}

func (v NullableFlowPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowPerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

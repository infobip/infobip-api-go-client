/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// CallRoutingCriteria Criteria type.
type CallRoutingCriteria struct {
	CallRoutingPhoneCriteria  *CallRoutingPhoneCriteria
	CallRoutingSipCriteria    *CallRoutingSipCriteria
	CallRoutingWebRTCCriteria *CallRoutingWebRTCCriteria
}

// CallRoutingPhoneCriteriaAsCallRoutingCriteria is a convenience function that returns CallRoutingPhoneCriteria wrapped in CallRoutingCriteria
func CallRoutingPhoneCriteriaAsCallRoutingCriteria(v *CallRoutingPhoneCriteria) CallRoutingCriteria {
	return CallRoutingCriteria{
		CallRoutingPhoneCriteria: v,
	}
}

// CallRoutingSipCriteriaAsCallRoutingCriteria is a convenience function that returns CallRoutingSipCriteria wrapped in CallRoutingCriteria
func CallRoutingSipCriteriaAsCallRoutingCriteria(v *CallRoutingSipCriteria) CallRoutingCriteria {
	return CallRoutingCriteria{
		CallRoutingSipCriteria: v,
	}
}

// CallRoutingWebRTCCriteriaAsCallRoutingCriteria is a convenience function that returns CallRoutingWebRTCCriteria wrapped in CallRoutingCriteria
func CallRoutingWebRTCCriteriaAsCallRoutingCriteria(v *CallRoutingWebRTCCriteria) CallRoutingCriteria {
	return CallRoutingCriteria{
		CallRoutingWebRTCCriteria: v,
	}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CallRoutingCriteria) UnmarshalJSON(data []byte) error {
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err := json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'PHONE'
	if jsonDict["type"] == "PHONE" {
		// try to unmarshal JSON data into CallRoutingPhoneCriteria
		err = json.Unmarshal(data, &dst.CallRoutingPhoneCriteria)
		if err == nil {
			jsonCallRoutingPhoneCriteria, _ := json.Marshal(dst.CallRoutingPhoneCriteria)
			if string(jsonCallRoutingPhoneCriteria) == "{}" { // empty struct
				dst.CallRoutingPhoneCriteria = nil
			} else {
				return nil // data stored in dst.CallRoutingPhoneCriteria, return on the first match
			}
		} else {
			dst.CallRoutingPhoneCriteria = nil
		}
	}
	// check if the discriminator value is 'SIP'
	if jsonDict["type"] == "SIP" {
		// try to unmarshal JSON data into CallRoutingSipCriteria
		err = json.Unmarshal(data, &dst.CallRoutingSipCriteria)
		if err == nil {
			jsonCallRoutingSipCriteria, _ := json.Marshal(dst.CallRoutingSipCriteria)
			if string(jsonCallRoutingSipCriteria) == "{}" { // empty struct
				dst.CallRoutingSipCriteria = nil
			} else {
				return nil // data stored in dst.CallRoutingSipCriteria, return on the first match
			}
		} else {
			dst.CallRoutingSipCriteria = nil
		}
	}
	// check if the discriminator value is 'WEBRTC'
	if jsonDict["type"] == "WEBRTC" {
		// try to unmarshal JSON data into CallRoutingWebRTCCriteria
		err = json.Unmarshal(data, &dst.CallRoutingWebRTCCriteria)
		if err == nil {
			jsonCallRoutingWebRTCCriteria, _ := json.Marshal(dst.CallRoutingWebRTCCriteria)
			if string(jsonCallRoutingWebRTCCriteria) == "{}" { // empty struct
				dst.CallRoutingWebRTCCriteria = nil
			} else {
				return nil // data stored in dst.CallRoutingWebRTCCriteria, return on the first match
			}
		} else {
			dst.CallRoutingWebRTCCriteria = nil
		}
	}
	return fmt.Errorf("Data failed to match schemas in anyOf(CallRoutingCriteria)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallRoutingCriteria) MarshalJSON() ([]byte, error) {
	if src.CallRoutingPhoneCriteria != nil {
		return json.Marshal(&src.CallRoutingPhoneCriteria)
	}
	if src.CallRoutingSipCriteria != nil {
		return json.Marshal(&src.CallRoutingSipCriteria)
	}
	if src.CallRoutingWebRTCCriteria != nil {
		return json.Marshal(&src.CallRoutingWebRTCCriteria)
	}
	return nil, nil // no data in anyOf schemas
}

// Get the actual instance
func (obj *CallRoutingCriteria) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CallRoutingPhoneCriteria != nil {
		return obj.CallRoutingPhoneCriteria
	}
	if obj.CallRoutingSipCriteria != nil {
		return obj.CallRoutingSipCriteria
	}
	if obj.CallRoutingWebRTCCriteria != nil {
		return obj.CallRoutingWebRTCCriteria
	}
	// all schemas are nil
	return nil
}

type NullableCallRoutingCriteria struct {
	value *CallRoutingCriteria
	isSet bool
}

func (v NullableCallRoutingCriteria) Get() *CallRoutingCriteria {
	return v.value
}

func (v *NullableCallRoutingCriteria) Set(val *CallRoutingCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRoutingCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRoutingCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRoutingCriteria(val *CallRoutingCriteria) *NullableCallRoutingCriteria {
	return &NullableCallRoutingCriteria{value: val, isSet: true}
}

func (v NullableCallRoutingCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRoutingCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moments

import (
	"encoding/json"
	"fmt"
)

// FlowOrigin The information which describes the source of the last modification of record.
type FlowOrigin string

// List of FlowOrigin
const (
	FLOWORIGIN_API           FlowOrigin = "API"
	FLOWORIGIN_PORTAL        FlowOrigin = "PORTAL"
	FLOWORIGIN_WEB_SDK       FlowOrigin = "WEB_SDK"
	FLOWORIGIN_INTEGRATION   FlowOrigin = "INTEGRATION"
	FLOWORIGIN_PUSH          FlowOrigin = "PUSH"
	FLOWORIGIN_FACEBOOK      FlowOrigin = "FACEBOOK"
	FLOWORIGIN_LINE          FlowOrigin = "LINE"
	FLOWORIGIN_TELEGRAM      FlowOrigin = "TELEGRAM"
	FLOWORIGIN_SALESFORCE    FlowOrigin = "SALESFORCE"
	FLOWORIGIN_DYNAMICS      FlowOrigin = "DYNAMICS"
	FLOWORIGIN_ZAPIER        FlowOrigin = "ZAPIER"
	FLOWORIGIN_FORMS         FlowOrigin = "FORMS"
	FLOWORIGIN_COMPUTED      FlowOrigin = "COMPUTED"
	FLOWORIGIN_ANSWERS       FlowOrigin = "ANSWERS"
	FLOWORIGIN_CONVERSATIONS FlowOrigin = "CONVERSATIONS"
)

// All allowed values of FlowOrigin enum
var AllowedFlowOriginEnumValues = []FlowOrigin{
	"API",
	"PORTAL",
	"WEB_SDK",
	"INTEGRATION",
	"PUSH",
	"FACEBOOK",
	"LINE",
	"TELEGRAM",
	"SALESFORCE",
	"DYNAMICS",
	"ZAPIER",
	"FORMS",
	"COMPUTED",
	"ANSWERS",
	"CONVERSATIONS",
}

func (v *FlowOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowOrigin(value)
	for _, existing := range AllowedFlowOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowOrigin", value)
}

// NewFlowOriginFromValue returns a pointer to a valid FlowOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowOriginFromValue(v string) (*FlowOrigin, error) {
	ev := FlowOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowOrigin: valid values are %v", v, AllowedFlowOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowOrigin) IsValid() bool {
	for _, existing := range AllowedFlowOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowOrigin value
func (v FlowOrigin) Ptr() *FlowOrigin {
	return &v
}

type NullableFlowOrigin struct {
	value *FlowOrigin
	isSet bool
}

func (v NullableFlowOrigin) Get() *FlowOrigin {
	return v.value
}

func (v *NullableFlowOrigin) Set(val *FlowOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowOrigin(val *FlowOrigin) *NullableFlowOrigin {
	return &NullableFlowOrigin{value: val, isSet: true}
}

func (v NullableFlowOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

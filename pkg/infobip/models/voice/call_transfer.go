/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"

	. "github.com/infobip/infobip-api-go-client/v3/pkg/infobip"
)

// checks if the CallTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallTransfer{}

// CallTransfer Call transfers object enables transferring the ongoing call to another recipient(s) and establish a communication between your original recipient and additional one.
type CallTransfer struct {
	// Maximum duration of the transferred call, specified in seconds.
	CallTransferMaxDuration *int32
	// Criteria for establishing call transfer, if `dtmf` is evaluated.
	Equals *string
	// Phone number of the recipient that will receive transferred call. Must be written in E.164 standard (Example: 41793026727).
	TransferTo string
	// Specifies what to evaluate. Can be `dtmf` or `anyDtmf`.
	If string
}

type _CallTransfer CallTransfer

// NewCallTransfer instantiates a new CallTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed

func NewCallTransfer(transferTo string, if_ string) *CallTransfer {
	this := CallTransfer{}
	this.TransferTo = transferTo
	this.If = if_
	return &this
}

// NewCallTransferWithDefaults instantiates a new CallTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallTransferWithDefaults() *CallTransfer {
	this := CallTransfer{}

	return &this
}

// GetCallTransferMaxDuration returns the CallTransferMaxDuration field value if set, zero value otherwise.
func (o *CallTransfer) GetCallTransferMaxDuration() int32 {
	if o == nil || IsNil(o.CallTransferMaxDuration) {
		var ret int32
		return ret
	}
	return *o.CallTransferMaxDuration
}

// GetCallTransferMaxDurationOk returns a tuple with the CallTransferMaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTransfer) GetCallTransferMaxDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.CallTransferMaxDuration) {
		return nil, false
	}
	return o.CallTransferMaxDuration, true
}

// HasCallTransferMaxDuration returns a boolean if a field has been set.
func (o *CallTransfer) HasCallTransferMaxDuration() bool {
	if o != nil && !IsNil(o.CallTransferMaxDuration) {
		return true
	}

	return false
}

// SetCallTransferMaxDuration gets a reference to the given int32 and assigns it to the CallTransferMaxDuration field.
func (o *CallTransfer) SetCallTransferMaxDuration(v int32) {
	o.CallTransferMaxDuration = &v
}

// GetEquals returns the Equals field value if set, zero value otherwise.
func (o *CallTransfer) GetEquals() string {
	if o == nil || IsNil(o.Equals) {
		var ret string
		return ret
	}
	return *o.Equals
}

// GetEqualsOk returns a tuple with the Equals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTransfer) GetEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.Equals) {
		return nil, false
	}
	return o.Equals, true
}

// HasEquals returns a boolean if a field has been set.
func (o *CallTransfer) HasEquals() bool {
	if o != nil && !IsNil(o.Equals) {
		return true
	}

	return false
}

// SetEquals gets a reference to the given string and assigns it to the Equals field.
func (o *CallTransfer) SetEquals(v string) {
	o.Equals = &v
}

// GetTransferTo returns the TransferTo field value
func (o *CallTransfer) GetTransferTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferTo
}

// GetTransferToOk returns a tuple with the TransferTo field value
// and a boolean to check if the value has been set.
func (o *CallTransfer) GetTransferToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferTo, true
}

// SetTransferTo sets field value
func (o *CallTransfer) SetTransferTo(v string) {
	o.TransferTo = v
}

// GetIf returns the If field value
func (o *CallTransfer) GetIf() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *CallTransfer) GetIfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *CallTransfer) SetIf(v string) {
	o.If = v
}

func (o CallTransfer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallTransferMaxDuration) {
		toSerialize["callTransferMaxDuration"] = o.CallTransferMaxDuration
	}
	if !IsNil(o.Equals) {
		toSerialize["equals"] = o.Equals
	}
	toSerialize["transferTo"] = o.TransferTo
	toSerialize["if"] = o.If
	return toSerialize, nil
}

type NullableCallTransfer struct {
	value *CallTransfer
	isSet bool
}

func (v NullableCallTransfer) Get() *CallTransfer {
	return v.value
}

func (v *NullableCallTransfer) Set(val *CallTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTransfer(val *CallTransfer) *NullableCallTransfer {
	return &NullableCallTransfer{value: val, isSet: true}
}

func (v NullableCallTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

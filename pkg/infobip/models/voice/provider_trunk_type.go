/*
Infobip Client API Libraries OpenAPI Specification

OpenAPI specification containing public endpoints supported in client API libraries.

Contact: support@infobip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voice

import (
	"encoding/json"
	"fmt"
)

// ProviderTrunkType Provider type.
type ProviderTrunkType string

// List of ProviderTrunkType
const (
	PROVIDERTRUNKTYPE_FRESHWORKS    ProviderTrunkType = "FRESHWORKS"
	PROVIDERTRUNKTYPE_GENESYS_CLOUD ProviderTrunkType = "GENESYS_CLOUD"
	PROVIDERTRUNKTYPE_CISCO_WEBEX   ProviderTrunkType = "CISCO_WEBEX"
)

// All allowed values of ProviderTrunkType enum
var AllowedProviderTrunkTypeEnumValues = []ProviderTrunkType{
	"FRESHWORKS",
	"GENESYS_CLOUD",
	"CISCO_WEBEX",
}

func (v *ProviderTrunkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderTrunkType(value)
	for _, existing := range AllowedProviderTrunkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderTrunkType", value)
}

// NewProviderTrunkTypeFromValue returns a pointer to a valid ProviderTrunkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderTrunkTypeFromValue(v string) (*ProviderTrunkType, error) {
	ev := ProviderTrunkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderTrunkType: valid values are %v", v, AllowedProviderTrunkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderTrunkType) IsValid() bool {
	for _, existing := range AllowedProviderTrunkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderTrunkType value
func (v ProviderTrunkType) Ptr() *ProviderTrunkType {
	return &v
}

type NullableProviderTrunkType struct {
	value *ProviderTrunkType
	isSet bool
}

func (v NullableProviderTrunkType) Get() *ProviderTrunkType {
	return v.value
}

func (v *NullableProviderTrunkType) Set(val *ProviderTrunkType) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderTrunkType) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderTrunkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderTrunkType(val *ProviderTrunkType) *NullableProviderTrunkType {
	return &NullableProviderTrunkType{value: val, isSet: true}
}

func (v NullableProviderTrunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderTrunkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
